/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.6.6324.32485 (NJsonSchema v8.33.6323.36213) (http://NSwag.org)
// </auto-generated>
//----------------------

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response } from '@angular/http';

import * as moment from 'moment';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

@Injectable()
export class AccountServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    isTenantAvailable(input: IsTenantAvailableInput): Observable<IsTenantAvailableOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantAvailable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processIsTenantAvailable(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processIsTenantAvailable(response_);
                } catch (e) {
                    return <Observable<IsTenantAvailableOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<IsTenantAvailableOutput>><any>Observable.throw(response_);
        });
    }

    protected processIsTenantAvailable(response: Response): Observable<IsTenantAvailableOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: IsTenantAvailableOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? IsTenantAvailableOutput.fromJS(resultData200) : new IsTenantAvailableOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<IsTenantAvailableOutput>(<any>null);
    }

    /**
     * @return Success
     */
    register(input: RegisterInput): Observable<RegisterOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processRegister(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRegister(response_);
                } catch (e) {
                    return <Observable<RegisterOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RegisterOutput>><any>Observable.throw(response_);
        });
    }

    protected processRegister(response: Response): Observable<RegisterOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: RegisterOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterOutput.fromJS(resultData200) : new RegisterOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<RegisterOutput>(<any>null);
    }

    /**
     * @return Success
     */
    sendPasswordResetCode(input: SendPasswordResetCodeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/SendPasswordResetCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendPasswordResetCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendPasswordResetCode(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendPasswordResetCode(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    resetPassword(input: ResetPasswordInput): Observable<ResetPasswordOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/ResetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processResetPassword(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processResetPassword(response_);
                } catch (e) {
                    return <Observable<ResetPasswordOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResetPasswordOutput>><any>Observable.throw(response_);
        });
    }

    protected processResetPassword(response: Response): Observable<ResetPasswordOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ResetPasswordOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResetPasswordOutput.fromJS(resultData200) : new ResetPasswordOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ResetPasswordOutput>(<any>null);
    }

    /**
     * @return Success
     */
    sendEmailActivationLink(input: SendEmailActivationLinkInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/SendEmailActivationLink";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendEmailActivationLink(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendEmailActivationLink(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendEmailActivationLink(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    activateEmail(input: ActivateEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/ActivateEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processActivateEmail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processActivateEmail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processActivateEmail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    impersonate(input: ImpersonateInput): Observable<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Impersonate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processImpersonate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processImpersonate(response_);
                } catch (e) {
                    return <Observable<ImpersonateOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonateOutput>><any>Observable.throw(response_);
        });
    }

    protected processImpersonate(response: Response): Observable<ImpersonateOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ImpersonateOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonateOutput.fromJS(resultData200) : new ImpersonateOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ImpersonateOutput>(<any>null);
    }

    /**
     * @return Success
     */
    backToImpersonator(): Observable<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/BackToImpersonator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processBackToImpersonator(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processBackToImpersonator(response_);
                } catch (e) {
                    return <Observable<ImpersonateOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonateOutput>><any>Observable.throw(response_);
        });
    }

    protected processBackToImpersonator(response: Response): Observable<ImpersonateOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ImpersonateOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonateOutput.fromJS(resultData200) : new ImpersonateOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ImpersonateOutput>(<any>null);
    }

    /**
     * @return Success
     */
    switchToLinkedAccount(input: SwitchToLinkedAccountInput): Observable<SwitchToLinkedAccountOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/SwitchToLinkedAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSwitchToLinkedAccount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSwitchToLinkedAccount(response_);
                } catch (e) {
                    return <Observable<SwitchToLinkedAccountOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<SwitchToLinkedAccountOutput>><any>Observable.throw(response_);
        });
    }

    protected processSwitchToLinkedAccount(response: Response): Observable<SwitchToLinkedAccountOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: SwitchToLinkedAccountOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SwitchToLinkedAccountOutput.fromJS(resultData200) : new SwitchToLinkedAccountOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<SwitchToLinkedAccountOutput>(<any>null);
    }
}

@Injectable()
export class ActivityServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getActivity(filter: string): Observable<ListResultDtoOfActivityListDto> {
        let url_ = this.baseUrl + "/api/services/app/Activity/GetActivity?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetActivity(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfActivityListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfActivityListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetActivity(response: Response): Observable<ListResultDtoOfActivityListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfActivityListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfActivityListDto.fromJS(resultData200) : new ListResultDtoOfActivityListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfActivityListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getActivityForEdit(id: number): Observable<GetActivity> {
        let url_ = this.baseUrl + "/api/services/app/Activity/GetActivityForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetActivityForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetActivityForEdit(response_);
                } catch (e) {
                    return <Observable<GetActivity>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetActivity>><any>Observable.throw(response_);
        });
    }

    protected processGetActivityForEdit(response: Response): Observable<GetActivity> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetActivity = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetActivity.fromJS(resultData200) : new GetActivity();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetActivity>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateActivity(input: ActivityInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Activity/CreateOrUpdateActivity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateActivity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateActivity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createActivity(input: ActivityInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Activity/CreateActivity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateActivity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateActivity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateActivity(input: ActivityInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Activity/UpdateActivity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateActivity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateActivity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteActivityType(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Activity/GetDeleteActivityType?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteActivityType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteActivityType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteActivityType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getActivityTypeToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Activity/GetActivityTypeToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetActivityTypeToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetActivityTypeToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetActivityTypeToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class AttributeGroupServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAttributeGroup(filter: string): Observable<ListResultDtoOfAttributeGroupListDto> {
        let url_ = this.baseUrl + "/api/services/app/AttributeGroup/GetAttributeGroup?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAttributeGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAttributeGroup(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfAttributeGroupListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfAttributeGroupListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAttributeGroup(response: Response): Observable<ListResultDtoOfAttributeGroupListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfAttributeGroupListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfAttributeGroupListDto.fromJS(resultData200) : new ListResultDtoOfAttributeGroupListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfAttributeGroupListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getAttributeGroupForEdit(id: number): Observable<GetAttributeGroup> {
        let url_ = this.baseUrl + "/api/services/app/AttributeGroup/GetAttributeGroupForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAttributeGroupForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAttributeGroupForEdit(response_);
                } catch (e) {
                    return <Observable<GetAttributeGroup>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetAttributeGroup>><any>Observable.throw(response_);
        });
    }

    protected processGetAttributeGroupForEdit(response: Response): Observable<GetAttributeGroup> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetAttributeGroup = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetAttributeGroup.fromJS(resultData200) : new GetAttributeGroup();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetAttributeGroup>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateAttributeGroup(input: CreateAttributeGroupInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/AttributeGroup/CreateOrUpdateAttributeGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateAttributeGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateAttributeGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateAttributeGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createAttributeGroup(input: CreateAttributeGroupInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/AttributeGroup/CreateAttributeGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateAttributeGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateAttributeGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateAttributeGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateAttributeGroup(input: CreateAttributeGroupInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/AttributeGroup/UpdateAttributeGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateAttributeGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateAttributeGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateAttributeGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAttributeGroupDetail(attributeGroupId: number): Observable<ListResultDtoOfAttributeGroupDetailList> {
        let url_ = this.baseUrl + "/api/services/app/AttributeGroup/GetAttributeGroupDetail?";
        if (attributeGroupId !== undefined)
            url_ += "AttributeGroupId=" + encodeURIComponent("" + attributeGroupId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAttributeGroupDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAttributeGroupDetail(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfAttributeGroupDetailList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfAttributeGroupDetailList>><any>Observable.throw(response_);
        });
    }

    protected processGetAttributeGroupDetail(response: Response): Observable<ListResultDtoOfAttributeGroupDetailList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfAttributeGroupDetailList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfAttributeGroupDetailList.fromJS(resultData200) : new ListResultDtoOfAttributeGroupDetailList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfAttributeGroupDetailList>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateAttributeGroupDetail(input: AttributeGroupDetailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/AttributeGroup/CreateOrUpdateAttributeGroupDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateAttributeGroupDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateAttributeGroupDetail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateAttributeGroupDetail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createAttributeGroupDetail(input: AttributeGroupDetailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/AttributeGroup/CreateAttributeGroupDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateAttributeGroupDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateAttributeGroupDetail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateAttributeGroupDetail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateAttributeGroupDetail(input: AttributeGroupDetailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/AttributeGroup/UpdateAttributeGroupDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateAttributeGroupDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateAttributeGroupDetail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateAttributeGroupDetail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteAttributeGroupDetail(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/AttributeGroup/GetDeleteAttributeGroupDetail?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteAttributeGroupDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteAttributeGroupDetail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteAttributeGroupDetail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteAttributeGroup(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/AttributeGroup/GetDeleteAttributeGroup?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteAttributeGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteAttributeGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteAttributeGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAttributeGroupToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/AttributeGroup/GetAttributeGroupToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAttributeGroupToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAttributeGroupToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAttributeGroupToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class AuditLogServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAuditLogs(startDate: moment.Moment, endDate: moment.Moment, userName: string, serviceName: string, methodName: string, browserInfo: string, hasException: boolean, minExecutionDuration: number, maxExecutionDuration: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfAuditLogListDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogs?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&"; 
        if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&"; 
        if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&"; 
        if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&"; 
        if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&"; 
        if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAuditLogs(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAuditLogs(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfAuditLogListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfAuditLogListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAuditLogs(response: Response): Observable<PagedResultDtoOfAuditLogListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfAuditLogListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfAuditLogListDto.fromJS(resultData200) : new PagedResultDtoOfAuditLogListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfAuditLogListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getAuditLogsToExcel(startDate: moment.Moment, endDate: moment.Moment, userName: string, serviceName: string, methodName: string, browserInfo: string, hasException: boolean, minExecutionDuration: number, maxExecutionDuration: number, sorting: string, maxResultCount: number, skipCount: number): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogsToExcel?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&"; 
        if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&"; 
        if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&"; 
        if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&"; 
        if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&"; 
        if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAuditLogsToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAuditLogsToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAuditLogsToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class CachingServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllCaches(): Observable<ListResultDtoOfCacheDto> {
        let url_ = this.baseUrl + "/api/services/app/Caching/GetAllCaches";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllCaches(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllCaches(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfCacheDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfCacheDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllCaches(response: Response): Observable<ListResultDtoOfCacheDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfCacheDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfCacheDto.fromJS(resultData200) : new ListResultDtoOfCacheDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfCacheDto>(<any>null);
    }

    /**
     * @return Success
     */
    clearCache(input: EntityDtoOfString): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Caching/ClearCache";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processClearCache(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processClearCache(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processClearCache(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    clearAllCaches(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Caching/ClearAllCaches";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processClearAllCaches(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processClearAllCaches(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processClearAllCaches(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ChatServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getUserChatFriendsWithSettings(): Observable<GetUserChatFriendsWithSettingsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Chat/GetUserChatFriendsWithSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserChatFriendsWithSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserChatFriendsWithSettings(response_);
                } catch (e) {
                    return <Observable<GetUserChatFriendsWithSettingsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserChatFriendsWithSettingsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetUserChatFriendsWithSettings(response: Response): Observable<GetUserChatFriendsWithSettingsOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetUserChatFriendsWithSettingsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserChatFriendsWithSettingsOutput.fromJS(resultData200) : new GetUserChatFriendsWithSettingsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetUserChatFriendsWithSettingsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getUserChatMessages(tenantId: number, userId: number, minMessageId: number): Observable<ListResultDtoOfChatMessageDto> {
        let url_ = this.baseUrl + "/api/services/app/Chat/GetUserChatMessages?";
        if (tenantId !== undefined)
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&"; 
        if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (minMessageId !== undefined)
            url_ += "MinMessageId=" + encodeURIComponent("" + minMessageId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserChatMessages(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserChatMessages(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfChatMessageDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfChatMessageDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUserChatMessages(response: Response): Observable<ListResultDtoOfChatMessageDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfChatMessageDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfChatMessageDto.fromJS(resultData200) : new ListResultDtoOfChatMessageDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfChatMessageDto>(<any>null);
    }

    /**
     * @return Success
     */
    markAllUnreadMessagesOfUserAsRead(input: MarkAllUnreadMessagesOfUserAsReadInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Chat/MarkAllUnreadMessagesOfUserAsRead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processMarkAllUnreadMessagesOfUserAsRead(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processMarkAllUnreadMessagesOfUserAsRead(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processMarkAllUnreadMessagesOfUserAsRead(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class CityServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCity(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfCityList> {
        let url_ = this.baseUrl + "/api/services/app/City/GetCity?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCity(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfCityList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfCityList>><any>Observable.throw(response_);
        });
    }

    protected processGetCity(response: Response): Observable<PagedResultDtoOfCityList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfCityList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfCityList.fromJS(resultData200) : new PagedResultDtoOfCityList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfCityList>(<any>null);
    }

    /**
     * @return Success
     */
    getCityForEdit(id: number): Observable<GetCity> {
        let url_ = this.baseUrl + "/api/services/app/City/GetCityForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCityForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCityForEdit(response_);
                } catch (e) {
                    return <Observable<GetCity>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCity>><any>Observable.throw(response_);
        });
    }

    protected processGetCityForEdit(response: Response): Observable<GetCity> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetCity = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCity.fromJS(resultData200) : new GetCity();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetCity>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateCity(input: CreateCityInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/City/CreateOrUpdateCity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateCity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateCity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateCity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createCityAsync(input: CreateCityInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/City/CreateCityAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateCityAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateCityAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateCityAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateCityAsync(input: CreateCityInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/City/UpdateCityAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateCityAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateCityAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateCityAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getCityToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/City/GetCityToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCityToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCityToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCityToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMappedCity(id: number): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/City/GetMappedCity?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMappedCity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMappedCity(response_);
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response_);
        });
    }

    protected processGetMappedCity(response: Response): Observable<boolean> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<boolean>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteCity(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/City/GetDeleteCity?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteCity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteCity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteCity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    convert(value: any): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/City/Convert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processConvert(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processConvert(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processConvert(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class CollectionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCollection(filter: string): Observable<ListResultDtoOfCollectionListDto> {
        let url_ = this.baseUrl + "/api/services/app/Collection/GetCollection?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCollection(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCollection(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfCollectionListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfCollectionListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCollection(response: Response): Observable<ListResultDtoOfCollectionListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfCollectionListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfCollectionListDto.fromJS(resultData200) : new ListResultDtoOfCollectionListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfCollectionListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getCollectionForEdit(id: number): Observable<GetCollection> {
        let url_ = this.baseUrl + "/api/services/app/Collection/GetCollectionForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCollectionForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCollectionForEdit(response_);
                } catch (e) {
                    return <Observable<GetCollection>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCollection>><any>Observable.throw(response_);
        });
    }

    protected processGetCollectionForEdit(response: Response): Observable<GetCollection> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetCollection = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCollection.fromJS(resultData200) : new GetCollection();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetCollection>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateCollection(input: CreateCollectionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Collection/CreateOrUpdateCollection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateCollection(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateCollection(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateCollection(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createCollection(input: CreateCollectionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Collection/CreateCollection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateCollection(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateCollection(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateCollection(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateCollection(input: CreateCollectionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Collection/UpdateCollection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateCollection(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateCollection(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateCollection(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteCollection(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Collection/GetDeleteCollection?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteCollection(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteCollection(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteCollection(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getCollectionToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Collection/GetCollectionToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCollectionToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCollectionToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCollectionToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class ColorCodeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getColorcode(filter: string): Observable<ListResultDtoOfColorCodeList> {
        let url_ = this.baseUrl + "/api/services/app/ColorCode/GetColorcode?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetColorcode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetColorcode(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfColorCodeList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfColorCodeList>><any>Observable.throw(response_);
        });
    }

    protected processGetColorcode(response: Response): Observable<ListResultDtoOfColorCodeList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfColorCodeList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfColorCodeList.fromJS(resultData200) : new ListResultDtoOfColorCodeList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfColorCodeList>(<any>null);
    }

    /**
     * @return Success
     */
    getColorCodeForEdit(id: number): Observable<GetColorCode> {
        let url_ = this.baseUrl + "/api/services/app/ColorCode/GetColorCodeForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetColorCodeForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetColorCodeForEdit(response_);
                } catch (e) {
                    return <Observable<GetColorCode>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetColorCode>><any>Observable.throw(response_);
        });
    }

    protected processGetColorCodeForEdit(response: Response): Observable<GetColorCode> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetColorCode = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetColorCode.fromJS(resultData200) : new GetColorCode();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetColorCode>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateColorcode(input: CreateColorCodeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ColorCode/CreateOrUpdateColorcode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateColorcode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateColorcode(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateColorcode(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createColorcode(input: CreateColorCodeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ColorCode/CreateColorcode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateColorcode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateColorcode(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateColorcode(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateColorcode(input: CreateColorCodeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ColorCode/UpdateColorcode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateColorcode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateColorcode(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateColorcode(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteColorcode(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ColorCode/DeleteColorcode?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteColorcode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteColorcode(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteColorcode(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class CommonLookupServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getEditionsForCombobox(onlyFreeItems: boolean): Observable<ListResultDtoOfSubscribableEditionComboboxItemDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetEditionsForCombobox?";
        if (onlyFreeItems !== undefined)
            url_ += "onlyFreeItems=" + encodeURIComponent("" + onlyFreeItems) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditionsForCombobox(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionsForCombobox(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfSubscribableEditionComboboxItemDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfSubscribableEditionComboboxItemDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionsForCombobox(response: Response): Observable<ListResultDtoOfSubscribableEditionComboboxItemDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfSubscribableEditionComboboxItemDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfSubscribableEditionComboboxItemDto.fromJS(resultData200) : new ListResultDtoOfSubscribableEditionComboboxItemDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfSubscribableEditionComboboxItemDto>(<any>null);
    }

    /**
     * @return Success
     */
    findUsers(input: FindUsersInput): Observable<PagedResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/FindUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processFindUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processFindUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(response_);
        });
    }

    protected processFindUsers(response: Response): Observable<PagedResultDtoOfNameValueDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfNameValueDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNameValueDto.fromJS(resultData200) : new PagedResultDtoOfNameValueDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfNameValueDto>(<any>null);
    }

    /**
     * @return Success
     */
    getDefaultEditionName(): Observable<GetDefaultEditionNameOutput> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetDefaultEditionName";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDefaultEditionName(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDefaultEditionName(response_);
                } catch (e) {
                    return <Observable<GetDefaultEditionNameOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDefaultEditionNameOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetDefaultEditionName(response: Response): Observable<GetDefaultEditionNameOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetDefaultEditionNameOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDefaultEditionNameOutput.fromJS(resultData200) : new GetDefaultEditionNameOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetDefaultEditionNameOutput>(<any>null);
    }
}

@Injectable()
export class CompanyServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCompanies(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfCompanyViewDt> {
        let url_ = this.baseUrl + "/api/services/app/Company/GetCompanies?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanies(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanies(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfCompanyViewDt>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfCompanyViewDt>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanies(response: Response): Observable<PagedResultDtoOfCompanyViewDt> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfCompanyViewDt = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfCompanyViewDt.fromJS(resultData200) : new PagedResultDtoOfCompanyViewDt();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfCompanyViewDt>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanyForEdit(id: number): Observable<GetCompany> {
        let url_ = this.baseUrl + "/api/services/app/Company/GetCompanyForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanyForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanyForEdit(response_);
                } catch (e) {
                    return <Observable<GetCompany>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCompany>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanyForEdit(response: Response): Observable<GetCompany> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetCompany = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCompany.fromJS(resultData200) : new GetCompany();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetCompany>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateCompany(input: CreateCompanyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Company/CreateOrUpdateCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateCompany(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateCompany(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createCompany(input: CreateCompanyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Company/CreateCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateCompany(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateCompany(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateCompany(input: CreateCompanyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Company/UpdateCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateCompany(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateCompany(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteCompany(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Company/DeleteCompany?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteCompany(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteCompany(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getContacts(id: number): Observable<ListResultDtoOfContactViewDto> {
        let url_ = this.baseUrl + "/api/services/app/Company/GetContacts?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContacts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContacts(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfContactViewDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfContactViewDto>><any>Observable.throw(response_);
        });
    }

    protected processGetContacts(response: Response): Observable<ListResultDtoOfContactViewDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfContactViewDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfContactViewDto.fromJS(resultData200) : new ListResultDtoOfContactViewDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfContactViewDto>(<any>null);
    }

    /**
     * @return Success
     */
    getAllContacts(companyId: number, filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfContactViewDto> {
        let url_ = this.baseUrl + "/api/services/app/Company/GetAllContacts?";
        if (companyId !== undefined)
            url_ += "CompanyId=" + encodeURIComponent("" + companyId) + "&"; 
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllContacts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllContacts(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfContactViewDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfContactViewDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllContacts(response: Response): Observable<PagedResultDtoOfContactViewDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfContactViewDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfContactViewDto.fromJS(resultData200) : new PagedResultDtoOfContactViewDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfContactViewDto>(<any>null);
    }

    /**
     * @return Success
     */
    getContactForInput(id: number): Observable<GetCompanyContact> {
        let url_ = this.baseUrl + "/api/services/app/Company/GetContactForInput?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContactForInput(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContactForInput(response_);
                } catch (e) {
                    return <Observable<GetCompanyContact>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCompanyContact>><any>Observable.throw(response_);
        });
    }

    protected processGetContactForInput(response: Response): Observable<GetCompanyContact> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetCompanyContact = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCompanyContact.fromJS(resultData200) : new GetCompanyContact();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetCompanyContact>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateContact(input: CreateContactInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Company/CreateOrUpdateContact";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateContact(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateContact(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    craeteContact(input: CreateContactInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Company/CraeteContact";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCraeteContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCraeteContact(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCraeteContact(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateContact(input: CreateContactInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Company/UpdateContact";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateContact(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateContact(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteContact(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Company/DeleteContact?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteContact(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteContact(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    companyCreate(input: CompanyCreateInput): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Company/CompanyCreate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCompanyCreate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCompanyCreate(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCompanyCreate(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    newCompanyCreate(input: CompanyCreateInput): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Company/NewCompanyCreate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processNewCompanyCreate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processNewCompanyCreate(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processNewCompanyCreate(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }
}

@Injectable()
export class ContactDesignationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getContactDesignation(filter: string): Observable<ListResultDtoOfContactDesignationInput> {
        let url_ = this.baseUrl + "/api/services/app/ContactDesignation/GetContactDesignation?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContactDesignation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContactDesignation(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfContactDesignationInput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfContactDesignationInput>><any>Observable.throw(response_);
        });
    }

    protected processGetContactDesignation(response: Response): Observable<ListResultDtoOfContactDesignationInput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfContactDesignationInput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfContactDesignationInput.fromJS(resultData200) : new ListResultDtoOfContactDesignationInput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfContactDesignationInput>(<any>null);
    }

    /**
     * @return Success
     */
    getContactDesignationForEdit(id: number): Observable<GetContactDesignation> {
        let url_ = this.baseUrl + "/api/services/app/ContactDesignation/GetContactDesignationForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContactDesignationForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContactDesignationForEdit(response_);
                } catch (e) {
                    return <Observable<GetContactDesignation>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetContactDesignation>><any>Observable.throw(response_);
        });
    }

    protected processGetContactDesignationForEdit(response: Response): Observable<GetContactDesignation> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetContactDesignation = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetContactDesignation.fromJS(resultData200) : new GetContactDesignation();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetContactDesignation>(<any>null);
    }

    /**
     * @return Success
     */
    contactDesignationCreateOrUpdate(input: ContactDesignationInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ContactDesignation/ContactDesignationCreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processContactDesignationCreateOrUpdate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processContactDesignationCreateOrUpdate(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processContactDesignationCreateOrUpdate(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    contactDesignationCreate(input: ContactDesignationInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ContactDesignation/ContactDesignationCreate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processContactDesignationCreate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processContactDesignationCreate(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processContactDesignationCreate(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    contactDesignationUpdate(input: ContactDesignationInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ContactDesignation/ContactDesignationUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processContactDesignationUpdate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processContactDesignationUpdate(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processContactDesignationUpdate(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteContactDesignation(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ContactDesignation/GetDeleteContactDesignation?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteContactDesignation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteContactDesignation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteContactDesignation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getContactDesignationToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/ContactDesignation/GetContactDesignationToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContactDesignationToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContactDesignationToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetContactDesignationToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class CountryServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCountry(filter: string): Observable<ListResultDtoOfCountryListDto> {
        let url_ = this.baseUrl + "/api/services/app/Country/GetCountry?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCountry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCountry(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfCountryListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfCountryListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCountry(response: Response): Observable<ListResultDtoOfCountryListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfCountryListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfCountryListDto.fromJS(resultData200) : new ListResultDtoOfCountryListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfCountryListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getCountryForEdit(id: number): Observable<GetCountry> {
        let url_ = this.baseUrl + "/api/services/app/Country/GetCountryForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCountryForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCountryForEdit(response_);
                } catch (e) {
                    return <Observable<GetCountry>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCountry>><any>Observable.throw(response_);
        });
    }

    protected processGetCountryForEdit(response: Response): Observable<GetCountry> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetCountry = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCountry.fromJS(resultData200) : new GetCountry();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetCountry>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateCountry(input: CountryInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Country/CreateOrUpdateCountry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateCountry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateCountry(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateCountry(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createCountry(input: CountryInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Country/CreateCountry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateCountry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateCountry(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateCountry(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateCountry(input: CountryInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Country/UpdateCountry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateCountry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateCountry(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateCountry(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMappedCountry(id: number): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/Country/GetMappedCountry?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMappedCountry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMappedCountry(response_);
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response_);
        });
    }

    protected processGetMappedCountry(response: Response): Observable<boolean> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<boolean>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteCountry(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Country/GetDeleteCountry?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteCountry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteCountry(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteCountry(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getCountryToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Country/GetCountryToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCountryToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCountryToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCountryToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class DemoUiComponentsServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    sendAndGetDate(date: moment.Moment): Observable<DateToStringOutput> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/SendAndGetDate?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date.toJSON()) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendAndGetDate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendAndGetDate(response_);
                } catch (e) {
                    return <Observable<DateToStringOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<DateToStringOutput>><any>Observable.throw(response_);
        });
    }

    protected processSendAndGetDate(response: Response): Observable<DateToStringOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: DateToStringOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DateToStringOutput.fromJS(resultData200) : new DateToStringOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<DateToStringOutput>(<any>null);
    }

    /**
     * @return Success
     */
    sendAndGetDateTime(date: moment.Moment): Observable<DateToStringOutput> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/SendAndGetDateTime?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date.toJSON()) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendAndGetDateTime(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendAndGetDateTime(response_);
                } catch (e) {
                    return <Observable<DateToStringOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<DateToStringOutput>><any>Observable.throw(response_);
        });
    }

    protected processSendAndGetDateTime(response: Response): Observable<DateToStringOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: DateToStringOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DateToStringOutput.fromJS(resultData200) : new DateToStringOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<DateToStringOutput>(<any>null);
    }

    /**
     * @return Success
     */
    sendAndGetDateRange(startDate: moment.Moment, endDate: moment.Moment): Observable<DateToStringOutput> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/SendAndGetDateRange?";
        if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendAndGetDateRange(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendAndGetDateRange(response_);
                } catch (e) {
                    return <Observable<DateToStringOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<DateToStringOutput>><any>Observable.throw(response_);
        });
    }

    protected processSendAndGetDateRange(response: Response): Observable<DateToStringOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: DateToStringOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DateToStringOutput.fromJS(resultData200) : new DateToStringOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<DateToStringOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getCountries(searchTerm: string): Observable<NameValueOfString[]> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/GetCountries?";
        if (searchTerm !== undefined)
            url_ += "searchTerm=" + encodeURIComponent("" + searchTerm) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCountries(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCountries(response_);
                } catch (e) {
                    return <Observable<NameValueOfString[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<NameValueOfString[]>><any>Observable.throw(response_);
        });
    }

    protected processGetCountries(response: Response): Observable<NameValueOfString[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: NameValueOfString[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(NameValueOfString.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<NameValueOfString[]>(<any>null);
    }

    /**
     * @return Success
     */
    sendAndGetSelectedCountries(selectedCountries: NameValueOfString[]): Observable<NameValueOfString[]> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/SendAndGetSelectedCountries";
        url_ = url_.replace(/[?&]$/, "");

        let contentData_: any = [];
        if (selectedCountries) {
            for (let item of selectedCountries)
                contentData_.push(item.toJSON());
        }
        const content_ = JSON.stringify(selectedCountries ? contentData_ : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendAndGetSelectedCountries(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendAndGetSelectedCountries(response_);
                } catch (e) {
                    return <Observable<NameValueOfString[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<NameValueOfString[]>><any>Observable.throw(response_);
        });
    }

    protected processSendAndGetSelectedCountries(response: Response): Observable<NameValueOfString[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: NameValueOfString[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(NameValueOfString.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<NameValueOfString[]>(<any>null);
    }

    /**
     * @return Success
     */
    sendAndGetValue(input: string): Observable<StringOutput> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/SendAndGetValue?";
        if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendAndGetValue(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendAndGetValue(response_);
                } catch (e) {
                    return <Observable<StringOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<StringOutput>><any>Observable.throw(response_);
        });
    }

    protected processSendAndGetValue(response: Response): Observable<StringOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: StringOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? StringOutput.fromJS(resultData200) : new StringOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<StringOutput>(<any>null);
    }
}

@Injectable()
export class DepartmentServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getDepartment(filter: string): Observable<ListResultDtoOfDepartmentListDto> {
        let url_ = this.baseUrl + "/api/services/app/Department/GetDepartment?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDepartment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDepartment(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfDepartmentListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfDepartmentListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetDepartment(response: Response): Observable<ListResultDtoOfDepartmentListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfDepartmentListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfDepartmentListDto.fromJS(resultData200) : new ListResultDtoOfDepartmentListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfDepartmentListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getDepartmentForEdit(id: number): Observable<GetDepartment> {
        let url_ = this.baseUrl + "/api/services/app/Department/GetDepartmentForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDepartmentForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDepartmentForEdit(response_);
                } catch (e) {
                    return <Observable<GetDepartment>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDepartment>><any>Observable.throw(response_);
        });
    }

    protected processGetDepartmentForEdit(response: Response): Observable<GetDepartment> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetDepartment = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDepartment.fromJS(resultData200) : new GetDepartment();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetDepartment>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateDepartment(input: DepartmentInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Department/CreateOrUpdateDepartment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateDepartment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateDepartment(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateDepartment(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createDepartments(input: DepartmentInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Department/CreateDepartments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateDepartments(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateDepartments(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateDepartments(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateDepartments(input: DepartmentInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Department/UpdateDepartments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateDepartments(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateDepartments(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateDepartments(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteDepartment(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Department/GetDeleteDepartment?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteDepartment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteDepartment(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteDepartment(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMappedDepartment(id: number): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/Department/GetMappedDepartment?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMappedDepartment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMappedDepartment(response_);
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response_);
        });
    }

    protected processGetMappedDepartment(response: Response): Observable<boolean> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<boolean>(<any>null);
    }

    /**
     * @return Success
     */
    getDepartmentToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Department/GetDepartmentToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDepartmentToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDepartmentToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetDepartmentToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class DimensionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getDimension(filter: string): Observable<ListResultDtoOfDimensionListDto> {
        let url_ = this.baseUrl + "/api/services/app/Dimension/GetDimension?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDimension(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDimension(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfDimensionListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfDimensionListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetDimension(response: Response): Observable<ListResultDtoOfDimensionListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfDimensionListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfDimensionListDto.fromJS(resultData200) : new ListResultDtoOfDimensionListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfDimensionListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getDimensionForEdit(id: number): Observable<GetDimension> {
        let url_ = this.baseUrl + "/api/services/app/Dimension/GetDimensionForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDimensionForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDimensionForEdit(response_);
                } catch (e) {
                    return <Observable<GetDimension>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDimension>><any>Observable.throw(response_);
        });
    }

    protected processGetDimensionForEdit(response: Response): Observable<GetDimension> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetDimension = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDimension.fromJS(resultData200) : new GetDimension();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetDimension>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateDimension(input: DimensionInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Dimension/CreateOrUpdateDimension";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateDimension(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateDimension(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateDimension(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createDimension(input: DimensionInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Dimension/CreateDimension";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateDimension(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateDimension(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateDimension(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateDimension(input: DimensionInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Dimension/UpdateDimension";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateDimension(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateDimension(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateDimension(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteDimension(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Dimension/DeleteDimension?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteDimension(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteDimension(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteDimension(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class EditionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getEditions(): Observable<ListResultDtoOfEditionListDto> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditions(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfEditionListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfEditionListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEditions(response: Response): Observable<ListResultDtoOfEditionListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfEditionListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfEditionListDto.fromJS(resultData200) : new ListResultDtoOfEditionListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfEditionListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getEditionForEdit(id: number): Observable<GetEditionEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditionForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditionForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionForEdit(response_);
                } catch (e) {
                    return <Observable<GetEditionEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetEditionEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionForEdit(response: Response): Observable<GetEditionEditOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetEditionEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEditionEditOutput.fromJS(resultData200) : new GetEditionEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetEditionEditOutput>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateEdition(input: CreateOrUpdateEditionDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Edition/CreateOrUpdateEdition";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateEdition(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateEdition(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateEdition(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteEdition(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Edition/DeleteEdition?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteEdition(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteEdition(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteEdition(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getEditionComboboxItems(selectedEditionId: number, addAllItem: boolean, onlyFreeItems: boolean): Observable<SubscribableEditionComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditionComboboxItems?";
        if (selectedEditionId !== undefined)
            url_ += "selectedEditionId=" + encodeURIComponent("" + selectedEditionId) + "&"; 
        if (addAllItem !== undefined)
            url_ += "addAllItem=" + encodeURIComponent("" + addAllItem) + "&"; 
        if (onlyFreeItems !== undefined)
            url_ += "onlyFreeItems=" + encodeURIComponent("" + onlyFreeItems) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditionComboboxItems(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionComboboxItems(response_);
                } catch (e) {
                    return <Observable<SubscribableEditionComboboxItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SubscribableEditionComboboxItemDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionComboboxItems(response: Response): Observable<SubscribableEditionComboboxItemDto[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: SubscribableEditionComboboxItemDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SubscribableEditionComboboxItemDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<SubscribableEditionComboboxItemDto[]>(<any>null);
    }
}

@Injectable()
export class EmaildomainServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getEmaildomain(filter: string): Observable<ListResultDtoOfEmaildomainList> {
        let url_ = this.baseUrl + "/api/services/app/Emaildomain/GetEmaildomain?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEmaildomain(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEmaildomain(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfEmaildomainList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfEmaildomainList>><any>Observable.throw(response_);
        });
    }

    protected processGetEmaildomain(response: Response): Observable<ListResultDtoOfEmaildomainList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfEmaildomainList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfEmaildomainList.fromJS(resultData200) : new ListResultDtoOfEmaildomainList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfEmaildomainList>(<any>null);
    }

    /**
     * @return Success
     */
    getEmaildomainForEdit(id: number): Observable<GetEmaildomain> {
        let url_ = this.baseUrl + "/api/services/app/Emaildomain/GetEmaildomainForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEmaildomainForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEmaildomainForEdit(response_);
                } catch (e) {
                    return <Observable<GetEmaildomain>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetEmaildomain>><any>Observable.throw(response_);
        });
    }

    protected processGetEmaildomainForEdit(response: Response): Observable<GetEmaildomain> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetEmaildomain = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEmaildomain.fromJS(resultData200) : new GetEmaildomain();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetEmaildomain>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateEmaildomain(input: CreateEmaildomainInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Emaildomain/CreateOrUpdateEmaildomain";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateEmaildomain(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateEmaildomain(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateEmaildomain(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createEmaildomainAsync(input: CreateEmaildomainInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Emaildomain/CreateEmaildomainAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateEmaildomainAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateEmaildomainAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateEmaildomainAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateEmaildomainAsync(input: CreateEmaildomainInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Emaildomain/UpdateEmaildomainAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateEmaildomainAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateEmaildomainAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateEmaildomainAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteEmaildomain(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Emaildomain/GetDeleteEmaildomain?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteEmaildomain(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteEmaildomain(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteEmaildomain(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getEmaildomainToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Emaildomain/GetEmaildomainToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEmaildomainToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEmaildomainToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEmaildomainToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class EnquiryContactServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getEnquiryWiseEnquiryContact(id: number): Observable<ListResultDtoOfEnquiryContactListDto> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryContact/GetEnquiryWiseEnquiryContact?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryWiseEnquiryContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryWiseEnquiryContact(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfEnquiryContactListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfEnquiryContactListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryWiseEnquiryContact(response: Response): Observable<ListResultDtoOfEnquiryContactListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfEnquiryContactListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfEnquiryContactListDto.fromJS(resultData200) : new ListResultDtoOfEnquiryContactListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfEnquiryContactListDto>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateEnquiryContact(input: EnquiryContactInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryContact/CreateOrUpdateEnquiryContact";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateEnquiryContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateEnquiryContact(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateEnquiryContact(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createEnquiryContactAsync(input: EnquiryContactInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryContact/CreateEnquiryContactAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateEnquiryContactAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateEnquiryContactAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateEnquiryContactAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateEnquiryContactAsync(input: EnquiryContactInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryContact/UpdateEnquiryContactAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateEnquiryContactAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateEnquiryContactAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateEnquiryContactAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteEnquiryContact(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryContact/GetDeleteEnquiryContact?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteEnquiryContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteEnquiryContact(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteEnquiryContact(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class EnquiryStatusServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getEnquiryStatus(filter: string): Observable<ListResultDtoOfEnquiryStatusListDto> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryStatus/GetEnquiryStatus?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryStatus(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfEnquiryStatusListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfEnquiryStatusListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryStatus(response: Response): Observable<ListResultDtoOfEnquiryStatusListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfEnquiryStatusListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfEnquiryStatusListDto.fromJS(resultData200) : new ListResultDtoOfEnquiryStatusListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfEnquiryStatusListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getEnquiryStatusForEdit(id: number): Observable<GetEnquiryStatus> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryStatus/GetEnquiryStatusForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryStatusForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryStatusForEdit(response_);
                } catch (e) {
                    return <Observable<GetEnquiryStatus>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetEnquiryStatus>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryStatusForEdit(response: Response): Observable<GetEnquiryStatus> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetEnquiryStatus = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEnquiryStatus.fromJS(resultData200) : new GetEnquiryStatus();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetEnquiryStatus>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateEnquiryStatus(input: EnquiryStatusInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryStatus/CreateOrUpdateEnquiryStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateEnquiryStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateEnquiryStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateEnquiryStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createEnquiryStatus(input: EnquiryStatusInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryStatus/CreateEnquiryStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateEnquiryStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateEnquiryStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateEnquiryStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateEnquiryStatus(input: EnquiryStatusInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryStatus/UpdateEnquiryStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateEnquiryStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateEnquiryStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateEnquiryStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteEnquiryStatus(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryStatus/GetDeleteEnquiryStatus?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteEnquiryStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteEnquiryStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteEnquiryStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getEnquiryStatusToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryStatus/GetEnquiryStatusToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryStatusToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryStatusToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryStatusToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class EnquiryUpdateServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    createORupdateInquiry(input: EnquiryUpdateInputDto): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryUpdate/createORupdateInquiry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateORupdateInquiry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateORupdateInquiry(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateORupdateInquiry(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    createActivityDefault(input: EnquiryUpdateInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryUpdate/CreateActivityDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateActivityDefault(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateActivityDefault(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateActivityDefault(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createORupdateInquiryJunk(input: EnquiryJunkUpdateInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryUpdate/createORupdateInquiryJunk";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateORupdateInquiryJunk(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateORupdateInquiryJunk(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateORupdateInquiryJunk(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    reverseJunk(input: EnquiryJunkUpdateInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryUpdate/ReverseJunk";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processReverseJunk(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processReverseJunk(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processReverseJunk(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateEnquiry(input: EnquiryUpdateInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryUpdate/UpdateEnquiry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateEnquiry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateEnquiry(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateEnquiry(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    checkEnquiryStages(input: EnquiryStatusUpdateInput): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryUpdate/CheckEnquiryStages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCheckEnquiryStages(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCheckEnquiryStages(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCheckEnquiryStages(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    enquiryStatusUpdate(input: EnquiryStatusUpdateInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryUpdate/EnquiryStatusUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processEnquiryStatusUpdate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processEnquiryStatusUpdate(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processEnquiryStatusUpdate(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    quotationStatusUpdate(input: QuotationStatusUpdateInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryUpdate/QuotationStatusUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processQuotationStatusUpdate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processQuotationStatusUpdate(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processQuotationStatusUpdate(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    contactUpdate(input: ContactUpdateInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryUpdate/ContactUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processContactUpdate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processContactUpdate(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processContactUpdate(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getUpdateQuotation(enquiryId: number, milestoneId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryUpdate/GetUpdateQuotation?";
        if (enquiryId !== undefined)
            url_ += "EnquiryId=" + encodeURIComponent("" + enquiryId) + "&"; 
        if (milestoneId !== undefined)
            url_ += "MilestoneId=" + encodeURIComponent("" + milestoneId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUpdateQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUpdateQuotation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetUpdateQuotation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateEnquiryClosureDate(input: ClosureUpdateDateInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryUpdate/UpdateEnquiryClosureDate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateEnquiryClosureDate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateEnquiryClosureDate(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateEnquiryClosureDate(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    reverseClosed(input: NullableIdDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryUpdate/ReverseClosed";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processReverseClosed(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processReverseClosed(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processReverseClosed(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    inquiryClosed(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryUpdate/InquiryClosed?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processInquiryClosed(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processInquiryClosed(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processInquiryClosed(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateNegotiationQuotation(input: NullableIdDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EnquiryUpdate/UpdateNegotiationQuotation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateNegotiationQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateNegotiationQuotation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateNegotiationQuotation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class FriendshipServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    createFriendshipRequest(input: CreateFriendshipRequestInput): Observable<FriendDto> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/CreateFriendshipRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateFriendshipRequest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateFriendshipRequest(response_);
                } catch (e) {
                    return <Observable<FriendDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FriendDto>><any>Observable.throw(response_);
        });
    }

    protected processCreateFriendshipRequest(response: Response): Observable<FriendDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FriendDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FriendDto.fromJS(resultData200) : new FriendDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FriendDto>(<any>null);
    }

    /**
     * @return Success
     */
    createFriendshipRequestByUserName(input: CreateFriendshipRequestByUserNameInput): Observable<FriendDto> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/CreateFriendshipRequestByUserName";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateFriendshipRequestByUserName(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateFriendshipRequestByUserName(response_);
                } catch (e) {
                    return <Observable<FriendDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FriendDto>><any>Observable.throw(response_);
        });
    }

    protected processCreateFriendshipRequestByUserName(response: Response): Observable<FriendDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FriendDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FriendDto.fromJS(resultData200) : new FriendDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FriendDto>(<any>null);
    }

    /**
     * @return Success
     */
    blockUser(input: BlockUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/BlockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processBlockUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processBlockUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processBlockUser(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    unblockUser(input: UnblockUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/UnblockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUnblockUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUnblockUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUnblockUser(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    acceptFriendshipRequest(input: AcceptFriendshipRequestInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/AcceptFriendshipRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processAcceptFriendshipRequest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAcceptFriendshipRequest(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processAcceptFriendshipRequest(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class HostDashboardServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getDashboardStatisticsData(incomeStatisticsDateInterval: IncomeStatisticsDateInterval, startDate: moment.Moment, endDate: moment.Moment): Observable<HostDashboardData> {
        let url_ = this.baseUrl + "/api/services/app/HostDashboard/GetDashboardStatisticsData?";
        if (incomeStatisticsDateInterval !== undefined)
            url_ += "IncomeStatisticsDateInterval=" + encodeURIComponent("" + incomeStatisticsDateInterval) + "&"; 
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDashboardStatisticsData(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDashboardStatisticsData(response_);
                } catch (e) {
                    return <Observable<HostDashboardData>><any>Observable.throw(e);
                }
            } else
                return <Observable<HostDashboardData>><any>Observable.throw(response_);
        });
    }

    protected processGetDashboardStatisticsData(response: Response): Observable<HostDashboardData> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: HostDashboardData = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? HostDashboardData.fromJS(resultData200) : new HostDashboardData();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<HostDashboardData>(<any>null);
    }

    /**
     * @return Success
     */
    getIncomeStatistics(incomeStatisticsDateInterval: IncomeStatisticsDateInterval2, startDate: moment.Moment, endDate: moment.Moment): Observable<GetIncomeStatisticsDataOutput> {
        let url_ = this.baseUrl + "/api/services/app/HostDashboard/GetIncomeStatistics?";
        if (incomeStatisticsDateInterval !== undefined)
            url_ += "IncomeStatisticsDateInterval=" + encodeURIComponent("" + incomeStatisticsDateInterval) + "&"; 
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetIncomeStatistics(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetIncomeStatistics(response_);
                } catch (e) {
                    return <Observable<GetIncomeStatisticsDataOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetIncomeStatisticsDataOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetIncomeStatistics(response: Response): Observable<GetIncomeStatisticsDataOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetIncomeStatisticsDataOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetIncomeStatisticsDataOutput.fromJS(resultData200) : new GetIncomeStatisticsDataOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetIncomeStatisticsDataOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getEditionTenantStatistics(startDate: moment.Moment, endDate: moment.Moment): Observable<GetEditionTenantStatisticsOutput> {
        let url_ = this.baseUrl + "/api/services/app/HostDashboard/GetEditionTenantStatistics?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditionTenantStatistics(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionTenantStatistics(response_);
                } catch (e) {
                    return <Observable<GetEditionTenantStatisticsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetEditionTenantStatisticsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionTenantStatistics(response: Response): Observable<GetEditionTenantStatisticsOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetEditionTenantStatisticsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEditionTenantStatisticsOutput.fromJS(resultData200) : new GetEditionTenantStatisticsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetEditionTenantStatisticsOutput>(<any>null);
    }
}

@Injectable()
export class HostSettingsServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllSettings(): Observable<HostSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/GetAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllSettings(response_);
                } catch (e) {
                    return <Observable<HostSettingsEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<HostSettingsEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllSettings(response: Response): Observable<HostSettingsEditDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: HostSettingsEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? HostSettingsEditDto.fromJS(resultData200) : new HostSettingsEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<HostSettingsEditDto>(<any>null);
    }

    /**
     * @return Success
     */
    updateAllSettings(input: HostSettingsEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/UpdateAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateAllSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateAllSettings(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateAllSettings(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    sendTestEmail(input: SendTestEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendTestEmail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendTestEmail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendTestEmail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class IndustryServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getIndustry(filter: string): Observable<ListResultDtoOfIndustryListDto> {
        let url_ = this.baseUrl + "/api/services/app/Industry/GetIndustry?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetIndustry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetIndustry(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfIndustryListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfIndustryListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetIndustry(response: Response): Observable<ListResultDtoOfIndustryListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfIndustryListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfIndustryListDto.fromJS(resultData200) : new ListResultDtoOfIndustryListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfIndustryListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getIndustryForEdit(id: number): Observable<GetIndustry> {
        let url_ = this.baseUrl + "/api/services/app/Industry/GetIndustryForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetIndustryForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetIndustryForEdit(response_);
                } catch (e) {
                    return <Observable<GetIndustry>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetIndustry>><any>Observable.throw(response_);
        });
    }

    protected processGetIndustryForEdit(response: Response): Observable<GetIndustry> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetIndustry = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetIndustry.fromJS(resultData200) : new GetIndustry();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetIndustry>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateIndustry(input: IndustryInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Industry/CreateOrUpdateIndustry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateIndustry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateIndustry(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateIndustry(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createIndustry(input: IndustryInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Industry/CreateIndustry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateIndustry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateIndustry(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateIndustry(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateIndustry(input: IndustryInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Industry/UpdateIndustry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateIndustry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateIndustry(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateIndustry(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createNewIndustry(input: IndustryInputDto): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Industry/CreateNewIndustry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateNewIndustry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateNewIndustry(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateNewIndustry(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteIndustry(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Industry/GetDeleteIndustry?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteIndustry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteIndustry(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteIndustry(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getIndustryToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Industry/GetIndustryToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetIndustryToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetIndustryToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetIndustryToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class InquiryServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getInquiry(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfInquiryListDto> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetInquiry?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetInquiry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetInquiry(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfInquiryListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfInquiryListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetInquiry(response: Response): Observable<PagedResultDtoOfInquiryListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfInquiryListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfInquiryListDto.fromJS(resultData200) : new PagedResultDtoOfInquiryListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfInquiryListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getJunkInquiry2(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfInquiryListDto> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetJunkInquiry2?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetJunkInquiry2(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetJunkInquiry2(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfInquiryListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfInquiryListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetJunkInquiry2(response: Response): Observable<PagedResultDtoOfInquiryListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfInquiryListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfInquiryListDto.fromJS(resultData200) : new PagedResultDtoOfInquiryListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfInquiryListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesInquiry(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfInquiryListDto> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetSalesInquiry?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesInquiry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesInquiry(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfInquiryListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfInquiryListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesInquiry(response: Response): Observable<PagedResultDtoOfInquiryListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfInquiryListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfInquiryListDto.fromJS(resultData200) : new PagedResultDtoOfInquiryListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfInquiryListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesInquiryReport(id: number, filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfInquiryListDto> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetSalesInquiryReport?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesInquiryReport(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesInquiryReport(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfInquiryListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfInquiryListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesInquiryReport(response: Response): Observable<PagedResultDtoOfInquiryListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfInquiryListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfInquiryListDto.fromJS(resultData200) : new PagedResultDtoOfInquiryListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfInquiryListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getLeadInquiry(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfInquiryListDto> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetLeadInquiry?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLeadInquiry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLeadInquiry(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfInquiryListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfInquiryListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLeadInquiry(response: Response): Observable<PagedResultDtoOfInquiryListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfInquiryListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfInquiryListDto.fromJS(resultData200) : new PagedResultDtoOfInquiryListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfInquiryListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getInquiryForEdit(id: number): Observable<GetInquirys> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetInquiryForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetInquiryForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetInquiryForEdit(response_);
                } catch (e) {
                    return <Observable<GetInquirys>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetInquirys>><any>Observable.throw(response_);
        });
    }

    protected processGetInquiryForEdit(response: Response): Observable<GetInquirys> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetInquirys = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetInquirys.fromJS(resultData200) : new GetInquirys();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetInquirys>(<any>null);
    }

    /**
     * @return Success
     */
    getNewContactForEdit(id: number): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetNewContactForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNewContactForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNewContactForEdit(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetNewContactForEdit(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateInquiry(input: InquiryInputDto): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/CreateOrUpdateInquiry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateInquiry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateInquiry(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateInquiry(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    createInquiryAsync(input: InquiryInputDto): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/CreateInquiryAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateInquiryAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateInquiryAsync(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateInquiryAsync(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    createSalesInquiry(input: InquiryInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/CreateSalesInquiry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateSalesInquiry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateSalesInquiry(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateSalesInquiry(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createSalesInquiryInformation(input: InquiryInputDto): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/CreateSalesInquiryInformation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateSalesInquiryInformation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateSalesInquiryInformation(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateSalesInquiryInformation(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    linkCopanyCreate(input: LinkedCompanyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/linkCopanyCreate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processLinkCopanyCreate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLinkCopanyCreate(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processLinkCopanyCreate(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    linkCopanyUpdate(input: LinkedCompanyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/linkCopanyUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processLinkCopanyUpdate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLinkCopanyUpdate(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processLinkCopanyUpdate(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateInquiryAsync(input: InquiryInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/UpdateInquiryAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateInquiryAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateInquiryAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateInquiryAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateLeadDetails(input: LeadDetailInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/CreateOrUpdateLeadDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateLeadDetails(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateLeadDetails(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateLeadDetails(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createInquiryDetailAsync(input: LeadDetailInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/CreateInquiryDetailAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateInquiryDetailAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateInquiryDetailAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateInquiryDetailAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateInquiryDetailAsync(input: LeadDetailInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/UpdateInquiryDetailAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateInquiryDetailAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateInquiryDetailAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateInquiryDetailAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getInquiryTickets(filter: string, salesId: number): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetInquiryTickets?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (salesId !== undefined)
            url_ += "SalesId=" + encodeURIComponent("" + salesId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetInquiryTickets(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetInquiryTickets(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetInquiryTickets(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesInquiryTickets(filter: string, salesId: number): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetSalesInquiryTickets?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (salesId !== undefined)
            url_ += "SalesId=" + encodeURIComponent("" + salesId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesInquiryTickets(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesInquiryTickets(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesInquiryTickets(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesQuotations(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfQuotationListDto> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetSalesQuotations?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesQuotations(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesQuotations(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfQuotationListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfQuotationListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesQuotations(response: Response): Observable<PagedResultDtoOfQuotationListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfQuotationListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfQuotationListDto.fromJS(resultData200) : new PagedResultDtoOfQuotationListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfQuotationListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getOverAllEnquiryActivitys(filter: string): Observable<ListResultDtoOfEnqActList> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetOverAllEnquiryActivitys?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOverAllEnquiryActivitys(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOverAllEnquiryActivitys(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfEnqActList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfEnqActList>><any>Observable.throw(response_);
        });
    }

    protected processGetOverAllEnquiryActivitys(response: Response): Observable<ListResultDtoOfEnqActList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfEnqActList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfEnqActList.fromJS(resultData200) : new ListResultDtoOfEnqActList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfEnqActList>(<any>null);
    }

    /**
     * @return Success
     */
    getEnquiryActivitys(filter: string, enqId: number): Observable<ListResultDtoOfEnqActList> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetEnquiryActivitys?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (enqId !== undefined)
            url_ += "EnqId=" + encodeURIComponent("" + enqId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryActivitys(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryActivitys(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfEnqActList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfEnqActList>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryActivitys(response: Response): Observable<ListResultDtoOfEnqActList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfEnqActList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfEnqActList.fromJS(resultData200) : new ListResultDtoOfEnqActList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfEnqActList>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateEnquiryActivitys(input: EnqActCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/CreateOrUpdateEnquiryActivitys";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateEnquiryActivitys(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateEnquiryActivitys(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateEnquiryActivitys(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createEnquiryActivitysAsync(input: EnqActCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/CreateEnquiryActivitysAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateEnquiryActivitysAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateEnquiryActivitysAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateEnquiryActivitysAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateEnquiryActivitysAsync(input: EnqActCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/UpdateEnquiryActivitysAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateEnquiryActivitysAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateEnquiryActivitysAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateEnquiryActivitysAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteEnquiryActivity(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetDeleteEnquiryActivity?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteEnquiryActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteEnquiryActivity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteEnquiryActivity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getEnqActComment(filter: string, actId: number): Observable<ListResultDtoOfEnqActCommentList> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetEnqActComment?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (actId !== undefined)
            url_ += "ActId=" + encodeURIComponent("" + actId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnqActComment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnqActComment(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfEnqActCommentList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfEnqActCommentList>><any>Observable.throw(response_);
        });
    }

    protected processGetEnqActComment(response: Response): Observable<ListResultDtoOfEnqActCommentList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfEnqActCommentList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfEnqActCommentList.fromJS(resultData200) : new ListResultDtoOfEnqActCommentList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfEnqActCommentList>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateEnquiryActivitysComment(input: EnqActCommentCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/CreateOrUpdateEnquiryActivitysComment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateEnquiryActivitysComment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateEnquiryActivitysComment(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateEnquiryActivitysComment(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createEnquiryActivitysCommentAsync(input: EnqActCommentCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/CreateEnquiryActivitysCommentAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateEnquiryActivitysCommentAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateEnquiryActivitysCommentAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateEnquiryActivitysCommentAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateEnquiryActivitysCommentAsync(input: EnqActCommentCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/UpdateEnquiryActivitysCommentAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateEnquiryActivitysCommentAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateEnquiryActivitysCommentAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateEnquiryActivitysCommentAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getActivityForEdit(id: number): Observable<GetEActivity> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetActivityForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetActivityForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetActivityForEdit(response_);
                } catch (e) {
                    return <Observable<GetEActivity>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetEActivity>><any>Observable.throw(response_);
        });
    }

    protected processGetActivityForEdit(response: Response): Observable<GetEActivity> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetEActivity = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEActivity.fromJS(resultData200) : new GetEActivity();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetEActivity>(<any>null);
    }

    /**
     * @return Success
     */
    newLocationCreate(input: LocationInputDto): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/NewLocationCreate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processNewLocationCreate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processNewLocationCreate(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processNewLocationCreate(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    newDesignationCreate(input: DesignationInputDto): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/NewDesignationCreate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processNewDesignationCreate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processNewDesignationCreate(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processNewDesignationCreate(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    newCompanyCreate(input: CompanyCreateInput): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/NewCompanyCreate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processNewCompanyCreate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processNewCompanyCreate(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processNewCompanyCreate(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteInquiry(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetDeleteInquiry?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteInquiry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteInquiry(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteInquiry(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanyUpdate(enquiryId: number, companyId: number, designationId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetCompanyUpdate?";
        if (enquiryId !== undefined)
            url_ += "EnquiryId=" + encodeURIComponent("" + enquiryId) + "&"; 
        if (companyId !== undefined)
            url_ += "CompanyId=" + encodeURIComponent("" + companyId) + "&"; 
        if (designationId !== undefined)
            url_ += "DesignationId=" + encodeURIComponent("" + designationId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanyUpdate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanyUpdate(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanyUpdate(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getGeneralInquiryToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetGeneralInquiryToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetGeneralInquiryToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetGeneralInquiryToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetGeneralInquiryToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesInquiryToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetSalesInquiryToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesInquiryToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesInquiryToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesInquiryToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getLeadInquiryToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetLeadInquiryToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLeadInquiryToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLeadInquiryToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLeadInquiryToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getEnquiryQuotations(filter: string, inquiryId: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfQuotationListDto> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetEnquiryQuotations?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (inquiryId !== undefined)
            url_ += "InquiryId=" + encodeURIComponent("" + inquiryId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryQuotations(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryQuotations(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfQuotationListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfQuotationListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryQuotations(response: Response): Observable<PagedResultDtoOfQuotationListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfQuotationListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfQuotationListDto.fromJS(resultData200) : new PagedResultDtoOfQuotationListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfQuotationListDto>(<any>null);
    }

    /**
     * @return Success
     */
    checkInquiryDuplicate(input: CheckInquiryInput): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/CheckInquiryDuplicate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCheckInquiryDuplicate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCheckInquiryDuplicate(response_);
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response_);
        });
    }

    protected processCheckInquiryDuplicate(response: Response): Observable<boolean> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<boolean>(<any>null);
    }

    /**
     * @return Success
     */
    createInquiryContactInfo(input: NullableIdDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/CreateInquiryContactInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateInquiryContactInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateInquiryContactInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateInquiryContactInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createInquiryCompanyInfo(input: NullableIdDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/CreateInquiryCompanyInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateInquiryCompanyInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateInquiryCompanyInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateInquiryCompanyInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getJobActivity(id: number): Observable<ListResultDtoOfJobActivityList> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetJobActivity?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetJobActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetJobActivity(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfJobActivityList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfJobActivityList>><any>Observable.throw(response_);
        });
    }

    protected processGetJobActivity(response: Response): Observable<ListResultDtoOfJobActivityList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfJobActivityList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfJobActivityList.fromJS(resultData200) : new ListResultDtoOfJobActivityList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfJobActivityList>(<any>null);
    }

    /**
     * @return Success
     */
    getJobActivityForEdit(id: number): Observable<GetJobActivity> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetJobActivityForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetJobActivityForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetJobActivityForEdit(response_);
                } catch (e) {
                    return <Observable<GetJobActivity>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetJobActivity>><any>Observable.throw(response_);
        });
    }

    protected processGetJobActivityForEdit(response: Response): Observable<GetJobActivity> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetJobActivity = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetJobActivity.fromJS(resultData200) : new GetJobActivity();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetJobActivity>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateJobActivity(input: CreateJobActivityInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/CreateOrUpdateJobActivity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateJobActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateJobActivity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateJobActivity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createJobActivityAsync(input: CreateJobActivityInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/CreateJobActivityAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateJobActivityAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateJobActivityAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateJobActivityAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateJobActivityAsync(input: CreateJobActivityInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/UpdateJobActivityAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateJobActivityAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateJobActivityAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateJobActivityAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteJobActivity(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetDeleteJobActivity?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteJobActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteJobActivity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteJobActivity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getClosureDateInquiryTickets(filter: string, closureDate: string): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetClosureDateInquiryTickets?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (closureDate !== undefined)
            url_ += "ClosureDate=" + encodeURIComponent("" + closureDate) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetClosureDateInquiryTickets(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetClosureDateInquiryTickets(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetClosureDateInquiryTickets(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getOverallJobActivity(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfJobActivityList> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetOverallJobActivity?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOverallJobActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOverallJobActivity(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfJobActivityList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfJobActivityList>><any>Observable.throw(response_);
        });
    }

    protected processGetOverallJobActivity(response: Response): Observable<PagedResultDtoOfJobActivityList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfJobActivityList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfJobActivityList.fromJS(resultData200) : new PagedResultDtoOfJobActivityList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfJobActivityList>(<any>null);
    }

    /**
     * @return Success
     */
    updateSalesmanAll(input: SalesmanChange): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/UpdateSalesmanAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateSalesmanAll(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateSalesmanAll(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateSalesmanAll(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getClosedInquiry(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfInquiryListDto> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetClosedInquiry?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetClosedInquiry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetClosedInquiry(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfInquiryListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfInquiryListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetClosedInquiry(response: Response): Observable<PagedResultDtoOfInquiryListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfInquiryListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfInquiryListDto.fromJS(resultData200) : new PagedResultDtoOfInquiryListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfInquiryListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getJunkInquiry(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfInquiryListDto> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetJunkInquiry?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetJunkInquiry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetJunkInquiry(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfInquiryListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfInquiryListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetJunkInquiry(response: Response): Observable<PagedResultDtoOfInquiryListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfInquiryListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfInquiryListDto.fromJS(resultData200) : new PagedResultDtoOfInquiryListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfInquiryListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getClosedInquiryToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetClosedInquiryToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetClosedInquiryToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetClosedInquiryToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetClosedInquiryToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesQuotationsToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetSalesQuotationsToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesQuotationsToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesQuotationsToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesQuotationsToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesReportGenerator(id: number, filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfInquiryListDto> {
        let url_ = this.baseUrl + "/api/services/app/Inquiry/GetSalesReportGenerator?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesReportGenerator(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesReportGenerator(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfInquiryListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfInquiryListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesReportGenerator(response: Response): Observable<PagedResultDtoOfInquiryListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfInquiryListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfInquiryListDto.fromJS(resultData200) : new PagedResultDtoOfInquiryListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfInquiryListDto>(<any>null);
    }
}

@Injectable()
export class LanguageServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getLanguages(): Observable<GetLanguagesOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLanguages(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLanguages(response_);
                } catch (e) {
                    return <Observable<GetLanguagesOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLanguagesOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetLanguages(response: Response): Observable<GetLanguagesOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetLanguagesOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLanguagesOutput.fromJS(resultData200) : new GetLanguagesOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetLanguagesOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getLanguageForEdit(id: number): Observable<GetLanguageForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLanguageForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLanguageForEdit(response_);
                } catch (e) {
                    return <Observable<GetLanguageForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLanguageForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetLanguageForEdit(response: Response): Observable<GetLanguageForEditOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetLanguageForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLanguageForEditOutput.fromJS(resultData200) : new GetLanguageForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetLanguageForEditOutput>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateLanguage(input: CreateOrUpdateLanguageInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/CreateOrUpdateLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateLanguage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateLanguage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateLanguage(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteLanguage(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/DeleteLanguage?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteLanguage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteLanguage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteLanguage(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    setDefaultLanguage(input: SetDefaultLanguageInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/SetDefaultLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSetDefaultLanguage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSetDefaultLanguage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSetDefaultLanguage(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getLanguageTexts(maxResultCount: number, skipCount: number, sorting: string, sourceName: string, baseLanguageName: string, targetLanguageName: string, targetValueFilter: string, filterText: string): Observable<PagedResultDtoOfLanguageTextListDto> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageTexts?";
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (sourceName !== undefined)
            url_ += "SourceName=" + encodeURIComponent("" + sourceName) + "&"; 
        if (baseLanguageName !== undefined)
            url_ += "BaseLanguageName=" + encodeURIComponent("" + baseLanguageName) + "&"; 
        if (targetLanguageName !== undefined)
            url_ += "TargetLanguageName=" + encodeURIComponent("" + targetLanguageName) + "&"; 
        if (targetValueFilter !== undefined)
            url_ += "TargetValueFilter=" + encodeURIComponent("" + targetValueFilter) + "&"; 
        if (filterText !== undefined)
            url_ += "FilterText=" + encodeURIComponent("" + filterText) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLanguageTexts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLanguageTexts(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfLanguageTextListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfLanguageTextListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLanguageTexts(response: Response): Observable<PagedResultDtoOfLanguageTextListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfLanguageTextListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfLanguageTextListDto.fromJS(resultData200) : new PagedResultDtoOfLanguageTextListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfLanguageTextListDto>(<any>null);
    }

    /**
     * @return Success
     */
    updateLanguageText(input: UpdateLanguageTextInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/UpdateLanguageText";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateLanguageText(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateLanguageText(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateLanguageText(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class LeadReasonServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getLeadReason(filter: string): Observable<ListResultDtoOfLeadReasonList> {
        let url_ = this.baseUrl + "/api/services/app/LeadReason/GetLeadReason?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLeadReason(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLeadReason(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfLeadReasonList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfLeadReasonList>><any>Observable.throw(response_);
        });
    }

    protected processGetLeadReason(response: Response): Observable<ListResultDtoOfLeadReasonList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfLeadReasonList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfLeadReasonList.fromJS(resultData200) : new ListResultDtoOfLeadReasonList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfLeadReasonList>(<any>null);
    }

    /**
     * @return Success
     */
    getLeadReasonForEdit(id: number): Observable<GetLeadReason> {
        let url_ = this.baseUrl + "/api/services/app/LeadReason/GetLeadReasonForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLeadReasonForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLeadReasonForEdit(response_);
                } catch (e) {
                    return <Observable<GetLeadReason>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLeadReason>><any>Observable.throw(response_);
        });
    }

    protected processGetLeadReasonForEdit(response: Response): Observable<GetLeadReason> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetLeadReason = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLeadReason.fromJS(resultData200) : new GetLeadReason();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetLeadReason>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateLeadReason(input: CreateLeadReasonInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/LeadReason/CreateOrUpdateLeadReason";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateLeadReason(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateLeadReason(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateLeadReason(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createLeadReason(input: CreateLeadReasonInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/LeadReason/CreateLeadReason";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateLeadReason(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateLeadReason(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateLeadReason(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateLeadReason(input: CreateLeadReasonInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/LeadReason/UpdateLeadReason";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateLeadReason(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateLeadReason(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateLeadReason(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteLeadReason(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/LeadReason/DeleteLeadReason?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteLeadReason(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteLeadReason(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteLeadReason(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getLeadReasonToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/LeadReason/GetLeadReasonToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLeadReasonToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLeadReasonToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLeadReasonToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class LeadStatusServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getLeadStatus(filter: string): Observable<ListResultDtoOfLeadStatusList> {
        let url_ = this.baseUrl + "/api/services/app/LeadStatus/GetLeadStatus?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLeadStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLeadStatus(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfLeadStatusList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfLeadStatusList>><any>Observable.throw(response_);
        });
    }

    protected processGetLeadStatus(response: Response): Observable<ListResultDtoOfLeadStatusList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfLeadStatusList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfLeadStatusList.fromJS(resultData200) : new ListResultDtoOfLeadStatusList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfLeadStatusList>(<any>null);
    }

    /**
     * @return Success
     */
    getLeadStatusForEdit(id: number): Observable<GetLeadStatus> {
        let url_ = this.baseUrl + "/api/services/app/LeadStatus/GetLeadStatusForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLeadStatusForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLeadStatusForEdit(response_);
                } catch (e) {
                    return <Observable<GetLeadStatus>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLeadStatus>><any>Observable.throw(response_);
        });
    }

    protected processGetLeadStatusForEdit(response: Response): Observable<GetLeadStatus> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetLeadStatus = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLeadStatus.fromJS(resultData200) : new GetLeadStatus();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetLeadStatus>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateLeadStatus(input: CreateLeadStatusInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/LeadStatus/CreateOrUpdateLeadStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateLeadStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateLeadStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateLeadStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createLeadStatus(input: CreateLeadStatusInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/LeadStatus/CreateLeadStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateLeadStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateLeadStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateLeadStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateLeadStatus(input: CreateLeadStatusInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/LeadStatus/UpdateLeadStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateLeadStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateLeadStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateLeadStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteLeadStatus(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/LeadStatus/DeleteLeadStatus?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteLeadStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteLeadStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteLeadStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class LeadTypeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getLeadType(filter: string): Observable<ListResultDtoOfLeadTypeList> {
        let url_ = this.baseUrl + "/api/services/app/LeadType/GetLeadType?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLeadType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLeadType(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfLeadTypeList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfLeadTypeList>><any>Observable.throw(response_);
        });
    }

    protected processGetLeadType(response: Response): Observable<ListResultDtoOfLeadTypeList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfLeadTypeList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfLeadTypeList.fromJS(resultData200) : new ListResultDtoOfLeadTypeList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfLeadTypeList>(<any>null);
    }

    /**
     * @return Success
     */
    getLeadTypeForEdit(id: number): Observable<GetLeadType> {
        let url_ = this.baseUrl + "/api/services/app/LeadType/GetLeadTypeForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLeadTypeForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLeadTypeForEdit(response_);
                } catch (e) {
                    return <Observable<GetLeadType>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLeadType>><any>Observable.throw(response_);
        });
    }

    protected processGetLeadTypeForEdit(response: Response): Observable<GetLeadType> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetLeadType = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLeadType.fromJS(resultData200) : new GetLeadType();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetLeadType>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateLeadType(input: CreateLeadTypeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/LeadType/CreateOrUpdateLeadType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateLeadType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateLeadType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateLeadType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createLeadType(input: CreateLeadTypeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/LeadType/CreateLeadType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateLeadType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateLeadType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateLeadType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateLeadType(input: CreateLeadTypeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/LeadType/UpdateLeadType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateLeadType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateLeadType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateLeadType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteLeadType(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/LeadType/GetDeleteLeadType?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteLeadType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteLeadType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteLeadType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getLeadTypeToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/LeadType/GetLeadTypeToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLeadTypeToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLeadTypeToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLeadTypeToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class LineTypeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getLineTypes(filter: string): Observable<ListResultDtoOfLineTypeListDto> {
        let url_ = this.baseUrl + "/api/services/app/LineType/GetLineTypes?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLineTypes(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLineTypes(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfLineTypeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfLineTypeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLineTypes(response: Response): Observable<ListResultDtoOfLineTypeListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfLineTypeListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfLineTypeListDto.fromJS(resultData200) : new ListResultDtoOfLineTypeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfLineTypeListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getLineTypeForEdit(id: number): Observable<GetLineType> {
        let url_ = this.baseUrl + "/api/services/app/LineType/GetLineTypeForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLineTypeForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLineTypeForEdit(response_);
                } catch (e) {
                    return <Observable<GetLineType>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLineType>><any>Observable.throw(response_);
        });
    }

    protected processGetLineTypeForEdit(response: Response): Observable<GetLineType> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetLineType = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLineType.fromJS(resultData200) : new GetLineType();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetLineType>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateLineType(input: LineTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/LineType/CreateOrUpdateLineType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateLineType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateLineType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateLineType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createLineType(input: LineTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/LineType/CreateLineType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateLineType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateLineType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateLineType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateLineType(input: LineTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/LineType/UpdateLineType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateLineType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateLineType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateLineType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteLineType(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/LineType/DeleteLineType?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteLineType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteLineType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteLineType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class LocationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getLocation(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfLocationListDto> {
        let url_ = this.baseUrl + "/api/services/app/Location/GetLocation?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLocation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLocation(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfLocationListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfLocationListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLocation(response: Response): Observable<PagedResultDtoOfLocationListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfLocationListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfLocationListDto.fromJS(resultData200) : new PagedResultDtoOfLocationListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfLocationListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getlocationForEdit(id: number): Observable<GetLocation> {
        let url_ = this.baseUrl + "/api/services/app/Location/GetlocationForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetlocationForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetlocationForEdit(response_);
                } catch (e) {
                    return <Observable<GetLocation>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLocation>><any>Observable.throw(response_);
        });
    }

    protected processGetlocationForEdit(response: Response): Observable<GetLocation> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetLocation = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLocation.fromJS(resultData200) : new GetLocation();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetLocation>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateLocation(input: LocationInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Location/CreateOrUpdateLocation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateLocation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateLocation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateLocation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createLocationAsync(input: LocationInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Location/CreateLocationAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateLocationAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateLocationAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateLocationAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateLocationAsync(input: LocationInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Location/UpdateLocationAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateLocationAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateLocationAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateLocationAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteLocation(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Location/GetDeleteLocation?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteLocation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteLocation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteLocation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getLocationToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Location/GetLocationToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLocationToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLocationToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLocationToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class MileStoneServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getMileStone(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfMileStoneList> {
        let url_ = this.baseUrl + "/api/services/app/MileStone/GetMileStone?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMileStone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMileStone(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMileStoneList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfMileStoneList>><any>Observable.throw(response_);
        });
    }

    protected processGetMileStone(response: Response): Observable<PagedResultDtoOfMileStoneList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfMileStoneList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfMileStoneList.fromJS(resultData200) : new PagedResultDtoOfMileStoneList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfMileStoneList>(<any>null);
    }

    /**
     * @return Success
     */
    getMileStoneForEdit(id: number): Observable<GetMileStone> {
        let url_ = this.baseUrl + "/api/services/app/MileStone/GetMileStoneForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMileStoneForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMileStoneForEdit(response_);
                } catch (e) {
                    return <Observable<GetMileStone>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMileStone>><any>Observable.throw(response_);
        });
    }

    protected processGetMileStoneForEdit(response: Response): Observable<GetMileStone> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetMileStone = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetMileStone.fromJS(resultData200) : new GetMileStone();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetMileStone>(<any>null);
    }

    /**
     * @return Success
     */
    createMileStoneStage(input: MileStoneDetailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MileStone/CreateMileStoneStage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateMileStoneStage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMileStoneStage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMileStoneStage(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteMileStoneDetail(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MileStone/GetDeleteMileStoneDetail?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteMileStoneDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteMileStoneDetail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteMileStoneDetail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateMileStone(input: CreateMileStoneInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MileStone/CreateOrUpdateMileStone";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateMileStone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateMileStone(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateMileStone(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createMileStoneAsync(input: CreateMileStoneInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MileStone/CreateMileStoneAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateMileStoneAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMileStoneAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMileStoneAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateMileStoneAsync(input: CreateMileStoneInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MileStone/UpdateMileStoneAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateMileStoneAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMileStoneAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMileStoneAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteMileStone(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MileStone/GetDeleteMileStone?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteMileStone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteMileStone(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteMileStone(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMileStoneToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/MileStone/GetMileStoneToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMileStoneToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMileStoneToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMileStoneToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class NewCompanyContactServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getNewCompanyForEdit(id: number): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/GetNewCompanyForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNewCompanyForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNewCompanyForEdit(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetNewCompanyForEdit(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getNewContactForEdit(id: number): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/GetNewContactForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNewContactForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNewContactForEdit(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetNewContactForEdit(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanys(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfNewCompanyListDto> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/GetCompanys?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanys(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanys(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNewCompanyListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNewCompanyListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanys(response: Response): Observable<PagedResultDtoOfNewCompanyListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfNewCompanyListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNewCompanyListDto.fromJS(resultData200) : new PagedResultDtoOfNewCompanyListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfNewCompanyListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getContacts(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfNewContactListDto> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/GetContacts?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContacts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContacts(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNewContactListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNewContactListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetContacts(response: Response): Observable<PagedResultDtoOfNewContactListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfNewContactListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNewContactListDto.fromJS(resultData200) : new PagedResultDtoOfNewContactListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfNewContactListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanyContacts(id: number): Observable<ListResultDtoOfNewContactListDto> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/GetCompanyContacts?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanyContacts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanyContacts(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfNewContactListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfNewContactListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanyContacts(response: Response): Observable<ListResultDtoOfNewContactListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfNewContactListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfNewContactListDto.fromJS(resultData200) : new ListResultDtoOfNewContactListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfNewContactListDto>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateCompanyOrContact(input: CreateCompanyOrContact): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/CreateOrUpdateCompanyOrContact";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateCompanyOrContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateCompanyOrContact(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateCompanyOrContact(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    createCompany(input: CreateCompanyOrContact): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/CreateCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateCompany(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateCompany(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    updateCompany(input: CreateCompanyOrContact): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/UpdateCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateCompany(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processUpdateCompany(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    createContact(input: CreateCompanyOrContact): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/CreateContact";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateContact(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateContact(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    updateContact(input: CreateCompanyOrContact): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/UpdateContact";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateContact(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processUpdateContact(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    contactUpdate(input: CreateCompanyOrContact): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/ContactUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processContactUpdate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processContactUpdate(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processContactUpdate(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateAddressInfo(input: CreateAddressInfo): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/CreateOrUpdateAddressInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateAddressInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateAddressInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateAddressInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createAddressInfo(input: CreateAddressInfo): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/CreateAddressInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateAddressInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateAddressInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateAddressInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateAddressInfo(input: CreateAddressInfo): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/UpdateAddressInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateAddressInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateAddressInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateAddressInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateContactInfo(input: CreateContactInfo): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/CreateOrUpdateContactInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateContactInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateContactInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateContactInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createContactInfo(input: CreateContactInfo): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/CreateContactInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateContactInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateContactInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateContactInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateContactInfo(input: CreateContactInfo): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/UpdateContactInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateContactInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateContactInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateContactInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getNewAddressInfoForEdit(id: number): Observable<GetNewAddressInfo> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/GetNewAddressInfoForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNewAddressInfoForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNewAddressInfoForEdit(response_);
                } catch (e) {
                    return <Observable<GetNewAddressInfo>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNewAddressInfo>><any>Observable.throw(response_);
        });
    }

    protected processGetNewAddressInfoForEdit(response: Response): Observable<GetNewAddressInfo> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetNewAddressInfo = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNewAddressInfo.fromJS(resultData200) : new GetNewAddressInfo();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetNewAddressInfo>(<any>null);
    }

    /**
     * @return Success
     */
    getNewContactInfoForEdit(id: number): Observable<GetNewContactInfo> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/GetNewContactInfoForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNewContactInfoForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNewContactInfoForEdit(response_);
                } catch (e) {
                    return <Observable<GetNewContactInfo>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNewContactInfo>><any>Observable.throw(response_);
        });
    }

    protected processGetNewContactInfoForEdit(response: Response): Observable<GetNewContactInfo> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetNewContactInfo = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNewContactInfo.fromJS(resultData200) : new GetNewContactInfo();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetNewContactInfo>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteAddressInfo(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/GetDeleteAddressInfo?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteAddressInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteAddressInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteAddressInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteContactInfo(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/GetDeleteContactInfo?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteContactInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteContactInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteContactInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteEnquiryContact(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/GetDeleteEnquiryContact?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteEnquiryContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteEnquiryContact(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteEnquiryContact(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteCompany(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/GetDeleteCompany?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteCompany(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteCompany(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteContact(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/GetDeleteContact?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteContact(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteContact(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    checkDuplicateCompany(input: CompanyInputDto): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/CheckDuplicateCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCheckDuplicateCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCheckDuplicateCompany(response_);
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response_);
        });
    }

    protected processCheckDuplicateCompany(response: Response): Observable<boolean> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<boolean>(<any>null);
    }

    /**
     * @return Success
     */
    checkDuplicateContact(input: ContactInputDto): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/CheckDuplicateContact";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCheckDuplicateContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCheckDuplicateContact(response_);
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response_);
        });
    }

    protected processCheckDuplicateContact(response: Response): Observable<boolean> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<boolean>(<any>null);
    }

    /**
     * @return Success
     */
    approvedCompany(input: EntityDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/ApprovedCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processApprovedCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processApprovedCompany(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processApprovedCompany(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    searchContactInfo(input: EnquiryContactInput): Observable<GetNewContacts> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/SearchContactInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSearchContactInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSearchContactInfo(response_);
                } catch (e) {
                    return <Observable<GetNewContacts>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNewContacts>><any>Observable.throw(response_);
        });
    }

    protected processSearchContactInfo(response: Response): Observable<GetNewContacts> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetNewContacts = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNewContacts.fromJS(resultData200) : new GetNewContacts();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetNewContacts>(<any>null);
    }

    /**
     * @return Success
     */
    searchContactInfoId(input: EnquiryContactInput): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/NewCompanyContact/SearchContactInfoId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSearchContactInfoId(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSearchContactInfoId(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processSearchContactInfoId(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }
}

@Injectable()
export class NewCustomerTypeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getNewCustomerType(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfNewCustomerTypeListDto> {
        let url_ = this.baseUrl + "/api/services/app/NewCustomerType/GetNewCustomerType?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNewCustomerType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNewCustomerType(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNewCustomerTypeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNewCustomerTypeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetNewCustomerType(response: Response): Observable<PagedResultDtoOfNewCustomerTypeListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfNewCustomerTypeListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNewCustomerTypeListDto.fromJS(resultData200) : new PagedResultDtoOfNewCustomerTypeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfNewCustomerTypeListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getNewCustomerTypeForEdit(id: number): Observable<GetNewCustomerType> {
        let url_ = this.baseUrl + "/api/services/app/NewCustomerType/GetNewCustomerTypeForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNewCustomerTypeForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNewCustomerTypeForEdit(response_);
                } catch (e) {
                    return <Observable<GetNewCustomerType>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNewCustomerType>><any>Observable.throw(response_);
        });
    }

    protected processGetNewCustomerTypeForEdit(response: Response): Observable<GetNewCustomerType> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetNewCustomerType = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNewCustomerType.fromJS(resultData200) : new GetNewCustomerType();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetNewCustomerType>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateNewCustomerType(input: NewCustomerTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewCustomerType/CreateOrUpdateNewCustomerType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateNewCustomerType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateNewCustomerType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateNewCustomerType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createInquiryAsync(input: NewCustomerTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewCustomerType/CreateInquiryAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateInquiryAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateInquiryAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateInquiryAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateInquiryAsync(input: NewCustomerTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewCustomerType/UpdateInquiryAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateInquiryAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateInquiryAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateInquiryAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteNewCustomerType(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewCustomerType/GetDeleteNewCustomerType?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteNewCustomerType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteNewCustomerType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteNewCustomerType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class NewInfoTypeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getNewInfoType(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfNewInfoTypeListDto> {
        let url_ = this.baseUrl + "/api/services/app/NewInfoType/GetNewInfoType?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNewInfoType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNewInfoType(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNewInfoTypeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNewInfoTypeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetNewInfoType(response: Response): Observable<PagedResultDtoOfNewInfoTypeListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfNewInfoTypeListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNewInfoTypeListDto.fromJS(resultData200) : new PagedResultDtoOfNewInfoTypeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfNewInfoTypeListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getNewInfoTypeForEdit(id: number): Observable<GetNewInfoType> {
        let url_ = this.baseUrl + "/api/services/app/NewInfoType/GetNewInfoTypeForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNewInfoTypeForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNewInfoTypeForEdit(response_);
                } catch (e) {
                    return <Observable<GetNewInfoType>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNewInfoType>><any>Observable.throw(response_);
        });
    }

    protected processGetNewInfoTypeForEdit(response: Response): Observable<GetNewInfoType> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetNewInfoType = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNewInfoType.fromJS(resultData200) : new GetNewInfoType();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetNewInfoType>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateNewInfoType(input: NewInfoTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewInfoType/CreateOrUpdateNewInfoType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateNewInfoType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateNewInfoType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateNewInfoType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createNewInfoTypeAsync(input: NewInfoTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewInfoType/CreateNewInfoTypeAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateNewInfoTypeAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateNewInfoTypeAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateNewInfoTypeAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateNewInfoTypeAsync(input: NewInfoTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewInfoType/UpdateNewInfoTypeAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateNewInfoTypeAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateNewInfoTypeAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateNewInfoTypeAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteNewInfoType(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/NewInfoType/GetDeleteNewInfoType?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteNewInfoType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteNewInfoType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteNewInfoType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class NotificationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getUserNotifications(state: State, maxResultCount: number, skipCount: number): Observable<GetNotificationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Notification/GetUserNotifications?";
        if (state !== undefined)
            url_ += "State=" + encodeURIComponent("" + state) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserNotifications(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserNotifications(response_);
                } catch (e) {
                    return <Observable<GetNotificationsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNotificationsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetUserNotifications(response: Response): Observable<GetNotificationsOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetNotificationsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNotificationsOutput.fromJS(resultData200) : new GetNotificationsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetNotificationsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    setAllNotificationsAsRead(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/SetAllNotificationsAsRead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSetAllNotificationsAsRead(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSetAllNotificationsAsRead(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSetAllNotificationsAsRead(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    setNotificationAsRead(input: EntityDtoOfGuid): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/SetNotificationAsRead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSetNotificationAsRead(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSetNotificationAsRead(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSetNotificationAsRead(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getNotificationSettings(): Observable<GetNotificationSettingsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Notification/GetNotificationSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNotificationSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNotificationSettings(response_);
                } catch (e) {
                    return <Observable<GetNotificationSettingsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNotificationSettingsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetNotificationSettings(response: Response): Observable<GetNotificationSettingsOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetNotificationSettingsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNotificationSettingsOutput.fromJS(resultData200) : new GetNotificationSettingsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetNotificationSettingsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    updateNotificationSettings(input: UpdateNotificationSettingsInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/UpdateNotificationSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateNotificationSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateNotificationSettings(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateNotificationSettings(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class OpportunitySourceServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getOpportunitySource(filter: string): Observable<ListResultDtoOfOpportunitySourceList> {
        let url_ = this.baseUrl + "/api/services/app/OpportunitySource/GetOpportunitySource?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOpportunitySource(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOpportunitySource(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfOpportunitySourceList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfOpportunitySourceList>><any>Observable.throw(response_);
        });
    }

    protected processGetOpportunitySource(response: Response): Observable<ListResultDtoOfOpportunitySourceList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfOpportunitySourceList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfOpportunitySourceList.fromJS(resultData200) : new ListResultDtoOfOpportunitySourceList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfOpportunitySourceList>(<any>null);
    }

    /**
     * @return Success
     */
    getOpportunitySourceForEdit(id: number): Observable<GetOpportunitySource> {
        let url_ = this.baseUrl + "/api/services/app/OpportunitySource/GetOpportunitySourceForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOpportunitySourceForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOpportunitySourceForEdit(response_);
                } catch (e) {
                    return <Observable<GetOpportunitySource>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetOpportunitySource>><any>Observable.throw(response_);
        });
    }

    protected processGetOpportunitySourceForEdit(response: Response): Observable<GetOpportunitySource> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetOpportunitySource = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetOpportunitySource.fromJS(resultData200) : new GetOpportunitySource();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetOpportunitySource>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateOpportunitySource(input: OpportunitySourceInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OpportunitySource/CreateOrUpdateOpportunitySource";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateOpportunitySource(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateOpportunitySource(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateOpportunitySource(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createOpportunitySource(input: OpportunitySourceInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OpportunitySource/CreateOpportunitySource";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOpportunitySource(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOpportunitySource(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOpportunitySource(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateOpportunitySource(input: OpportunitySourceInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OpportunitySource/UpdateOpportunitySource";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateOpportunitySource(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateOpportunitySource(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateOpportunitySource(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteOpportunitySource(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OpportunitySource/DeleteOpportunitySource?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteOpportunitySource(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteOpportunitySource(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteOpportunitySource(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class OrganizationUnitServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getOrganizationUnits(): Observable<ListResultDtoOfOrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnits";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOrganizationUnits(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOrganizationUnits(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfOrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfOrganizationUnitDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrganizationUnits(response: Response): Observable<ListResultDtoOfOrganizationUnitDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfOrganizationUnitDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfOrganizationUnitDto.fromJS(resultData200) : new ListResultDtoOfOrganizationUnitDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfOrganizationUnitDto>(<any>null);
    }

    /**
     * @return Success
     */
    getOrganizationUnitUsers(id: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfOrganizationUnitUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnitUsers?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOrganizationUnitUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOrganizationUnitUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfOrganizationUnitUserListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfOrganizationUnitUserListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrganizationUnitUsers(response: Response): Observable<PagedResultDtoOfOrganizationUnitUserListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfOrganizationUnitUserListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfOrganizationUnitUserListDto.fromJS(resultData200) : new PagedResultDtoOfOrganizationUnitUserListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfOrganizationUnitUserListDto>(<any>null);
    }

    /**
     * @return Success
     */
    createOrganizationUnit(input: CreateOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/CreateOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrganizationUnit(response: Response): Observable<OrganizationUnitDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: OrganizationUnitDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<OrganizationUnitDto>(<any>null);
    }

    /**
     * @return Success
     */
    updateOrganizationUnit(input: UpdateOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/UpdateOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateOrganizationUnit(response: Response): Observable<OrganizationUnitDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: OrganizationUnitDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<OrganizationUnitDto>(<any>null);
    }

    /**
     * @return Success
     */
    moveOrganizationUnit(input: MoveOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/MoveOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processMoveOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processMoveOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response_);
        });
    }

    protected processMoveOrganizationUnit(response: Response): Observable<OrganizationUnitDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: OrganizationUnitDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<OrganizationUnitDto>(<any>null);
    }

    /**
     * @return Success
     */
    deleteOrganizationUnit(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/DeleteOrganizationUnit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteOrganizationUnit(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    removeUserFromOrganizationUnit(userId: number, organizationUnitId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/RemoveUserFromOrganizationUnit?";
        if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (organizationUnitId !== undefined)
            url_ += "OrganizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processRemoveUserFromOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRemoveUserFromOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processRemoveUserFromOrganizationUnit(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    addUsersToOrganizationUnit(input: UsersToOrganizationUnitInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/AddUsersToOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processAddUsersToOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAddUsersToOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processAddUsersToOrganizationUnit(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    findUsers(input: FindOrganizationUnitUsersInput): Observable<PagedResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/FindUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processFindUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processFindUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(response_);
        });
    }

    protected processFindUsers(response: Response): Observable<PagedResultDtoOfNameValueDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfNameValueDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNameValueDto.fromJS(resultData200) : new PagedResultDtoOfNameValueDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfNameValueDto>(<any>null);
    }
}

@Injectable()
export class OrientationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getOrientation(filter: string): Observable<ListResultDtoOfOrientationListDto> {
        let url_ = this.baseUrl + "/api/services/app/Orientation/GetOrientation?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOrientation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOrientation(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfOrientationListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfOrientationListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrientation(response: Response): Observable<ListResultDtoOfOrientationListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfOrientationListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfOrientationListDto.fromJS(resultData200) : new ListResultDtoOfOrientationListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfOrientationListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getOrientationForEdit(id: number): Observable<GetOrientation> {
        let url_ = this.baseUrl + "/api/services/app/Orientation/GetOrientationForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOrientationForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOrientationForEdit(response_);
                } catch (e) {
                    return <Observable<GetOrientation>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetOrientation>><any>Observable.throw(response_);
        });
    }

    protected processGetOrientationForEdit(response: Response): Observable<GetOrientation> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetOrientation = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetOrientation.fromJS(resultData200) : new GetOrientation();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetOrientation>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateOrientation(input: OrientationInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Orientation/CreateOrUpdateOrientation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateOrientation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateOrientation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateOrientation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createOrientation(input: OrientationInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Orientation/CreateOrientation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrientation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrientation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrientation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateOrientation(input: OrientationInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Orientation/UpdateOrientation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateOrientation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateOrientation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateOrientation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteOrientation(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Orientation/DeleteOrientation?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteOrientation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteOrientation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteOrientation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class PaymentServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getPaymentInfo(upgradeEditionId: number): Observable<PaymentInfoDto> {
        let url_ = this.baseUrl + "/api/services/app/Payment/GetPaymentInfo?";
        if (upgradeEditionId !== undefined)
            url_ += "UpgradeEditionId=" + encodeURIComponent("" + upgradeEditionId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPaymentInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPaymentInfo(response_);
                } catch (e) {
                    return <Observable<PaymentInfoDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PaymentInfoDto>><any>Observable.throw(response_);
        });
    }

    protected processGetPaymentInfo(response: Response): Observable<PaymentInfoDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PaymentInfoDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PaymentInfoDto.fromJS(resultData200) : new PaymentInfoDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PaymentInfoDto>(<any>null);
    }

    /**
     * @return Success
     */
    createPayment(input: CreatePaymentDto): Observable<any> {
        let url_ = this.baseUrl + "/api/services/app/Payment/CreatePayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreatePayment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreatePayment(response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processCreatePayment(response: Response): Observable<any> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any>(<any>null);
    }

    /**
     * @return Success
     */
    executePayment(input: ExecutePaymentDto): Observable<any> {
        let url_ = this.baseUrl + "/api/services/app/Payment/ExecutePayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processExecutePayment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processExecutePayment(response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processExecutePayment(response: Response): Observable<any> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any>(<any>null);
    }

    /**
     * @return Success
     */
    getPaymentHistory(sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfSubscriptionPaymentListDto> {
        let url_ = this.baseUrl + "/api/services/app/Payment/GetPaymentHistory?";
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPaymentHistory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPaymentHistory(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfSubscriptionPaymentListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfSubscriptionPaymentListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetPaymentHistory(response: Response): Observable<PagedResultDtoOfSubscriptionPaymentListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfSubscriptionPaymentListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfSubscriptionPaymentListDto.fromJS(resultData200) : new PagedResultDtoOfSubscriptionPaymentListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfSubscriptionPaymentListDto>(<any>null);
    }
}

@Injectable()
export class PermissionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllPermissions(): Observable<ListResultDtoOfFlatPermissionWithLevelDto> {
        let url_ = this.baseUrl + "/api/services/app/Permission/GetAllPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllPermissions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllPermissions(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfFlatPermissionWithLevelDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfFlatPermissionWithLevelDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllPermissions(response: Response): Observable<ListResultDtoOfFlatPermissionWithLevelDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfFlatPermissionWithLevelDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfFlatPermissionWithLevelDto.fromJS(resultData200) : new ListResultDtoOfFlatPermissionWithLevelDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfFlatPermissionWithLevelDto>(<any>null);
    }
}

@Injectable()
export class PriceLevelServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getPriceLevel(filter: string): Observable<ListResultDtoOfPriceLevelListDto> {
        let url_ = this.baseUrl + "/api/services/app/PriceLevel/GetPriceLevel?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPriceLevel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPriceLevel(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfPriceLevelListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfPriceLevelListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetPriceLevel(response: Response): Observable<ListResultDtoOfPriceLevelListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfPriceLevelListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfPriceLevelListDto.fromJS(resultData200) : new ListResultDtoOfPriceLevelListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfPriceLevelListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getPriceLevelForEdit(id: number): Observable<GetPriceLevel> {
        let url_ = this.baseUrl + "/api/services/app/PriceLevel/GetPriceLevelForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPriceLevelForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPriceLevelForEdit(response_);
                } catch (e) {
                    return <Observable<GetPriceLevel>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetPriceLevel>><any>Observable.throw(response_);
        });
    }

    protected processGetPriceLevelForEdit(response: Response): Observable<GetPriceLevel> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetPriceLevel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetPriceLevel.fromJS(resultData200) : new GetPriceLevel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetPriceLevel>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdatePriceLevel(input: CreatePriceLevelInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/PriceLevel/CreateOrUpdatePriceLevel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdatePriceLevel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdatePriceLevel(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdatePriceLevel(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createPriceLevelAsync(input: CreatePriceLevelInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/PriceLevel/CreatePriceLevelAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreatePriceLevelAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreatePriceLevelAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreatePriceLevelAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updatePriceLevelAsync(input: CreatePriceLevelInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/PriceLevel/UpdatePriceLevelAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdatePriceLevelAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdatePriceLevelAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdatePriceLevelAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeletePriceLevel(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/PriceLevel/GetDeletePriceLevel?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeletePriceLevel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeletePriceLevel(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeletePriceLevel(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ProductServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getProduct(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfProductList> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetProduct?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProduct(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfProductList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfProductList>><any>Observable.throw(response_);
        });
    }

    protected processGetProduct(response: Response): Observable<PagedResultDtoOfProductList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfProductList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfProductList.fromJS(resultData200) : new PagedResultDtoOfProductList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfProductList>(<any>null);
    }

    /**
     * @return Success
     */
    getProductSpecificationDetails(id: number): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetProductSpecificationDetails?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductSpecificationDetails(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductSpecificationDetails(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetProductSpecificationDetails(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getProductForEdit(id: number): Observable<GetProduct> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetProductForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductForEdit(response_);
                } catch (e) {
                    return <Observable<GetProduct>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProduct>><any>Observable.throw(response_);
        });
    }

    protected processGetProductForEdit(response: Response): Observable<GetProduct> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetProduct = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProduct.fromJS(resultData200) : new GetProduct();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetProduct>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateProduct(input: ProductInput): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Product/CreateOrUpdateProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateProduct(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateProduct(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    createProductAsync(input: ProductInput): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Product/CreateProductAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateProductAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateProductAsync(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateProductAsync(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    updateProductAsync(input: ProductInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Product/UpdateProductAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateProductAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateProductAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProductAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createProductImages(input: ProductImagesInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Product/CreateProductImages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateProductImages(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateProductImages(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateProductImages(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteProductImages(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetDeleteProductImages?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteProductImages(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteProductImages(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteProductImages(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteProduct(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetDeleteProduct?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateProductPriceLevel(input: ProductPriceLevelInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Product/CreateOrUpdateProductPriceLevel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateProductPriceLevel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateProductPriceLevel(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateProductPriceLevel(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createProductPriceLevel(input: ProductPriceLevelInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Product/CreateProductPriceLevel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateProductPriceLevel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateProductPriceLevel(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateProductPriceLevel(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateProductPriceLevel(input: ProductPriceLevelInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Product/UpdateProductPriceLevel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateProductPriceLevel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateProductPriceLevel(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProductPriceLevel(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteProductPriceLevel(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetDeleteProductPriceLevel?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteProductPriceLevel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteProductPriceLevel(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteProductPriceLevel(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    specificationDetail(input: EntityDto): Observable<string[]> {
        let url_ = this.baseUrl + "/api/services/app/Product/SpecificationDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSpecificationDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSpecificationDetail(response_);
                } catch (e) {
                    return <Observable<string[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<string[]>><any>Observable.throw(response_);
        });
    }

    protected processSpecificationDetail(response: Response): Observable<string[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: string[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<string[]>(<any>null);
    }

    /**
     * @return Success
     */
    getProductToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetProductToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    linkProductToQuotation(input: ProductLinkInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Product/LinkProductToQuotation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processLinkProductToQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLinkProductToQuotation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processLinkProductToQuotation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAdvancedProducts(productCategoryId: number, productSpecificationId: number, filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfProductList> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetAdvancedProducts?";
        if (productCategoryId !== undefined)
            url_ += "ProductCategoryId=" + encodeURIComponent("" + productCategoryId) + "&"; 
        if (productSpecificationId !== undefined)
            url_ += "ProductSpecificationId=" + encodeURIComponent("" + productSpecificationId) + "&"; 
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAdvancedProducts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAdvancedProducts(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfProductList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfProductList>><any>Observable.throw(response_);
        });
    }

    protected processGetAdvancedProducts(response: Response): Observable<PagedResultDtoOfProductList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfProductList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfProductList.fromJS(resultData200) : new PagedResultDtoOfProductList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfProductList>(<any>null);
    }

    /**
     * @return Success
     */
    getAdvancedTempProducts(productCategoryId: number, productSpecificationId: number, filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfTempProductList> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetAdvancedTempProducts?";
        if (productCategoryId !== undefined)
            url_ += "ProductCategoryId=" + encodeURIComponent("" + productCategoryId) + "&"; 
        if (productSpecificationId !== undefined)
            url_ += "ProductSpecificationId=" + encodeURIComponent("" + productSpecificationId) + "&"; 
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAdvancedTempProducts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAdvancedTempProducts(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTempProductList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfTempProductList>><any>Observable.throw(response_);
        });
    }

    protected processGetAdvancedTempProducts(response: Response): Observable<PagedResultDtoOfTempProductList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfTempProductList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTempProductList.fromJS(resultData200) : new PagedResultDtoOfTempProductList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfTempProductList>(<any>null);
    }

    /**
     * @return Success
     */
    createCustomProduct(input: NullableIdDto): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Product/CreateCustomProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateCustomProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateCustomProduct(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateCustomProduct(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }
}

@Injectable()
export class ProductAttributeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getProductAttribute(filter: string): Observable<ListResultDtoOfProductAttributeListDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductAttribute/GetProductAttribute?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductAttribute(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductAttribute(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfProductAttributeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfProductAttributeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductAttribute(response: Response): Observable<ListResultDtoOfProductAttributeListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfProductAttributeListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfProductAttributeListDto.fromJS(resultData200) : new ListResultDtoOfProductAttributeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfProductAttributeListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getProductAttributeForEdit(id: number): Observable<GetProductAttribute> {
        let url_ = this.baseUrl + "/api/services/app/ProductAttribute/GetProductAttributeForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductAttributeForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductAttributeForEdit(response_);
                } catch (e) {
                    return <Observable<GetProductAttribute>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProductAttribute>><any>Observable.throw(response_);
        });
    }

    protected processGetProductAttributeForEdit(response: Response): Observable<GetProductAttribute> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetProductAttribute = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProductAttribute.fromJS(resultData200) : new GetProductAttribute();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetProductAttribute>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateProductAttribute(input: CreateProductAttributeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductAttribute/CreateOrUpdateProductAttribute";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateProductAttribute(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateProductAttribute(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateProductAttribute(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createProductAttribute(input: CreateProductAttributeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductAttribute/CreateProductAttribute";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateProductAttribute(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateProductAttribute(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateProductAttribute(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateProductAttribute(input: CreateProductAttributeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductAttribute/UpdateProductAttribute";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateProductAttribute(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateProductAttribute(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProductAttribute(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteProductAttribute(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductAttribute/GetDeleteProductAttribute?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteProductAttribute(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteProductAttribute(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteProductAttribute(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getProductAttributeToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductAttribute/GetProductAttributeToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductAttributeToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductAttributeToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductAttributeToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class ProductCategoryServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getProductCategory(filter: string): Observable<ListResultDtoOfProductCategoryList> {
        let url_ = this.baseUrl + "/api/services/app/ProductCategory/GetProductCategory?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductCategory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductCategory(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfProductCategoryList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfProductCategoryList>><any>Observable.throw(response_);
        });
    }

    protected processGetProductCategory(response: Response): Observable<ListResultDtoOfProductCategoryList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfProductCategoryList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfProductCategoryList.fromJS(resultData200) : new ListResultDtoOfProductCategoryList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfProductCategoryList>(<any>null);
    }

    /**
     * @return Success
     */
    getProductCategoryForEdit(id: number): Observable<GetProductCategory> {
        let url_ = this.baseUrl + "/api/services/app/ProductCategory/GetProductCategoryForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductCategoryForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductCategoryForEdit(response_);
                } catch (e) {
                    return <Observable<GetProductCategory>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProductCategory>><any>Observable.throw(response_);
        });
    }

    protected processGetProductCategoryForEdit(response: Response): Observable<GetProductCategory> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetProductCategory = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProductCategory.fromJS(resultData200) : new GetProductCategory();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetProductCategory>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateProductCategory(input: ProductCategoryInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductCategory/CreateOrUpdateProductCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateProductCategory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateProductCategory(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateProductCategory(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createProductCategory(input: ProductCategoryInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductCategory/CreateProductCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateProductCategory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateProductCategory(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateProductCategory(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateProductCategory(input: ProductCategoryInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductCategory/UpdateProductCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateProductCategory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateProductCategory(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProductCategory(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteProductCategory(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductCategory/DeleteProductCategory?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteProductCategory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteProductCategory(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteProductCategory(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ProductFamilyServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getProductFamily(filter: string): Observable<ListResultDtoOfProductFamilyListDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductFamily/GetProductFamily?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductFamily(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductFamily(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfProductFamilyListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfProductFamilyListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductFamily(response: Response): Observable<ListResultDtoOfProductFamilyListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfProductFamilyListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfProductFamilyListDto.fromJS(resultData200) : new ListResultDtoOfProductFamilyListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfProductFamilyListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getProductFamilyForEdit(id: number): Observable<GetProductFamily> {
        let url_ = this.baseUrl + "/api/services/app/ProductFamily/GetProductFamilyForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductFamilyForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductFamilyForEdit(response_);
                } catch (e) {
                    return <Observable<GetProductFamily>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProductFamily>><any>Observable.throw(response_);
        });
    }

    protected processGetProductFamilyForEdit(response: Response): Observable<GetProductFamily> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetProductFamily = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProductFamily.fromJS(resultData200) : new GetProductFamily();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetProductFamily>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateProductFamily(input: CreateProductFamilyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductFamily/CreateOrUpdateProductFamily";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateProductFamily(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateProductFamily(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateProductFamily(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createProductFamily(input: CreateProductFamilyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductFamily/CreateProductFamily";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateProductFamily(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateProductFamily(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateProductFamily(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateProductFamily(input: CreateProductFamilyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductFamily/UpdateProductFamily";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateProductFamily(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateProductFamily(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProductFamily(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteProductFamily(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductFamily/GetDeleteProductFamily?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteProductFamily(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteProductFamily(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteProductFamily(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getProductFamilyToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductFamily/GetProductFamilyToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductFamilyToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductFamilyToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductFamilyToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class ProductGroupServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getProductGroup(filter: string): Observable<ListResultDtoOfProductGroupListDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/GetProductGroup?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductGroup(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfProductGroupListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfProductGroupListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductGroup(response: Response): Observable<ListResultDtoOfProductGroupListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfProductGroupListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfProductGroupListDto.fromJS(resultData200) : new ListResultDtoOfProductGroupListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfProductGroupListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getProductGroupForEdit(id: number): Observable<GetProductGroup> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/GetProductGroupForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductGroupForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductGroupForEdit(response_);
                } catch (e) {
                    return <Observable<GetProductGroup>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProductGroup>><any>Observable.throw(response_);
        });
    }

    protected processGetProductGroupForEdit(response: Response): Observable<GetProductGroup> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetProductGroup = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProductGroup.fromJS(resultData200) : new GetProductGroup();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetProductGroup>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateProductGroup(input: ProductGroupInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/CreateOrUpdateProductGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateProductGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateProductGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateProductGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createProductGroup(input: ProductGroupInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/CreateProductGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateProductGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateProductGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateProductGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateProductGroup(input: ProductGroupInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/UpdateProductGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateProductGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateProductGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProductGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateProductGroupDetail(input: CreateProductGroupDetailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/CreateOrUpdateProductGroupDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateProductGroupDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateProductGroupDetail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateProductGroupDetail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createProductGroupDetail(input: CreateProductGroupDetailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/CreateProductGroupDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateProductGroupDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateProductGroupDetail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateProductGroupDetail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateProductGroupDetail(input: CreateProductGroupDetailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/UpdateProductGroupDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateProductGroupDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateProductGroupDetail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProductGroupDetail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteGroupDetail(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/GetDeleteGroupDetail?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteGroupDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteGroupDetail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteGroupDetail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteProductGroup(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/GetDeleteProductGroup?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteProductGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteProductGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteProductGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getProductGroupToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/GetProductGroupToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductGroupToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductGroupToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductGroupToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class ProductSpecificationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getProductSpecification(filter: string): Observable<ListResultDtoOfProductSpecificationList> {
        let url_ = this.baseUrl + "/api/services/app/ProductSpecification/GetProductSpecification?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductSpecification(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductSpecification(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfProductSpecificationList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfProductSpecificationList>><any>Observable.throw(response_);
        });
    }

    protected processGetProductSpecification(response: Response): Observable<ListResultDtoOfProductSpecificationList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfProductSpecificationList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfProductSpecificationList.fromJS(resultData200) : new ListResultDtoOfProductSpecificationList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfProductSpecificationList>(<any>null);
    }

    /**
     * @return Success
     */
    getProductSpecificationForEdit(id: number): Observable<GetProductSpecification> {
        let url_ = this.baseUrl + "/api/services/app/ProductSpecification/GetProductSpecificationForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductSpecificationForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductSpecificationForEdit(response_);
                } catch (e) {
                    return <Observable<GetProductSpecification>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProductSpecification>><any>Observable.throw(response_);
        });
    }

    protected processGetProductSpecificationForEdit(response: Response): Observable<GetProductSpecification> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetProductSpecification = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProductSpecification.fromJS(resultData200) : new GetProductSpecification();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetProductSpecification>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateProductSpecification(input: CreateProductSpecification): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSpecification/CreateOrUpdateProductSpecification";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateProductSpecification(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateProductSpecification(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateProductSpecification(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createProductSpecification(input: CreateProductSpecification): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSpecification/CreateProductSpecification";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateProductSpecification(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateProductSpecification(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateProductSpecification(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateProductSpecification(input: CreateProductSpecification): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSpecification/UpdateProductSpecification";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateProductSpecification(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateProductSpecification(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProductSpecification(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteProductSpecification(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSpecification/GetDeleteProductSpecification?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteProductSpecification(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteProductSpecification(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteProductSpecification(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createProductSpecificationDetail(input: CreateProductSpecificationInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSpecification/CreateProductSpecificationDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateProductSpecificationDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateProductSpecificationDetail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateProductSpecificationDetail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteProductSpecificationDetail(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSpecification/GetDeleteProductSpecificationDetail?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteProductSpecificationDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteProductSpecificationDetail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteProductSpecificationDetail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getProductGroupDetails(id: number): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/ProductSpecification/GetProductGroupDetails?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductGroupDetails(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductGroupDetails(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetProductGroupDetails(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    generateProduct(input: EntityDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSpecification/GenerateProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGenerateProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGenerateProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGenerateProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    regenerateProduct(input: EntityDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSpecification/RegenerateProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processRegenerateProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRegenerateProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processRegenerateProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    productGroupDetailChange(input: ProductGroupDetailChangeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSpecification/ProductGroupDetailChange";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processProductGroupDetailChange(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processProductGroupDetailChange(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processProductGroupDetailChange(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getProductSpecificationToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductSpecification/GetProductSpecificationToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductSpecificationToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductSpecificationToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductSpecificationToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getProducts(id: number, filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfProductList> {
        let url_ = this.baseUrl + "/api/services/app/ProductSpecification/GetProducts?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProducts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProducts(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfProductList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfProductList>><any>Observable.throw(response_);
        });
    }

    protected processGetProducts(response: Response): Observable<PagedResultDtoOfProductList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfProductList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfProductList.fromJS(resultData200) : new PagedResultDtoOfProductList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfProductList>(<any>null);
    }

    /**
     * @return Success
     */
    createOrDeleteProductGroupDetails(input: ProductSpecArray): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSpecification/CreateOrDeleteProductGroupDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrDeleteProductGroupDetails(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrDeleteProductGroupDetails(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrDeleteProductGroupDetails(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    confirmDeleteProductSpecification(input: EntityDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSpecification/ConfirmDeleteProductSpecification";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processConfirmDeleteProductSpecification(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processConfirmDeleteProductSpecification(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processConfirmDeleteProductSpecification(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ProductSubGroupServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getProductSubGroup(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfProductSubGroupListDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductSubGroup/GetProductSubGroup?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductSubGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductSubGroup(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfProductSubGroupListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfProductSubGroupListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductSubGroup(response: Response): Observable<PagedResultDtoOfProductSubGroupListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfProductSubGroupListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfProductSubGroupListDto.fromJS(resultData200) : new PagedResultDtoOfProductSubGroupListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfProductSubGroupListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getProductSubGroupForEdit(id: number): Observable<GetProductSubGroup> {
        let url_ = this.baseUrl + "/api/services/app/ProductSubGroup/GetProductSubGroupForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductSubGroupForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductSubGroupForEdit(response_);
                } catch (e) {
                    return <Observable<GetProductSubGroup>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProductSubGroup>><any>Observable.throw(response_);
        });
    }

    protected processGetProductSubGroupForEdit(response: Response): Observable<GetProductSubGroup> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetProductSubGroup = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProductSubGroup.fromJS(resultData200) : new GetProductSubGroup();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetProductSubGroup>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateProductSubGroup(input: ProductSubGroupInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSubGroup/CreateOrUpdateProductSubGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateProductSubGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateProductSubGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateProductSubGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createProductSubGroupAsync(input: ProductSubGroupInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSubGroup/CreateProductSubGroupAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateProductSubGroupAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateProductSubGroupAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateProductSubGroupAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateProductSubGroupAsync(input: ProductSubGroupInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSubGroup/UpdateProductSubGroupAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateProductSubGroupAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateProductSubGroupAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProductSubGroupAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteProductSubGroup(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSubGroup/DeleteProductSubGroup?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteProductSubGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteProductSubGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteProductSubGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ProductTypeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getProductType(filter: string): Observable<ListResultDtoOfProductTypeListDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductType/GetProductType?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductType(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfProductTypeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfProductTypeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductType(response: Response): Observable<ListResultDtoOfProductTypeListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfProductTypeListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfProductTypeListDto.fromJS(resultData200) : new ListResultDtoOfProductTypeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfProductTypeListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getProductTypeForEdit(id: number): Observable<GetProductType> {
        let url_ = this.baseUrl + "/api/services/app/ProductType/GetProductTypeForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductTypeForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductTypeForEdit(response_);
                } catch (e) {
                    return <Observable<GetProductType>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProductType>><any>Observable.throw(response_);
        });
    }

    protected processGetProductTypeForEdit(response: Response): Observable<GetProductType> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetProductType = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProductType.fromJS(resultData200) : new GetProductType();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetProductType>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateProductType(input: ProductTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductType/CreateOrUpdateProductType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateProductType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateProductType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateProductType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createProductType(input: ProductTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductType/CreateProductType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateProductType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateProductType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateProductType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateProductType(input: ProductTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductType/UpdateProductType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateProductType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateProductType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProductType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteProductType(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductType/GetDeleteProductType?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteProductType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteProductType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteProductType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ProfileServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCurrentUserProfileForEdit(): Observable<CurrentUserProfileEditDto> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetCurrentUserProfileForEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCurrentUserProfileForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCurrentUserProfileForEdit(response_);
                } catch (e) {
                    return <Observable<CurrentUserProfileEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<CurrentUserProfileEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCurrentUserProfileForEdit(response: Response): Observable<CurrentUserProfileEditDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: CurrentUserProfileEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CurrentUserProfileEditDto.fromJS(resultData200) : new CurrentUserProfileEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<CurrentUserProfileEditDto>(<any>null);
    }

    /**
     * @return Success
     */
    updateGoogleAuthenticatorKey(): Observable<UpdateGoogleAuthenticatorKeyOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateGoogleAuthenticatorKey";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateGoogleAuthenticatorKey(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateGoogleAuthenticatorKey(response_);
                } catch (e) {
                    return <Observable<UpdateGoogleAuthenticatorKeyOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<UpdateGoogleAuthenticatorKeyOutput>><any>Observable.throw(response_);
        });
    }

    protected processUpdateGoogleAuthenticatorKey(response: Response): Observable<UpdateGoogleAuthenticatorKeyOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: UpdateGoogleAuthenticatorKeyOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UpdateGoogleAuthenticatorKeyOutput.fromJS(resultData200) : new UpdateGoogleAuthenticatorKeyOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<UpdateGoogleAuthenticatorKeyOutput>(<any>null);
    }

    /**
     * @return Success
     */
    sendVerificationSms(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/SendVerificationSms";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendVerificationSms(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendVerificationSms(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendVerificationSms(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    verifySmsCode(input: VerifySmsCodeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/VerifySmsCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processVerifySmsCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processVerifySmsCode(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processVerifySmsCode(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateCurrentUserProfile(input: CurrentUserProfileEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateCurrentUserProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateCurrentUserProfile(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateCurrentUserProfile(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateCurrentUserProfile(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    changePassword(input: ChangePasswordInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processChangePassword(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangePassword(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processChangePassword(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateProfilePicture(input: UpdateProfilePictureInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateProfilePicture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateProfilePicture(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateProfilePicture(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProfilePicture(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    summafun(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/Summafun";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSummafun(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSummafun(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSummafun(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getPasswordComplexitySetting(): Observable<GetPasswordComplexitySettingOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetPasswordComplexitySetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPasswordComplexitySetting(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPasswordComplexitySetting(response_);
                } catch (e) {
                    return <Observable<GetPasswordComplexitySettingOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetPasswordComplexitySettingOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetPasswordComplexitySetting(response: Response): Observable<GetPasswordComplexitySettingOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetPasswordComplexitySettingOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetPasswordComplexitySettingOutput.fromJS(resultData200) : new GetPasswordComplexitySettingOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetPasswordComplexitySettingOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getProfilePicture(): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetProfilePicture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProfilePicture(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProfilePicture(response_);
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetProfilePicture(response: Response): Observable<GetProfilePictureOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetProfilePictureOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetProfilePictureOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getFriendProfilePictureById(profilePictureId: string, userId: number, tenantId: number): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetFriendProfilePictureById?";
        if (profilePictureId !== undefined)
            url_ += "ProfilePictureId=" + encodeURIComponent("" + profilePictureId) + "&"; 
        if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (tenantId !== undefined)
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetFriendProfilePictureById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetFriendProfilePictureById(response_);
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetFriendProfilePictureById(response: Response): Observable<GetProfilePictureOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetProfilePictureOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetProfilePictureOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getProfilePictureById(profilePictureId: string): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetProfilePictureById?";
        if (profilePictureId !== undefined)
            url_ += "profilePictureId=" + encodeURIComponent("" + profilePictureId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProfilePictureById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProfilePictureById(response_);
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetProfilePictureById(response: Response): Observable<GetProfilePictureOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetProfilePictureOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetProfilePictureOutput>(<any>null);
    }

    /**
     * @return Success
     */
    changeLanguage(input: ChangeUserLanguageDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangeLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processChangeLanguage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangeLanguage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processChangeLanguage(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class QuotationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getQuotation(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfQuotationListDto> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetQuotation?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotation(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfQuotationListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfQuotationListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotation(response: Response): Observable<PagedResultDtoOfQuotationListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfQuotationListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfQuotationListDto.fromJS(resultData200) : new PagedResultDtoOfQuotationListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfQuotationListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationForEdit(id: number): Observable<GetQuotation> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetQuotationForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationForEdit(response_);
                } catch (e) {
                    return <Observable<GetQuotation>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetQuotation>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationForEdit(response: Response): Observable<GetQuotation> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetQuotation = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetQuotation.fromJS(resultData200) : new GetQuotation();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetQuotation>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationRevisionForEdit(id: number): Observable<GetQuotation> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetQuotationRevisionForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationRevisionForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationRevisionForEdit(response_);
                } catch (e) {
                    return <Observable<GetQuotation>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetQuotation>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationRevisionForEdit(response: Response): Observable<GetQuotation> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetQuotation = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetQuotation.fromJS(resultData200) : new GetQuotation();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetQuotation>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateQuotation(input: CreateQuotationInput): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CreateOrUpdateQuotation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateQuotation(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateQuotation(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    createQuotation(input: CreateQuotationInput): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CreateQuotation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateQuotation(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateQuotation(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    updateQuotationOptional(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/UpdateQuotationOptional?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateQuotationOptional(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateQuotationOptional(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateQuotationOptional(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateQuotation(input: CreateQuotationInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/UpdateQuotation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateQuotation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateQuotation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateQuotationWonorLost(input: UpdateQuotationInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/UpdateQuotationWonorLost";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateQuotationWonorLost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateQuotationWonorLost(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateQuotationWonorLost(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getSectionForEdit(id: number): Observable<GetSection> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetSectionForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSectionForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSectionForEdit(response_);
                } catch (e) {
                    return <Observable<GetSection>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetSection>><any>Observable.throw(response_);
        });
    }

    protected processGetSectionForEdit(response: Response): Observable<GetSection> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetSection = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetSection.fromJS(resultData200) : new GetSection();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetSection>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateSection(input: CreateSectionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CreateOrUpdateSection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateSection(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateSection(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateSection(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createSection(input: CreateSectionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CreateSection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateSection(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateSection(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateSection(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateSection(input: CreateSectionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/UpdateSection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateSection(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateSection(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateSection(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationProduct(id: number): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetQuotationProduct?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationProduct(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationProduct(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationProductForEdit(id: number): Observable<GetQuotationProduct> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetQuotationProductForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationProductForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationProductForEdit(response_);
                } catch (e) {
                    return <Observable<GetQuotationProduct>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetQuotationProduct>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationProductForEdit(response: Response): Observable<GetQuotationProduct> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetQuotationProduct = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetQuotationProduct.fromJS(resultData200) : new GetQuotationProduct();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetQuotationProduct>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateQuotationProduct(input: QuotationProductInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CreateOrUpdateQuotationProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateQuotationProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateQuotationProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateQuotationProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createQuotationProduct(input: QuotationProductInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CreateQuotationProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateQuotationProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateQuotationProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateQuotationProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateQuotationProduct(input: QuotationProductInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/UpdateQuotationProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateQuotationProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateQuotationProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateQuotationProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteQuotationProduct(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/DeleteQuotationProduct?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteQuotationProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteQuotationProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteQuotationProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteSection(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/DeleteSection?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteSection(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteSection(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteSection(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteQuotation(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetDeleteQuotation?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteQuotation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteQuotation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getProductImport(quotationId: number, file: string, fileName: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetProductImport?";
        if (quotationId !== undefined)
            url_ += "QuotationId=" + encodeURIComponent("" + quotationId) + "&"; 
        if (file !== undefined)
            url_ += "File=" + encodeURIComponent("" + file) + "&"; 
        if (fileName !== undefined)
            url_ += "FileName=" + encodeURIComponent("" + fileName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductImport(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductImport(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetProductImport(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getImportHistory(quotationId: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfImportHistoryList> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetImportHistory?";
        if (quotationId !== undefined)
            url_ += "QuotationId=" + encodeURIComponent("" + quotationId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetImportHistory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetImportHistory(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfImportHistoryList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfImportHistoryList>><any>Observable.throw(response_);
        });
    }

    protected processGetImportHistory(response: Response): Observable<PagedResultDtoOfImportHistoryList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfImportHistoryList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfImportHistoryList.fromJS(resultData200) : new PagedResultDtoOfImportHistoryList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfImportHistoryList>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationProductUnlock(tempProductId: number, productId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetQuotationProductUnlock?";
        if (tempProductId !== undefined)
            url_ += "TempProductId=" + encodeURIComponent("" + tempProductId) + "&"; 
        if (productId !== undefined)
            url_ += "ProductId=" + encodeURIComponent("" + productId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationProductUnlock(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationProductUnlock(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationProductUnlock(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getExchangeProduct(id: number, prodId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetExchangeProduct?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (prodId !== undefined)
            url_ += "ProdId=" + encodeURIComponent("" + prodId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetExchangeProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetExchangeProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetExchangeProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getApproveProduct(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetApproveProduct?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetApproveProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetApproveProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetApproveProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    checkQuotationIsOptional(input: NullableIdDto): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CheckQuotationIsOptional";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCheckQuotationIsOptional(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCheckQuotationIsOptional(response_);
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response_);
        });
    }

    protected processCheckQuotationIsOptional(response: Response): Observable<boolean> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<boolean>(<any>null);
    }

    /**
     * @return Success
     */
    getInquiryWiseQuotation(id: number): Observable<ListResultDtoOfQuotationListDto> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetInquiryWiseQuotation?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetInquiryWiseQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetInquiryWiseQuotation(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfQuotationListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfQuotationListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetInquiryWiseQuotation(response: Response): Observable<ListResultDtoOfQuotationListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfQuotationListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfQuotationListDto.fromJS(resultData200) : new ListResultDtoOfQuotationListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfQuotationListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getRevisedQuotation(id: number): Observable<PagedResultDtoOfQuotationListDto> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetRevisedQuotation?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRevisedQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRevisedQuotation(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfQuotationListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfQuotationListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetRevisedQuotation(response: Response): Observable<PagedResultDtoOfQuotationListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfQuotationListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfQuotationListDto.fromJS(resultData200) : new PagedResultDtoOfQuotationListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfQuotationListDto>(<any>null);
    }

    /**
     * @return Success
     */
    quotationRevision(id: number): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/QuotationRevision?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processQuotationRevision(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processQuotationRevision(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processQuotationRevision(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    updateQuotationVatAmount(input: NullableIdDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/UpdateQuotationVatAmount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateQuotationVatAmount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateQuotationVatAmount(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateQuotationVatAmount(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    setDiscountForProducts(quotationId: number, newDiscount: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/SetDiscountForProducts?";
        if (quotationId !== undefined)
            url_ += "QuotationId=" + encodeURIComponent("" + quotationId) + "&"; 
        if (newDiscount !== undefined)
            url_ += "NewDiscount=" + encodeURIComponent("" + newDiscount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSetDiscountForProducts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSetDiscountForProducts(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSetDiscountForProducts(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetQuotationToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationInquiryFilter(id: number, userIds: string, quotationCreateBy: string, quotationStatus: string, salesman: string, inquiryCreateBy: string, potentialCustomer: string, mileStoneName: string, enquiryStatus: string, teamName: string, coordinator: string, designer: string, designationName: string, emirates: string, depatmentName: string, categories: string, status: string, whyBafco: string, probability: string, quotationCreation: string, inquiryCreation: string, closureDate: string, lastActivity: string, statusForQuotation: string, qtnDateFilterId: number, clsDateFilterId: number, lastActDateFilterId: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfQuotationInquiryFilter> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetQuotationInquiryFilter?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (userIds !== undefined)
            url_ += "UserIds=" + encodeURIComponent("" + userIds) + "&"; 
        if (quotationCreateBy !== undefined)
            url_ += "QuotationCreateBy=" + encodeURIComponent("" + quotationCreateBy) + "&"; 
        if (quotationStatus !== undefined)
            url_ += "QuotationStatus=" + encodeURIComponent("" + quotationStatus) + "&"; 
        if (salesman !== undefined)
            url_ += "Salesman=" + encodeURIComponent("" + salesman) + "&"; 
        if (inquiryCreateBy !== undefined)
            url_ += "InquiryCreateBy=" + encodeURIComponent("" + inquiryCreateBy) + "&"; 
        if (potentialCustomer !== undefined)
            url_ += "PotentialCustomer=" + encodeURIComponent("" + potentialCustomer) + "&"; 
        if (mileStoneName !== undefined)
            url_ += "MileStoneName=" + encodeURIComponent("" + mileStoneName) + "&"; 
        if (enquiryStatus !== undefined)
            url_ += "EnquiryStatus=" + encodeURIComponent("" + enquiryStatus) + "&"; 
        if (teamName !== undefined)
            url_ += "TeamName=" + encodeURIComponent("" + teamName) + "&"; 
        if (coordinator !== undefined)
            url_ += "Coordinator=" + encodeURIComponent("" + coordinator) + "&"; 
        if (designer !== undefined)
            url_ += "Designer=" + encodeURIComponent("" + designer) + "&"; 
        if (designationName !== undefined)
            url_ += "DesignationName=" + encodeURIComponent("" + designationName) + "&"; 
        if (emirates !== undefined)
            url_ += "Emirates=" + encodeURIComponent("" + emirates) + "&"; 
        if (depatmentName !== undefined)
            url_ += "DepatmentName=" + encodeURIComponent("" + depatmentName) + "&"; 
        if (categories !== undefined)
            url_ += "Categories=" + encodeURIComponent("" + categories) + "&"; 
        if (status !== undefined)
            url_ += "Status=" + encodeURIComponent("" + status) + "&"; 
        if (whyBafco !== undefined)
            url_ += "WhyBafco=" + encodeURIComponent("" + whyBafco) + "&"; 
        if (probability !== undefined)
            url_ += "Probability=" + encodeURIComponent("" + probability) + "&"; 
        if (quotationCreation !== undefined)
            url_ += "QuotationCreation=" + encodeURIComponent("" + quotationCreation) + "&"; 
        if (inquiryCreation !== undefined)
            url_ += "InquiryCreation=" + encodeURIComponent("" + inquiryCreation) + "&"; 
        if (closureDate !== undefined)
            url_ += "ClosureDate=" + encodeURIComponent("" + closureDate) + "&"; 
        if (lastActivity !== undefined)
            url_ += "LastActivity=" + encodeURIComponent("" + lastActivity) + "&"; 
        if (statusForQuotation !== undefined)
            url_ += "StatusForQuotation=" + encodeURIComponent("" + statusForQuotation) + "&"; 
        if (qtnDateFilterId !== undefined)
            url_ += "QtnDateFilterId=" + encodeURIComponent("" + qtnDateFilterId) + "&"; 
        if (clsDateFilterId !== undefined)
            url_ += "ClsDateFilterId=" + encodeURIComponent("" + clsDateFilterId) + "&"; 
        if (lastActDateFilterId !== undefined)
            url_ += "LastActDateFilterId=" + encodeURIComponent("" + lastActDateFilterId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationInquiryFilter(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationInquiryFilter(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfQuotationInquiryFilter>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfQuotationInquiryFilter>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationInquiryFilter(response: Response): Observable<PagedResultDtoOfQuotationInquiryFilter> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfQuotationInquiryFilter = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfQuotationInquiryFilter.fromJS(resultData200) : new PagedResultDtoOfQuotationInquiryFilter();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfQuotationInquiryFilter>(<any>null);
    }

    /**
     * @return Success
     */
    sendDiscountMail(input: NullableIdDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/SendDiscountMail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendDiscountMail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendDiscountMail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendDiscountMail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getTeamEnquiryReport(salesId: number, filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfQuotationReportListDto> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetTeamEnquiryReport?";
        if (salesId !== undefined)
            url_ += "SalesId=" + encodeURIComponent("" + salesId) + "&"; 
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTeamEnquiryReport(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTeamEnquiryReport(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfQuotationReportListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfQuotationReportListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTeamEnquiryReport(response: Response): Observable<PagedResultDtoOfQuotationReportListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfQuotationReportListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfQuotationReportListDto.fromJS(resultData200) : new PagedResultDtoOfQuotationReportListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfQuotationReportListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getTeamReport(teamId: number, filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfTeamReportListDto> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetTeamReport?";
        if (teamId !== undefined)
            url_ += "TeamId=" + encodeURIComponent("" + teamId) + "&"; 
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTeamReport(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTeamReport(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTeamReportListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfTeamReportListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTeamReport(response: Response): Observable<PagedResultDtoOfTeamReportListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfTeamReportListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTeamReportListDto.fromJS(resultData200) : new PagedResultDtoOfTeamReportListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfTeamReportListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getAllTeamReport(teamId: number, filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfTeamReportListDto> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetAllTeamReport?";
        if (teamId !== undefined)
            url_ += "TeamId=" + encodeURIComponent("" + teamId) + "&"; 
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllTeamReport(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllTeamReport(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTeamReportListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfTeamReportListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllTeamReport(response: Response): Observable<PagedResultDtoOfTeamReportListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfTeamReportListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTeamReportListDto.fromJS(resultData200) : new PagedResultDtoOfTeamReportListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfTeamReportListDto>(<any>null);
    }

    /**
     * @return Success
     */
    overAllApproveQuote(input: NullableIdDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/OverAllApproveQuote";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processOverAllApproveQuote(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processOverAllApproveQuote(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processOverAllApproveQuote(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class QuotationStatusServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getQuotationStatus(filter: string): Observable<ListResultDtoOfQuotationStatusList> {
        let url_ = this.baseUrl + "/api/services/app/QuotationStatus/GetQuotationStatus?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationStatus(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfQuotationStatusList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfQuotationStatusList>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationStatus(response: Response): Observable<ListResultDtoOfQuotationStatusList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfQuotationStatusList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfQuotationStatusList.fromJS(resultData200) : new ListResultDtoOfQuotationStatusList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfQuotationStatusList>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationStatusForEdit(id: number): Observable<GetQuotationStatus> {
        let url_ = this.baseUrl + "/api/services/app/QuotationStatus/GetQuotationStatusForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationStatusForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationStatusForEdit(response_);
                } catch (e) {
                    return <Observable<GetQuotationStatus>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetQuotationStatus>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationStatusForEdit(response: Response): Observable<GetQuotationStatus> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetQuotationStatus = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetQuotationStatus.fromJS(resultData200) : new GetQuotationStatus();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetQuotationStatus>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateQuotationStatus(input: QuotationStatusInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationStatus/CreateOrUpdateQuotationStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateQuotationStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateQuotationStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateQuotationStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createQuotationStatus(input: QuotationStatusInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationStatus/CreateQuotationStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateQuotationStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateQuotationStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateQuotationStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateQuotationStatus(input: QuotationStatusInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationStatus/UpdateQuotationStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateQuotationStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateQuotationStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateQuotationStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteQuotationStatus(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationStatus/DeleteQuotationStatus?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteQuotationStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteQuotationStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteQuotationStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class RegionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getRegion(filter: string): Observable<ListResultDtoOfRegionList> {
        let url_ = this.baseUrl + "/api/services/app/Region/GetRegion?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRegion(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRegion(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfRegionList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfRegionList>><any>Observable.throw(response_);
        });
    }

    protected processGetRegion(response: Response): Observable<ListResultDtoOfRegionList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfRegionList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfRegionList.fromJS(resultData200) : new ListResultDtoOfRegionList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfRegionList>(<any>null);
    }

    /**
     * @return Success
     */
    getRegionForEdit(id: number): Observable<GetRegion> {
        let url_ = this.baseUrl + "/api/services/app/Region/GetRegionForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRegionForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRegionForEdit(response_);
                } catch (e) {
                    return <Observable<GetRegion>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetRegion>><any>Observable.throw(response_);
        });
    }

    protected processGetRegionForEdit(response: Response): Observable<GetRegion> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetRegion = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetRegion.fromJS(resultData200) : new GetRegion();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetRegion>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateRegion(input: RegionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Region/CreateOrUpdateRegion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateRegion(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateRegion(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateRegion(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createRegion(input: RegionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Region/CreateRegion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateRegion(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateRegion(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateRegion(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateRegion(input: RegionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Region/UpdateRegion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateRegion(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateRegion(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateRegion(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getRegionCity(id: number): Observable<ListResultDtoOfRegionCityList> {
        let url_ = this.baseUrl + "/api/services/app/Region/GetRegionCity?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRegionCity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRegionCity(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfRegionCityList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfRegionCityList>><any>Observable.throw(response_);
        });
    }

    protected processGetRegionCity(response: Response): Observable<ListResultDtoOfRegionCityList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfRegionCityList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfRegionCityList.fromJS(resultData200) : new ListResultDtoOfRegionCityList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfRegionCityList>(<any>null);
    }

    /**
     * @return Success
     */
    addRegionCity(input: RegionCityInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Region/AddRegionCity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processAddRegionCity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAddRegionCity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processAddRegionCity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteRegionCity(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Region/GetDeleteRegionCity?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteRegionCity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteRegionCity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteRegionCity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteRegion(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Region/GetDeleteRegion?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteRegion(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteRegion(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteRegion(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getRegionToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Region/GetRegionToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRegionToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRegionToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetRegionToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class RoleServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getRoles(permission: string): Observable<ListResultDtoOfRoleListDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoles?";
        if (permission !== undefined)
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRoles(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRoles(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfRoleListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfRoleListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetRoles(response: Response): Observable<ListResultDtoOfRoleListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfRoleListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfRoleListDto.fromJS(resultData200) : new ListResultDtoOfRoleListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfRoleListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getRoleForEdit(id: number): Observable<GetRoleForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoleForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRoleForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRoleForEdit(response_);
                } catch (e) {
                    return <Observable<GetRoleForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetRoleForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetRoleForEdit(response: Response): Observable<GetRoleForEditOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetRoleForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetRoleForEditOutput.fromJS(resultData200) : new GetRoleForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetRoleForEditOutput>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateRole(input: CreateOrUpdateRoleInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/CreateOrUpdateRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateRole(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateRole(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateRole(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteRole(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/DeleteRole?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteRole(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteRole(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteRole(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class Select2ServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getUserSalesPersonfromTeam(id: number): Observable<Select3UserResult> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetUserSalesPersonfromTeam?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserSalesPersonfromTeam(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserSalesPersonfromTeam(response_);
                } catch (e) {
                    return <Observable<Select3UserResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3UserResult>><any>Observable.throw(response_);
        });
    }

    protected processGetUserSalesPersonfromTeam(response: Response): Observable<Select3UserResult> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3UserResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3UserResult.fromJS(resultData200) : new Select3UserResult();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3UserResult>(<any>null);
    }

    /**
     * @return Success
     */
    getUserSalesPersontoTeam(): Observable<Select3UserResult> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetUserSalesPersontoTeam";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserSalesPersontoTeam(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserSalesPersontoTeam(response_);
                } catch (e) {
                    return <Observable<Select3UserResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3UserResult>><any>Observable.throw(response_);
        });
    }

    protected processGetUserSalesPersontoTeam(response: Response): Observable<Select3UserResult> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3UserResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3UserResult.fromJS(resultData200) : new Select3UserResult();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3UserResult>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesExecutive(id: number): Observable<SliderDataList[]> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetSalesExecutive?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesExecutive(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesExecutive(response_);
                } catch (e) {
                    return <Observable<SliderDataList[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SliderDataList[]>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesExecutive(response: Response): Observable<SliderDataList[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: SliderDataList[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SliderDataList.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<SliderDataList[]>(<any>null);
    }

    /**
     * @return Success
     */
    getDashboardTeam(): Observable<SelectDResult> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetDashboardTeam";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDashboardTeam(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDashboardTeam(response_);
                } catch (e) {
                    return <Observable<SelectDResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<SelectDResult>><any>Observable.throw(response_);
        });
    }

    protected processGetDashboardTeam(response: Response): Observable<SelectDResult> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: SelectDResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SelectDResult.fromJS(resultData200) : new SelectDResult();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<SelectDResult>(<any>null);
    }

    /**
     * @return Success
     */
    getCity(): Observable<Select2City> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetCity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCity(response_);
                } catch (e) {
                    return <Observable<Select2City>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2City>><any>Observable.throw(response_);
        });
    }

    protected processGetCity(response: Response): Observable<Select2City> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2City = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2City.fromJS(resultData200) : new Select2City();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2City>(<any>null);
    }

    /**
     * @return Success
     */
    getSpecProduct(id: number): Observable<Select2product> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetSpecProduct?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSpecProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSpecProduct(response_);
                } catch (e) {
                    return <Observable<Select2product>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2product>><any>Observable.throw(response_);
        });
    }

    protected processGetSpecProduct(response: Response): Observable<Select2product> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2product = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2product.fromJS(resultData200) : new Select2product();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2product>(<any>null);
    }

    /**
     * @return Success
     */
    getPriceLevel(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetPriceLevel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPriceLevel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPriceLevel(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetPriceLevel(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getSourceType(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetSourceType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSourceType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSourceType(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetSourceType(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getCountry(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetCountry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCountry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCountry(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetCountry(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getProductSubGroup(id: number): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetProductSubGroup?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductSubGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductSubGroup(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetProductSubGroup(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getAccountHandler(): Observable<Select3Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetAccountHandler";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAccountHandler(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAccountHandler(response_);
                } catch (e) {
                    return <Observable<Select3Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3Result>><any>Observable.throw(response_);
        });
    }

    protected processGetAccountHandler(response: Response): Observable<Select3Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3Result.fromJS(resultData200) : new Select3Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3Result>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesman(): Observable<Select3Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetSalesman";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesman(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesman(response_);
                } catch (e) {
                    return <Observable<Select3Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3Result>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesman(response: Response): Observable<Select3Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3Result.fromJS(resultData200) : new Select3Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3Result>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesCoordinator(): Observable<Select3Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetSalesCoordinator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesCoordinator(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesCoordinator(response_);
                } catch (e) {
                    return <Observable<Select3Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3Result>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesCoordinator(response: Response): Observable<Select3Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3Result.fromJS(resultData200) : new Select3Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3Result>(<any>null);
    }

    /**
     * @return Success
     */
    getDesigner(): Observable<Select3Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetDesigner";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDesigner(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDesigner(response_);
                } catch (e) {
                    return <Observable<Select3Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3Result>><any>Observable.throw(response_);
        });
    }

    protected processGetDesigner(response: Response): Observable<Select3Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3Result.fromJS(resultData200) : new Select3Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3Result>(<any>null);
    }

    /**
     * @return Success
     */
    getLeadReason(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetLeadReason";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLeadReason(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLeadReason(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetLeadReason(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getLeadType(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetLeadType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLeadType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLeadType(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetLeadType(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getLeadSource(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetLeadSource";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLeadSource(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLeadSource(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetLeadSource(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getDesignation(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetDesignation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDesignation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDesignation(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetDesignation(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getCompany(id: number): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetCompany?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompany(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetCompany(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getAllCompany(name: string): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetAllCompany?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllCompany(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetAllCompany(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanyWithSales(): Observable<Select2sales> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetCompanyWithSales";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanyWithSales(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanyWithSales(response_);
                } catch (e) {
                    return <Observable<Select2sales>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2sales>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanyWithSales(response: Response): Observable<Select2sales> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2sales = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2sales.fromJS(resultData200) : new Select2sales();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2sales>(<any>null);
    }

    /**
     * @return Success
     */
    getLocation(id: number): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetLocation?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLocation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLocation(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetLocation(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getAllLocation(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetAllLocation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllLocation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllLocation(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetAllLocation(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getLineType(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetLineType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLineType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLineType(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetLineType(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getMileStone(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetMileStone";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMileStone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMileStone(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetMileStone(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getDepartment(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetDepartment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDepartment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDepartment(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetDepartment(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getDepartmentSales(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetDepartmentSales";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDepartmentSales(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDepartmentSales(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetDepartmentSales(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesFromDepatment(id: number): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetSalesFromDepatment?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesFromDepatment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesFromDepatment(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesFromDepatment(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getActivityTypes(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetActivityTypes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetActivityTypes(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetActivityTypes(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetActivityTypes(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getContactTypeInfo(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetContactTypeInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContactTypeInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContactTypeInfo(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetContactTypeInfo(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanyTypeinfo(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetCompanyTypeinfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanyTypeinfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanyTypeinfo(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanyTypeinfo(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getNewCompanyType(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetNewCompanyType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNewCompanyType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNewCompanyType(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetNewCompanyType(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getNewCustomerType(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetNewCustomerType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNewCustomerType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNewCustomerType(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetNewCustomerType(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanyContacts(id: number): Observable<Select2Contact> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetCompanyContacts?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanyContacts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanyContacts(response_);
                } catch (e) {
                    return <Observable<Select2Contact>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Contact>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanyContacts(response: Response): Observable<Select2Contact> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Contact = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Contact.fromJS(resultData200) : new Select2Contact();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Contact>(<any>null);
    }

    /**
     * @return Success
     */
    getContactEmail(id: number): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetContactEmail?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContactEmail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContactEmail(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetContactEmail(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getContactMobile(id: number): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetContactMobile?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContactMobile(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContactMobile(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetContactMobile(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getTitle(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetTitle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTitle(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTitle(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetTitle(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getEnquiryStatus(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetEnquiryStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryStatus(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryStatus(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getEnquiryStages(id: number): Observable<Stage2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetEnquiryStages?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryStages(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryStages(response_);
                } catch (e) {
                    return <Observable<Stage2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Stage2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryStages(response: Response): Observable<Stage2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Stage2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Stage2Result.fromJS(resultData200) : new Stage2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Stage2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getIndustry(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetIndustry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetIndustry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetIndustry(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetIndustry(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getProduct(): Observable<Select2product> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProduct(response_);
                } catch (e) {
                    return <Observable<Select2product>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2product>><any>Observable.throw(response_);
        });
    }

    protected processGetProduct(response: Response): Observable<Select2product> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2product = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2product.fromJS(resultData200) : new Select2product();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2product>(<any>null);
    }

    /**
     * @return Success
     */
    getSection(id: number): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetSection?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSection(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSection(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetSection(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getCompatitorCompany(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetCompatitorCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompatitorCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompatitorCompany(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetCompatitorCompany(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getAttribute(): Observable<Select2Attribute> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetAttribute";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAttribute(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAttribute(response_);
                } catch (e) {
                    return <Observable<Select2Attribute>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Attribute>><any>Observable.throw(response_);
        });
    }

    protected processGetAttribute(response: Response): Observable<Select2Attribute> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Attribute = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Attribute.fromJS(resultData200) : new Select2Attribute();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Attribute>(<any>null);
    }

    /**
     * @return Success
     */
    getAttributeGroup(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetAttributeGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAttributeGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAttributeGroup(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetAttributeGroup(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getProductFamily(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetProductFamily";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductFamily(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductFamily(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetProductFamily(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getCollection(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetCollection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCollection(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCollection(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetCollection(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getProductGroup(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetProductGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductGroup(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetProductGroup(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getProductSpecification(): Observable<Select2Product> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetProductSpecification";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductSpecification(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductSpecification(response_);
                } catch (e) {
                    return <Observable<Select2Product>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Product>><any>Observable.throw(response_);
        });
    }

    protected processGetProductSpecification(response: Response): Observable<Select2Product> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Product = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Product.fromJS(resultData200) : new Select2Product();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Product>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationStatus(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetQuotationStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationStatus(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationStatus(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getInquiry(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetInquiry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetInquiry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetInquiry(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetInquiry(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getProductDetails(name: string): Observable<Select2productdetailsdto> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetProductDetails?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductDetails(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductDetails(response_);
                } catch (e) {
                    return <Observable<Select2productdetailsdto>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2productdetailsdto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductDetails(response: Response): Observable<Select2productdetailsdto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2productdetailsdto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2productdetailsdto.fromJS(resultData200) : new Select2productdetailsdto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2productdetailsdto>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesManager(): Observable<Select3Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetSalesManager";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesManager(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesManager(response_);
                } catch (e) {
                    return <Observable<Select3Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3Result>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesManager(response: Response): Observable<Select3Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3Result.fromJS(resultData200) : new Select3Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3Result>(<any>null);
    }

    /**
     * @return Success
     */
    getOtherSalesman(): Observable<Select3Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetOtherSalesman";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOtherSalesman(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOtherSalesman(response_);
                } catch (e) {
                    return <Observable<Select3Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3Result>><any>Observable.throw(response_);
        });
    }

    protected processGetOtherSalesman(response: Response): Observable<Select3Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3Result.fromJS(resultData200) : new Select3Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3Result>(<any>null);
    }

    /**
     * @return Success
     */
    getAllSalesman(): Observable<Select3Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetAllSalesman";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllSalesman(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllSalesman(response_);
                } catch (e) {
                    return <Observable<Select3Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3Result>><any>Observable.throw(response_);
        });
    }

    protected processGetAllSalesman(response: Response): Observable<Select3Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3Result.fromJS(resultData200) : new Select3Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3Result>(<any>null);
    }

    /**
     * @return Success
     */
    getOtherSalesManager(): Observable<Select3Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetOtherSalesManager";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOtherSalesManager(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOtherSalesManager(response_);
                } catch (e) {
                    return <Observable<Select3Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3Result>><any>Observable.throw(response_);
        });
    }

    protected processGetOtherSalesManager(response: Response): Observable<Select3Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3Result.fromJS(resultData200) : new Select3Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3Result>(<any>null);
    }

    /**
     * @return Success
     */
    getTeamSalesman(id: number): Observable<Select3Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetTeamSalesman?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTeamSalesman(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTeamSalesman(response_);
                } catch (e) {
                    return <Observable<Select3Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3Result>><any>Observable.throw(response_);
        });
    }

    protected processGetTeamSalesman(response: Response): Observable<Select3Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3Result.fromJS(resultData200) : new Select3Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3Result>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanyWithSalesman(): Observable<Select2sales> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetCompanyWithSalesman";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanyWithSalesman(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanyWithSalesman(response_);
                } catch (e) {
                    return <Observable<Select2sales>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2sales>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanyWithSalesman(response: Response): Observable<Select2sales> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2sales = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2sales.fromJS(resultData200) : new Select2sales();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2sales>(<any>null);
    }

    /**
     * @return Success
     */
    getTemporaryProduct(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetTemporaryProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTemporaryProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTemporaryProduct(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetTemporaryProduct(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getInquiryDetails(id: number): Observable<Select2Inquiry> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetInquiryDetails?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetInquiryDetails(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetInquiryDetails(response_);
                } catch (e) {
                    return <Observable<Select2Inquiry>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Inquiry>><any>Observable.throw(response_);
        });
    }

    protected processGetInquiryDetails(response: Response): Observable<Select2Inquiry> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Inquiry = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Inquiry.fromJS(resultData200) : new Select2Inquiry();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Inquiry>(<any>null);
    }

    /**
     * @return Success
     */
    getTeam(): Observable<Select2Team> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetTeam";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTeam(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTeam(response_);
                } catch (e) {
                    return <Observable<Select2Team>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Team>><any>Observable.throw(response_);
        });
    }

    protected processGetTeam(response: Response): Observable<Select2Team> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Team = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Team.fromJS(resultData200) : new Select2Team();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Team>(<any>null);
    }

    /**
     * @return Success
     */
    getProductCategory(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetProductCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductCategory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductCategory(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetProductCategory(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getWhyBafco(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetWhyBafco";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetWhyBafco(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetWhyBafco(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetWhyBafco(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getOpportunitySource(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetOpportunitySource";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOpportunitySource(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOpportunitySource(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetOpportunitySource(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getStagestate(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetStagestate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetStagestate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetStagestate(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetStagestate(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanyDetails(companyId: number, name: string): Observable<Select2Company> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetCompanyDetails?";
        if (companyId !== undefined)
            url_ += "CompanyId=" + encodeURIComponent("" + companyId) + "&"; 
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanyDetails(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanyDetails(response_);
                } catch (e) {
                    return <Observable<Select2Company>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Company>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanyDetails(response: Response): Observable<Select2Company> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Company = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Company.fromJS(resultData200) : new Select2Company();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Company>(<any>null);
    }

    /**
     * @return Success
     */
    getAllCompanyEnquiry(name: string): Observable<Select4Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetAllCompanyEnquiry?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllCompanyEnquiry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllCompanyEnquiry(response_);
                } catch (e) {
                    return <Observable<Select4Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select4Result>><any>Observable.throw(response_);
        });
    }

    protected processGetAllCompanyEnquiry(response: Response): Observable<Select4Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select4Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select4Result.fromJS(resultData200) : new Select4Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select4Result>(<any>null);
    }

    /**
     * @return Success
     */
    getLeadStatus(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetLeadStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLeadStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLeadStatus(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetLeadStatus(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanyDiscount(id: number): Observable<Select2Discount> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetCompanyDiscount?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanyDiscount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanyDiscount(response_);
                } catch (e) {
                    return <Observable<Select2Discount>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Discount>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanyDiscount(response: Response): Observable<Select2Discount> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Discount = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Discount.fromJS(resultData200) : new Select2Discount();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Discount>(<any>null);
    }

    /**
     * @return Success
     */
    getTemporaryProducts(name: string): Observable<Select2productdetailsdto> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetTemporaryProducts?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTemporaryProducts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTemporaryProducts(response_);
                } catch (e) {
                    return <Observable<Select2productdetailsdto>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2productdetailsdto>><any>Observable.throw(response_);
        });
    }

    protected processGetTemporaryProducts(response: Response): Observable<Select2productdetailsdto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2productdetailsdto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2productdetailsdto.fromJS(resultData200) : new Select2productdetailsdto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2productdetailsdto>(<any>null);
    }

    /**
     * @return Success
     */
    getUserDesignation(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetUserDesignation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserDesignation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserDesignation(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetUserDesignation(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getProductCategoryAll(): Observable<Select2CategoryResult> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetProductCategoryAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductCategoryAll(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductCategoryAll(response_);
                } catch (e) {
                    return <Observable<Select2CategoryResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2CategoryResult>><any>Observable.throw(response_);
        });
    }

    protected processGetProductCategoryAll(response: Response): Observable<Select2CategoryResult> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2CategoryResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2CategoryResult.fromJS(resultData200) : new Select2CategoryResult();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2CategoryResult>(<any>null);
    }

    /**
     * @return Success
     */
    getProductSpecificationCategoryBased(id: number): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetProductSpecificationCategoryBased?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductSpecificationCategoryBased(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductSpecificationCategoryBased(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetProductSpecificationCategoryBased(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getProductState(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetProductState";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductState(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductState(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetProductState(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getViews(): Observable<Select2View> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetViews";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetViews(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetViews(response_);
                } catch (e) {
                    return <Observable<Select2View>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2View>><any>Observable.throw(response_);
        });
    }

    protected processGetViews(response: Response): Observable<Select2View> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2View = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2View.fromJS(resultData200) : new Select2View();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2View>(<any>null);
    }

    /**
     * @return Success
     */
    getReportColumn(): Observable<Select2Column> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetReportColumn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetReportColumn(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetReportColumn(response_);
                } catch (e) {
                    return <Observable<Select2Column>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Column>><any>Observable.throw(response_);
        });
    }

    protected processGetReportColumn(response: Response): Observable<Select2Column> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Column = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Column.fromJS(resultData200) : new Select2Column();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Column>(<any>null);
    }

    /**
     * @return Success
     */
    getReportFilters(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetReportFilters";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetReportFilters(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetReportFilters(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetReportFilters(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getReportAllPerson(): Observable<Select3Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetReportAllPerson";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetReportAllPerson(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetReportAllPerson(response_);
                } catch (e) {
                    return <Observable<Select3Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3Result>><any>Observable.throw(response_);
        });
    }

    protected processGetReportAllPerson(response: Response): Observable<Select3Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3Result.fromJS(resultData200) : new Select3Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3Result>(<any>null);
    }

    /**
     * @return Success
     */
    getUserProfile(): Observable<Select3UserResult> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetUserProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserProfile(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserProfile(response_);
                } catch (e) {
                    return <Observable<Select3UserResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3UserResult>><any>Observable.throw(response_);
        });
    }

    protected processGetUserProfile(response: Response): Observable<Select3UserResult> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3UserResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3UserResult.fromJS(resultData200) : new Select3UserResult();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3UserResult>(<any>null);
    }

    /**
     * @return Success
     */
    getUserSalesManager(): Observable<Select3UserResult> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetUserSalesManager";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserSalesManager(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserSalesManager(response_);
                } catch (e) {
                    return <Observable<Select3UserResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3UserResult>><any>Observable.throw(response_);
        });
    }

    protected processGetUserSalesManager(response: Response): Observable<Select3UserResult> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3UserResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3UserResult.fromJS(resultData200) : new Select3UserResult();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3UserResult>(<any>null);
    }

    /**
     * @return Success
     */
    getUserSalesManagerToTeam(): Observable<Select3UserResult> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetUserSalesManagerToTeam";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserSalesManagerToTeam(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserSalesManagerToTeam(response_);
                } catch (e) {
                    return <Observable<Select3UserResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3UserResult>><any>Observable.throw(response_);
        });
    }

    protected processGetUserSalesManagerToTeam(response: Response): Observable<Select3UserResult> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3UserResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3UserResult.fromJS(resultData200) : new Select3UserResult();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3UserResult>(<any>null);
    }

    /**
     * @return Success
     */
    getUserSalesPerson(): Observable<Select3UserResult> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetUserSalesPerson";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserSalesPerson(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserSalesPerson(response_);
                } catch (e) {
                    return <Observable<Select3UserResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3UserResult>><any>Observable.throw(response_);
        });
    }

    protected processGetUserSalesPerson(response: Response): Observable<Select3UserResult> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3UserResult = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3UserResult.fromJS(resultData200) : new Select3UserResult();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3UserResult>(<any>null);
    }
}

@Injectable()
export class SessionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCurrentLoginInformations(): Observable<GetCurrentLoginInformationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/GetCurrentLoginInformations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCurrentLoginInformations(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCurrentLoginInformations(response_);
                } catch (e) {
                    return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetCurrentLoginInformations(response: Response): Observable<GetCurrentLoginInformationsOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetCurrentLoginInformationsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrentLoginInformationsOutput.fromJS(resultData200) : new GetCurrentLoginInformationsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetCurrentLoginInformationsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    updateUserSignInToken(): Observable<UpdateUserSignInTokenOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/UpdateUserSignInToken";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateUserSignInToken(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateUserSignInToken(response_);
                } catch (e) {
                    return <Observable<UpdateUserSignInTokenOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<UpdateUserSignInTokenOutput>><any>Observable.throw(response_);
        });
    }

    protected processUpdateUserSignInToken(response: Response): Observable<UpdateUserSignInTokenOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: UpdateUserSignInTokenOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UpdateUserSignInTokenOutput.fromJS(resultData200) : new UpdateUserSignInTokenOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<UpdateUserSignInTokenOutput>(<any>null);
    }
}

@Injectable()
export class SourceServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getSources(filter: string): Observable<ListResultDtoOfSourceListDto> {
        let url_ = this.baseUrl + "/api/services/app/Source/GetSources?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSources(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSources(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfSourceListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfSourceListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetSources(response: Response): Observable<ListResultDtoOfSourceListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfSourceListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfSourceListDto.fromJS(resultData200) : new ListResultDtoOfSourceListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfSourceListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getSourceForEdit(id: number): Observable<GetSources> {
        let url_ = this.baseUrl + "/api/services/app/Source/GetSourceForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSourceForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSourceForEdit(response_);
                } catch (e) {
                    return <Observable<GetSources>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetSources>><any>Observable.throw(response_);
        });
    }

    protected processGetSourceForEdit(response: Response): Observable<GetSources> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetSources = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetSources.fromJS(resultData200) : new GetSources();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetSources>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateSource(input: SourceInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Source/CreateOrUpdateSource";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateSource(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateSource(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateSource(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createSource(input: SourceInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Source/CreateSource";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateSource(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateSource(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateSource(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateSource(input: SourceInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Source/UpdateSource";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateSource(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateSource(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateSource(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteSource(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Source/GetDeleteSource?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteSource(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteSource(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteSource(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getSourceToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Source/GetSourceToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSourceToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSourceToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetSourceToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class TeamServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getTeam(filter: string): Observable<ListResultDtoOfTeamListDto> {
        let url_ = this.baseUrl + "/api/services/app/Team/GetTeam?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTeam(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTeam(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfTeamListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfTeamListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTeam(response: Response): Observable<ListResultDtoOfTeamListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfTeamListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfTeamListDto.fromJS(resultData200) : new ListResultDtoOfTeamListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfTeamListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getTeamForEdit(id: number): Observable<GetTeam> {
        let url_ = this.baseUrl + "/api/services/app/Team/GetTeamForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTeamForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTeamForEdit(response_);
                } catch (e) {
                    return <Observable<GetTeam>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetTeam>><any>Observable.throw(response_);
        });
    }

    protected processGetTeamForEdit(response: Response): Observable<GetTeam> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetTeam = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetTeam.fromJS(resultData200) : new GetTeam();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetTeam>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateTeam(input: CreateTeamInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Team/CreateOrUpdateTeam";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateTeam(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateTeam(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateTeam(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createTeam(input: CreateTeamInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Team/CreateTeam";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateTeam(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateTeam(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateTeam(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateTeam(input: CreateTeamInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Team/UpdateTeam";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateTeam(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTeam(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTeam(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteTeam(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Team/DeleteTeam?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteTeam(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteTeam(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteTeam(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getTeamDetail(teamId: number): Observable<ListResultDtoOfTeamDetailList> {
        let url_ = this.baseUrl + "/api/services/app/Team/GetTeamDetail?";
        if (teamId !== undefined)
            url_ += "TeamId=" + encodeURIComponent("" + teamId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTeamDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTeamDetail(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfTeamDetailList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfTeamDetailList>><any>Observable.throw(response_);
        });
    }

    protected processGetTeamDetail(response: Response): Observable<ListResultDtoOfTeamDetailList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfTeamDetailList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfTeamDetailList.fromJS(resultData200) : new ListResultDtoOfTeamDetailList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfTeamDetailList>(<any>null);
    }

    /**
     * @return Success
     */
    createTeamDetail(input: CreateTeamDetailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Team/CreateTeamDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateTeamDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateTeamDetail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateTeamDetail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteTeamDetail(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Team/DeleteTeamDetail?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteTeamDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteTeamDetail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteTeamDetail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TemporaryProductServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getTemporaryProduct(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfTemporaryProductList> {
        let url_ = this.baseUrl + "/api/services/app/TemporaryProduct/GetTemporaryProduct?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTemporaryProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTemporaryProduct(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTemporaryProductList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfTemporaryProductList>><any>Observable.throw(response_);
        });
    }

    protected processGetTemporaryProduct(response: Response): Observable<PagedResultDtoOfTemporaryProductList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfTemporaryProductList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTemporaryProductList.fromJS(resultData200) : new PagedResultDtoOfTemporaryProductList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfTemporaryProductList>(<any>null);
    }

    /**
     * @return Success
     */
    getTemporaryProductForEdit(id: number): Observable<GetTemporaryProduct> {
        let url_ = this.baseUrl + "/api/services/app/TemporaryProduct/GetTemporaryProductForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTemporaryProductForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTemporaryProductForEdit(response_);
                } catch (e) {
                    return <Observable<GetTemporaryProduct>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetTemporaryProduct>><any>Observable.throw(response_);
        });
    }

    protected processGetTemporaryProductForEdit(response: Response): Observable<GetTemporaryProduct> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetTemporaryProduct = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetTemporaryProduct.fromJS(resultData200) : new GetTemporaryProduct();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetTemporaryProduct>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateTemporaryProduct(input: TemporaryProductInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TemporaryProduct/CreateOrUpdateTemporaryProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateTemporaryProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateTemporaryProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateTemporaryProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createTemporaryProduct(input: TemporaryProductInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TemporaryProduct/CreateTemporaryProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateTemporaryProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateTemporaryProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateTemporaryProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateTemporaryProduct(input: TemporaryProductInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TemporaryProduct/UpdateTemporaryProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateTemporaryProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTemporaryProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTemporaryProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteTemporaryProduct(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TemporaryProduct/GetDeleteTemporaryProduct?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteTemporaryProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteTemporaryProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteTemporaryProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createTemporaryProductImage(input: TemporaryProductImageInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TemporaryProduct/CreateTemporaryProductImage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateTemporaryProductImage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateTemporaryProductImage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateTemporaryProductImage(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteTemporaryProductImage(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TemporaryProduct/GetDeleteTemporaryProductImage?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteTemporaryProductImage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteTemporaryProductImage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteTemporaryProductImage(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getTemporaryProductForEditBySuspectCode(suspectCode: string): Observable<GetTemporaryProduct> {
        let url_ = this.baseUrl + "/api/services/app/TemporaryProduct/GetTemporaryProductForEditBySuspectCode?";
        if (suspectCode !== undefined)
            url_ += "SuspectCode=" + encodeURIComponent("" + suspectCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTemporaryProductForEditBySuspectCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTemporaryProductForEditBySuspectCode(response_);
                } catch (e) {
                    return <Observable<GetTemporaryProduct>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetTemporaryProduct>><any>Observable.throw(response_);
        });
    }

    protected processGetTemporaryProductForEditBySuspectCode(response: Response): Observable<GetTemporaryProduct> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetTemporaryProduct = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetTemporaryProduct.fromJS(resultData200) : new GetTemporaryProduct();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetTemporaryProduct>(<any>null);
    }

    /**
     * @return Success
     */
    createTemporaryProductandId(input: TemporaryProductInput): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/TemporaryProduct/CreateTemporaryProductandId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateTemporaryProductandId(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateTemporaryProductandId(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateTemporaryProductandId(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }
}

@Injectable()
export class TenantServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getTenants(filter: string, subscriptionEndDateStart: moment.Moment, subscriptionEndDateEnd: moment.Moment, creationDateStart: moment.Moment, creationDateEnd: moment.Moment, editionId: number, editionIdSpecified: boolean, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfTenantListDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenants?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (subscriptionEndDateStart !== undefined)
            url_ += "SubscriptionEndDateStart=" + encodeURIComponent("" + subscriptionEndDateStart.toJSON()) + "&"; 
        if (subscriptionEndDateEnd !== undefined)
            url_ += "SubscriptionEndDateEnd=" + encodeURIComponent("" + subscriptionEndDateEnd.toJSON()) + "&"; 
        if (creationDateStart !== undefined)
            url_ += "CreationDateStart=" + encodeURIComponent("" + creationDateStart.toJSON()) + "&"; 
        if (creationDateEnd !== undefined)
            url_ += "CreationDateEnd=" + encodeURIComponent("" + creationDateEnd.toJSON()) + "&"; 
        if (editionId !== undefined)
            url_ += "EditionId=" + encodeURIComponent("" + editionId) + "&"; 
        if (editionIdSpecified !== undefined)
            url_ += "EditionIdSpecified=" + encodeURIComponent("" + editionIdSpecified) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTenants(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenants(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTenantListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfTenantListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenants(response: Response): Observable<PagedResultDtoOfTenantListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfTenantListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTenantListDto.fromJS(resultData200) : new PagedResultDtoOfTenantListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfTenantListDto>(<any>null);
    }

    /**
     * @return Success
     */
    createTenant(input: CreateTenantInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/CreateTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateTenant(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateTenant(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getTenantForEdit(id: number): Observable<TenantEditDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTenantForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenantForEdit(response_);
                } catch (e) {
                    return <Observable<TenantEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantForEdit(response: Response): Observable<TenantEditDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: TenantEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantEditDto.fromJS(resultData200) : new TenantEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<TenantEditDto>(<any>null);
    }

    /**
     * @return Success
     */
    updateTenant(input: TenantEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UpdateTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTenant(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTenant(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteTenant(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/DeleteTenant?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteTenant(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteTenant(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getTenantFeaturesForEdit(id: number): Observable<GetTenantFeaturesEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantFeaturesForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTenantFeaturesForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenantFeaturesForEdit(response_);
                } catch (e) {
                    return <Observable<GetTenantFeaturesEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetTenantFeaturesEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantFeaturesForEdit(response: Response): Observable<GetTenantFeaturesEditOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetTenantFeaturesEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetTenantFeaturesEditOutput.fromJS(resultData200) : new GetTenantFeaturesEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetTenantFeaturesEditOutput>(<any>null);
    }

    /**
     * @return Success
     */
    updateTenantFeatures(input: UpdateTenantFeaturesInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UpdateTenantFeatures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateTenantFeatures(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTenantFeatures(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTenantFeatures(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    resetTenantSpecificFeatures(input: EntityDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/ResetTenantSpecificFeatures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processResetTenantSpecificFeatures(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processResetTenantSpecificFeatures(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processResetTenantSpecificFeatures(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    unlockTenantAdmin(input: EntityDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UnlockTenantAdmin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUnlockTenantAdmin(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUnlockTenantAdmin(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUnlockTenantAdmin(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TenantDashboardServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getMemberActivity(): Observable<GetMemberActivityOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetMemberActivity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMemberActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMemberActivity(response_);
                } catch (e) {
                    return <Observable<GetMemberActivityOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMemberActivityOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetMemberActivity(response: Response): Observable<GetMemberActivityOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetMemberActivityOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetMemberActivityOutput.fromJS(resultData200) : new GetMemberActivityOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetMemberActivityOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getDashboardData(salesSummaryDatePeriod: SalesSummaryDatePeriod): Observable<GetDashboardDataOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetDashboardData?";
        if (salesSummaryDatePeriod !== undefined)
            url_ += "SalesSummaryDatePeriod=" + encodeURIComponent("" + salesSummaryDatePeriod) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDashboardData(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDashboardData(response_);
                } catch (e) {
                    return <Observable<GetDashboardDataOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDashboardDataOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetDashboardData(response: Response): Observable<GetDashboardDataOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetDashboardDataOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDashboardDataOutput.fromJS(resultData200) : new GetDashboardDataOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetDashboardDataOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesSummary(salesSummaryDatePeriod: SalesSummaryDatePeriod2): Observable<GetSalesSummaryOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetSalesSummary?";
        if (salesSummaryDatePeriod !== undefined)
            url_ += "SalesSummaryDatePeriod=" + encodeURIComponent("" + salesSummaryDatePeriod) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesSummary(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesSummary(response_);
                } catch (e) {
                    return <Observable<GetSalesSummaryOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetSalesSummaryOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesSummary(response: Response): Observable<GetSalesSummaryOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetSalesSummaryOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetSalesSummaryOutput.fromJS(resultData200) : new GetSalesSummaryOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetSalesSummaryOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getWorldMap(input: any): Observable<GetWorldMapOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetWorldMap?";
        if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetWorldMap(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetWorldMap(response_);
                } catch (e) {
                    return <Observable<GetWorldMapOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetWorldMapOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetWorldMap(response: Response): Observable<GetWorldMapOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetWorldMapOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetWorldMapOutput.fromJS(resultData200) : new GetWorldMapOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetWorldMapOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getServerStats(input: any): Observable<GetServerStatsOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetServerStats?";
        if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetServerStats(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetServerStats(response_);
                } catch (e) {
                    return <Observable<GetServerStatsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetServerStatsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetServerStats(response: Response): Observable<GetServerStatsOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetServerStatsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetServerStatsOutput.fromJS(resultData200) : new GetServerStatsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetServerStatsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getGeneralStats(input: any): Observable<GetGeneralStatsOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetGeneralStats?";
        if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetGeneralStats(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetGeneralStats(response_);
                } catch (e) {
                    return <Observable<GetGeneralStatsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetGeneralStatsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetGeneralStats(response: Response): Observable<GetGeneralStatsOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetGeneralStatsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetGeneralStatsOutput.fromJS(resultData200) : new GetGeneralStatsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetGeneralStatsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getDiscountForEdit(id: number): Observable<GetDiscount> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetDiscountForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDiscountForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDiscountForEdit(response_);
                } catch (e) {
                    return <Observable<GetDiscount>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDiscount>><any>Observable.throw(response_);
        });
    }

    protected processGetDiscountForEdit(response: Response): Observable<GetDiscount> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetDiscount = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDiscount.fromJS(resultData200) : new GetDiscount();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetDiscount>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateDiscount(input: CreateDiscountInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/CreateOrUpdateDiscount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateDiscount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateDiscount(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateDiscount(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createDiscount(input: CreateDiscountInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/CreateDiscount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateDiscount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateDiscount(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateDiscount(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateDiscount(input: CreateDiscountInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/UpdateDiscount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateDiscount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateDiscount(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateDiscount(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getLostReasonGraph(id: number, startDate: moment.Moment, endDate: moment.Moment): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetLostReasonGraph?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLostReasonGraph(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLostReasonGraph(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetLostReasonGraph(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getLeadSummaryGraph(id: number, startDate: moment.Moment, endDate: moment.Moment): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetLeadSummaryGraph?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLeadSummaryGraph(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLeadSummaryGraph(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetLeadSummaryGraph(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }
}

@Injectable()
export class TenantRegistrationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    registerTenant(input: RegisterTenantInput): Observable<RegisterTenantOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/RegisterTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processRegisterTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRegisterTenant(response_);
                } catch (e) {
                    return <Observable<RegisterTenantOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RegisterTenantOutput>><any>Observable.throw(response_);
        });
    }

    protected processRegisterTenant(response: Response): Observable<RegisterTenantOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: RegisterTenantOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterTenantOutput.fromJS(resultData200) : new RegisterTenantOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<RegisterTenantOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getEditionsForSelect(): Observable<EditionsSelectOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/GetEditionsForSelect";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditionsForSelect(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionsForSelect(response_);
                } catch (e) {
                    return <Observable<EditionsSelectOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<EditionsSelectOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionsForSelect(response: Response): Observable<EditionsSelectOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: EditionsSelectOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? EditionsSelectOutput.fromJS(resultData200) : new EditionsSelectOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<EditionsSelectOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getEdition(editionId: number): Observable<EditionSelectDto> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/GetEdition?";
        if (editionId !== undefined)
            url_ += "editionId=" + encodeURIComponent("" + editionId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEdition(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEdition(response_);
                } catch (e) {
                    return <Observable<EditionSelectDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<EditionSelectDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEdition(response: Response): Observable<EditionSelectDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: EditionSelectDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? EditionSelectDto.fromJS(resultData200) : new EditionSelectDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<EditionSelectDto>(<any>null);
    }
}

@Injectable()
export class TenantSettingsServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllSettings(): Observable<TenantSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/GetAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllSettings(response_);
                } catch (e) {
                    return <Observable<TenantSettingsEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantSettingsEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllSettings(response: Response): Observable<TenantSettingsEditDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: TenantSettingsEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantSettingsEditDto.fromJS(resultData200) : new TenantSettingsEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<TenantSettingsEditDto>(<any>null);
    }

    /**
     * @return Success
     */
    updateAllSettings(input: TenantSettingsEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/UpdateAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateAllSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateAllSettings(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateAllSettings(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    clearLogo(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/ClearLogo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processClearLogo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processClearLogo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processClearLogo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    clearCustomCss(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/ClearCustomCss";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processClearCustomCss(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processClearCustomCss(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processClearCustomCss(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    sendTestEmail(input: SendTestEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendTestEmail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendTestEmail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendTestEmail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TimingServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getTimezones(defaultTimezoneScope: DefaultTimezoneScope): Observable<ListResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/Timing/GetTimezones?";
        if (defaultTimezoneScope !== undefined)
            url_ += "DefaultTimezoneScope=" + encodeURIComponent("" + defaultTimezoneScope) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTimezones(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTimezones(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfNameValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfNameValueDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTimezones(response: Response): Observable<ListResultDtoOfNameValueDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfNameValueDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfNameValueDto.fromJS(resultData200) : new ListResultDtoOfNameValueDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfNameValueDto>(<any>null);
    }

    /**
     * @return Success
     */
    getTimezoneComboboxItems(selectedTimezoneId: string): Observable<ComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Timing/GetTimezoneComboboxItems?";
        if (selectedTimezoneId !== undefined)
            url_ += "SelectedTimezoneId=" + encodeURIComponent("" + selectedTimezoneId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTimezoneComboboxItems(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTimezoneComboboxItems(response_);
                } catch (e) {
                    return <Observable<ComboboxItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ComboboxItemDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetTimezoneComboboxItems(response: Response): Observable<ComboboxItemDto[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ComboboxItemDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ComboboxItemDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ComboboxItemDto[]>(<any>null);
    }
}

@Injectable()
export class TokenAuthServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    authenticate(model: AuthenticateModel): Observable<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processAuthenticate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAuthenticate(response_);
                } catch (e) {
                    return <Observable<AuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuthenticateResultModel>><any>Observable.throw(response_);
        });
    }

    protected processAuthenticate(response: Response): Observable<AuthenticateResultModel> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: AuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<AuthenticateResultModel>(<any>null);
    }

    /**
     * @return Success
     */
    sendTwoFactorAuthCode(model: SendTwoFactorAuthCodeModel): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/SendTwoFactorAuthCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendTwoFactorAuthCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendTwoFactorAuthCode(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendTwoFactorAuthCode(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    impersonatedAuthenticate(impersonationToken: string): Observable<ImpersonatedAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ImpersonatedAuthenticate?";
        if (impersonationToken !== undefined)
            url_ += "impersonationToken=" + encodeURIComponent("" + impersonationToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processImpersonatedAuthenticate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processImpersonatedAuthenticate(response_);
                } catch (e) {
                    return <Observable<ImpersonatedAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonatedAuthenticateResultModel>><any>Observable.throw(response_);
        });
    }

    protected processImpersonatedAuthenticate(response: Response): Observable<ImpersonatedAuthenticateResultModel> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ImpersonatedAuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonatedAuthenticateResultModel.fromJS(resultData200) : new ImpersonatedAuthenticateResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ImpersonatedAuthenticateResultModel>(<any>null);
    }

    /**
     * @return Success
     */
    linkedAccountAuthenticate(switchAccountToken: string): Observable<SwitchedAccountAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/LinkedAccountAuthenticate?";
        if (switchAccountToken !== undefined)
            url_ += "switchAccountToken=" + encodeURIComponent("" + switchAccountToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processLinkedAccountAuthenticate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLinkedAccountAuthenticate(response_);
                } catch (e) {
                    return <Observable<SwitchedAccountAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<SwitchedAccountAuthenticateResultModel>><any>Observable.throw(response_);
        });
    }

    protected processLinkedAccountAuthenticate(response: Response): Observable<SwitchedAccountAuthenticateResultModel> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: SwitchedAccountAuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SwitchedAccountAuthenticateResultModel.fromJS(resultData200) : new SwitchedAccountAuthenticateResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<SwitchedAccountAuthenticateResultModel>(<any>null);
    }

    /**
     * @return Success
     */
    getExternalAuthenticationProviders(): Observable<ExternalLoginProviderInfoModel[]> {
        let url_ = this.baseUrl + "/api/TokenAuth/GetExternalAuthenticationProviders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetExternalAuthenticationProviders(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetExternalAuthenticationProviders(response_);
                } catch (e) {
                    return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(response_);
        });
    }

    protected processGetExternalAuthenticationProviders(response: Response): Observable<ExternalLoginProviderInfoModel[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ExternalLoginProviderInfoModel[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ExternalLoginProviderInfoModel.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ExternalLoginProviderInfoModel[]>(<any>null);
    }

    /**
     * @return Success
     */
    externalAuthenticate(model: ExternalAuthenticateModel): Observable<ExternalAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalAuthenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processExternalAuthenticate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processExternalAuthenticate(response_);
                } catch (e) {
                    return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(response_);
        });
    }

    protected processExternalAuthenticate(response: Response): Observable<ExternalAuthenticateResultModel> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ExternalAuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ExternalAuthenticateResultModel.fromJS(resultData200) : new ExternalAuthenticateResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ExternalAuthenticateResultModel>(<any>null);
    }

    /**
     * @return Success
     */
    testNotification(message: string, severity: string): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/TestNotification?";
        if (message !== undefined)
            url_ += "message=" + encodeURIComponent("" + message) + "&"; 
        if (severity !== undefined)
            url_ += "severity=" + encodeURIComponent("" + severity) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processTestNotification(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processTestNotification(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processTestNotification(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getUsers(filter: string, permission: string, role: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUsers?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (permission !== undefined)
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&"; 
        if (role !== undefined)
            url_ += "Role=" + encodeURIComponent("" + role) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfUserListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfUserListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUsers(response: Response): Observable<PagedResultDtoOfUserListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfUserListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfUserListDto.fromJS(resultData200) : new PagedResultDtoOfUserListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfUserListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getUsersToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUsersToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUsersToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUsersToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUsersToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getUserForEdit(id: number): Observable<GetUserForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserForEdit(response_);
                } catch (e) {
                    return <Observable<GetUserForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetUserForEdit(response: Response): Observable<GetUserForEditOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetUserForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserForEditOutput.fromJS(resultData200) : new GetUserForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetUserForEditOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getUserPermissionsForEdit(id: number): Observable<GetUserPermissionsForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserPermissionsForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserPermissionsForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserPermissionsForEdit(response_);
                } catch (e) {
                    return <Observable<GetUserPermissionsForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserPermissionsForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetUserPermissionsForEdit(response: Response): Observable<GetUserPermissionsForEditOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetUserPermissionsForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserPermissionsForEditOutput.fromJS(resultData200) : new GetUserPermissionsForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetUserPermissionsForEditOutput>(<any>null);
    }

    /**
     * @return Success
     */
    resetUserSpecificPermissions(input: EntityDtoOfInt64): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ResetUserSpecificPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processResetUserSpecificPermissions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processResetUserSpecificPermissions(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processResetUserSpecificPermissions(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateUserPermissions(input: UpdateUserPermissionsInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UpdateUserPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateUserPermissions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateUserPermissions(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateUserPermissions(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateUser(input: CreateOrUpdateUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/CreateOrUpdateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateUser(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteUser(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/DeleteUser?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteUser(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    unlockUser(input: EntityDtoOfInt64): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UnlockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUnlockUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUnlockUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUnlockUser(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesCoordinator(userId: number): Observable<GetSalesCoordinator> {
        let url_ = this.baseUrl + "/api/services/app/User/GetSalesCoordinator?";
        if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesCoordinator(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesCoordinator(response_);
                } catch (e) {
                    return <Observable<GetSalesCoordinator>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetSalesCoordinator>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesCoordinator(response: Response): Observable<GetSalesCoordinator> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetSalesCoordinator = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetSalesCoordinator.fromJS(resultData200) : new GetSalesCoordinator();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetSalesCoordinator>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateSalesCoordinator(input: SalesCoordinatorInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/CreateOrUpdateSalesCoordinator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateSalesCoordinator(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateSalesCoordinator(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateSalesCoordinator(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createSalesCoordinator(input: SalesCoordinatorInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/CreateSalesCoordinator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateSalesCoordinator(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateSalesCoordinator(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateSalesCoordinator(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateSalesCoordinator(input: SalesCoordinatorInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UpdateSalesCoordinator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateSalesCoordinator(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateSalesCoordinator(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateSalesCoordinator(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class UserDesignationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getUserDesignation(filter: string): Observable<ListResultDtoOfUserDesignationListDto> {
        let url_ = this.baseUrl + "/api/services/app/UserDesignation/GetUserDesignation?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserDesignation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserDesignation(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfUserDesignationListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfUserDesignationListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUserDesignation(response: Response): Observable<ListResultDtoOfUserDesignationListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfUserDesignationListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfUserDesignationListDto.fromJS(resultData200) : new ListResultDtoOfUserDesignationListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfUserDesignationListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getUserDesignationForEdit(id: number): Observable<GetUserDesignation> {
        let url_ = this.baseUrl + "/api/services/app/UserDesignation/GetUserDesignationForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserDesignationForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserDesignationForEdit(response_);
                } catch (e) {
                    return <Observable<GetUserDesignation>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserDesignation>><any>Observable.throw(response_);
        });
    }

    protected processGetUserDesignationForEdit(response: Response): Observable<GetUserDesignation> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetUserDesignation = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserDesignation.fromJS(resultData200) : new GetUserDesignation();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetUserDesignation>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateUserDesignation(input: UserDesignationInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserDesignation/CreateOrUpdateUserDesignation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateUserDesignation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateUserDesignation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateUserDesignation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createUserDesignation(input: UserDesignationInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserDesignation/CreateUserDesignation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateUserDesignation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateUserDesignation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateUserDesignation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateUserDesignation(input: UserDesignationInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserDesignation/UpdateUserDesignation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateUserDesignation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateUserDesignation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateUserDesignation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteUserDesignation(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserDesignation/DeleteUserDesignation?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteUserDesignation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteUserDesignation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteUserDesignation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class UserLinkServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    linkToUser(input: LinkToUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/LinkToUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processLinkToUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLinkToUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processLinkToUser(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getLinkedUsers(maxResultCount: number, skipCount: number, sorting: string): Observable<PagedResultDtoOfLinkedUserDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/GetLinkedUsers?";
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLinkedUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLinkedUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfLinkedUserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfLinkedUserDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLinkedUsers(response: Response): Observable<PagedResultDtoOfLinkedUserDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfLinkedUserDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfLinkedUserDto.fromJS(resultData200) : new PagedResultDtoOfLinkedUserDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfLinkedUserDto>(<any>null);
    }

    /**
     * @return Success
     */
    getRecentlyUsedLinkedUsers(): Observable<ListResultDtoOfLinkedUserDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/GetRecentlyUsedLinkedUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRecentlyUsedLinkedUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRecentlyUsedLinkedUsers(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfLinkedUserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfLinkedUserDto>><any>Observable.throw(response_);
        });
    }

    protected processGetRecentlyUsedLinkedUsers(response: Response): Observable<ListResultDtoOfLinkedUserDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfLinkedUserDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfLinkedUserDto.fromJS(resultData200) : new ListResultDtoOfLinkedUserDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfLinkedUserDto>(<any>null);
    }

    /**
     * @return Success
     */
    unlinkUser(input: UnlinkUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/UnlinkUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUnlinkUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUnlinkUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUnlinkUser(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class UserLoginServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getRecentUserLoginAttempts(): Observable<ListResultDtoOfUserLoginAttemptDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLogin/GetRecentUserLoginAttempts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRecentUserLoginAttempts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRecentUserLoginAttempts(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfUserLoginAttemptDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfUserLoginAttemptDto>><any>Observable.throw(response_);
        });
    }

    protected processGetRecentUserLoginAttempts(response: Response): Observable<ListResultDtoOfUserLoginAttemptDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfUserLoginAttemptDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfUserLoginAttemptDto.fromJS(resultData200) : new ListResultDtoOfUserLoginAttemptDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfUserLoginAttemptDto>(<any>null);
    }
}

@Injectable()
export class ViewServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getViews(filter: string): Observable<ListResultDtoOfViewListDto> {
        let url_ = this.baseUrl + "/api/services/app/View/GetViews?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetViews(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetViews(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfViewListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfViewListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetViews(response: Response): Observable<ListResultDtoOfViewListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfViewListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfViewListDto.fromJS(resultData200) : new ListResultDtoOfViewListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfViewListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getViewForEdit(id: number): Observable<GetViews> {
        let url_ = this.baseUrl + "/api/services/app/View/GetViewForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetViewForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetViewForEdit(response_);
                } catch (e) {
                    return <Observable<GetViews>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetViews>><any>Observable.throw(response_);
        });
    }

    protected processGetViewForEdit(response: Response): Observable<GetViews> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetViews = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetViews.fromJS(resultData200) : new GetViews();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetViews>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateView(input: ViewInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/View/CreateOrUpdateView";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateView(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateView(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateView(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createView(input: ViewInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/View/CreateView";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateView(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateView(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateView(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateView(input: ViewInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/View/UpdateView";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateView(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateView(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateView(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteView(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/View/GetDeleteView?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteView(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteView(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteView(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getGridColumns(id: number): Observable<GetColumnList> {
        let url_ = this.baseUrl + "/api/services/app/View/GetGridColumns?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetGridColumns(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetGridColumns(response_);
                } catch (e) {
                    return <Observable<GetColumnList>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetColumnList>><any>Observable.throw(response_);
        });
    }

    protected processGetGridColumns(response: Response): Observable<GetColumnList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetColumnList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetColumnList.fromJS(resultData200) : new GetColumnList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetColumnList>(<any>null);
    }

    /**
     * @return Success
     */
    getGridDatas(id: number): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/View/GetGridDatas?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetGridDatas(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetGridDatas(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetGridDatas(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getReportColumn(filter: string): Observable<ListResultDtoOfReportColumnListDto> {
        let url_ = this.baseUrl + "/api/services/app/View/GetReportColumn?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetReportColumn(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetReportColumn(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfReportColumnListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfReportColumnListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetReportColumn(response: Response): Observable<ListResultDtoOfReportColumnListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfReportColumnListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfReportColumnListDto.fromJS(resultData200) : new ListResultDtoOfReportColumnListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfReportColumnListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getReportColumnForEdit(id: number): Observable<GetReportColumn> {
        let url_ = this.baseUrl + "/api/services/app/View/GetReportColumnForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetReportColumnForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetReportColumnForEdit(response_);
                } catch (e) {
                    return <Observable<GetReportColumn>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetReportColumn>><any>Observable.throw(response_);
        });
    }

    protected processGetReportColumnForEdit(response: Response): Observable<GetReportColumn> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetReportColumn = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetReportColumn.fromJS(resultData200) : new GetReportColumn();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetReportColumn>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateReportColumn(input: ReportColumnInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/View/CreateOrUpdateReportColumn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateReportColumn(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateReportColumn(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateReportColumn(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createReportColumn(input: ReportColumnInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/View/CreateReportColumn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateReportColumn(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateReportColumn(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateReportColumn(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateReportColumn(input: ReportColumnInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/View/UpdateReportColumn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateReportColumn(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateReportColumn(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateReportColumn(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteReportColumn(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/View/DeleteReportColumn?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteReportColumn(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteReportColumn(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteReportColumn(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateViewColumns(input: UpdateViewInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/View/UpdateViewColumns";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateViewColumns(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateViewColumns(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateViewColumns(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class WebLogServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getLatestWebLogs(): Observable<GetLatestWebLogsOutput> {
        let url_ = this.baseUrl + "/api/services/app/WebLog/GetLatestWebLogs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLatestWebLogs(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLatestWebLogs(response_);
                } catch (e) {
                    return <Observable<GetLatestWebLogsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLatestWebLogsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetLatestWebLogs(response: Response): Observable<GetLatestWebLogsOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetLatestWebLogsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLatestWebLogsOutput.fromJS(resultData200) : new GetLatestWebLogsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetLatestWebLogsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    downloadWebLogs(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/WebLog/DownloadWebLogs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDownloadWebLogs(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDownloadWebLogs(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processDownloadWebLogs(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class YbafcoServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getYbafco(filter: string): Observable<ListResultDtoOfYbafcoList> {
        let url_ = this.baseUrl + "/api/services/app/Ybafco/GetYbafco?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetYbafco(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetYbafco(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfYbafcoList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfYbafcoList>><any>Observable.throw(response_);
        });
    }

    protected processGetYbafco(response: Response): Observable<ListResultDtoOfYbafcoList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfYbafcoList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfYbafcoList.fromJS(resultData200) : new ListResultDtoOfYbafcoList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfYbafcoList>(<any>null);
    }

    /**
     * @return Success
     */
    getYbafcoForEdit(id: number): Observable<GetYbafco> {
        let url_ = this.baseUrl + "/api/services/app/Ybafco/GetYbafcoForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetYbafcoForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetYbafcoForEdit(response_);
                } catch (e) {
                    return <Observable<GetYbafco>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetYbafco>><any>Observable.throw(response_);
        });
    }

    protected processGetYbafcoForEdit(response: Response): Observable<GetYbafco> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetYbafco = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetYbafco.fromJS(resultData200) : new GetYbafco();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetYbafco>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateYbafco(input: CreateYbafcoInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Ybafco/CreateOrUpdateYbafco";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateYbafco(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateYbafco(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateYbafco(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createYbafcoAsync(input: CreateYbafcoInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Ybafco/CreateYbafcoAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateYbafcoAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateYbafcoAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateYbafcoAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateYbafcoAsync(input: CreateYbafcoInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Ybafco/UpdateYbafcoAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateYbafcoAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateYbafcoAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateYbafcoAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteYbafco(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Ybafco/GetDeleteYbafco?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteYbafco(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteYbafco(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteYbafco(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getYbafcoToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Ybafco/GetYbafcoToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetYbafcoToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetYbafcoToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetYbafcoToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

export class IsTenantAvailableInput implements IIsTenantAvailableInput {
    tenancyName: string;

    constructor(data?: IIsTenantAvailableInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
        }
    }

    static fromJS(data: any): IsTenantAvailableInput {
        let result = new IsTenantAvailableInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        return data; 
    }
}

export interface IIsTenantAvailableInput {
    tenancyName: string;
}

export class IsTenantAvailableOutput implements IIsTenantAvailableOutput {
    state: IsTenantAvailableOutputState;
    tenantId: number;

    constructor(data?: IIsTenantAvailableOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.state = data["state"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): IsTenantAvailableOutput {
        let result = new IsTenantAvailableOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IIsTenantAvailableOutput {
    state: IsTenantAvailableOutputState;
    tenantId: number;
}

export class RegisterInput implements IRegisterInput {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    password: string;
    captchaResponse: string;

    constructor(data?: IRegisterInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.password = data["password"];
            this.captchaResponse = data["captchaResponse"];
        }
    }

    static fromJS(data: any): RegisterInput {
        let result = new RegisterInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        data["captchaResponse"] = this.captchaResponse;
        return data; 
    }
}

export interface IRegisterInput {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    password: string;
    captchaResponse: string;
}

export class RegisterOutput implements IRegisterOutput {
    canLogin: boolean;

    constructor(data?: IRegisterOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.canLogin = data["canLogin"];
        }
    }

    static fromJS(data: any): RegisterOutput {
        let result = new RegisterOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        return data; 
    }
}

export interface IRegisterOutput {
    canLogin: boolean;
}

export class SendPasswordResetCodeInput implements ISendPasswordResetCodeInput {
    emailAddress: string;

    constructor(data?: ISendPasswordResetCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): SendPasswordResetCodeInput {
        let result = new SendPasswordResetCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data; 
    }
}

export interface ISendPasswordResetCodeInput {
    emailAddress: string;
}

export class ResetPasswordInput implements IResetPasswordInput {
    userId: number;
    resetCode: string;
    password: string;
    returnUrl: string;
    singleSignIn: string;

    constructor(data?: IResetPasswordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.resetCode = data["resetCode"];
            this.password = data["password"];
            this.returnUrl = data["returnUrl"];
            this.singleSignIn = data["singleSignIn"];
        }
    }

    static fromJS(data: any): ResetPasswordInput {
        let result = new ResetPasswordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["resetCode"] = this.resetCode;
        data["password"] = this.password;
        data["returnUrl"] = this.returnUrl;
        data["singleSignIn"] = this.singleSignIn;
        return data; 
    }
}

export interface IResetPasswordInput {
    userId: number;
    resetCode: string;
    password: string;
    returnUrl: string;
    singleSignIn: string;
}

export class ResetPasswordOutput implements IResetPasswordOutput {
    canLogin: boolean;
    userName: string;

    constructor(data?: IResetPasswordOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.canLogin = data["canLogin"];
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): ResetPasswordOutput {
        let result = new ResetPasswordOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface IResetPasswordOutput {
    canLogin: boolean;
    userName: string;
}

export class SendEmailActivationLinkInput implements ISendEmailActivationLinkInput {
    emailAddress: string;

    constructor(data?: ISendEmailActivationLinkInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): SendEmailActivationLinkInput {
        let result = new SendEmailActivationLinkInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data; 
    }
}

export interface ISendEmailActivationLinkInput {
    emailAddress: string;
}

export class ActivateEmailInput implements IActivateEmailInput {
    userId: number;
    confirmationCode: string;

    constructor(data?: IActivateEmailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.confirmationCode = data["confirmationCode"];
        }
    }

    static fromJS(data: any): ActivateEmailInput {
        let result = new ActivateEmailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["confirmationCode"] = this.confirmationCode;
        return data; 
    }
}

export interface IActivateEmailInput {
    userId: number;
    confirmationCode: string;
}

export class ImpersonateInput implements IImpersonateInput {
    tenantId: number;
    userId: number;

    constructor(data?: IImpersonateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): ImpersonateInput {
        let result = new ImpersonateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IImpersonateInput {
    tenantId: number;
    userId: number;
}

export class ImpersonateOutput implements IImpersonateOutput {
    impersonationToken: string;
    tenancyName: string;

    constructor(data?: IImpersonateOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.impersonationToken = data["impersonationToken"];
            this.tenancyName = data["tenancyName"];
        }
    }

    static fromJS(data: any): ImpersonateOutput {
        let result = new ImpersonateOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["impersonationToken"] = this.impersonationToken;
        data["tenancyName"] = this.tenancyName;
        return data; 
    }
}

export interface IImpersonateOutput {
    impersonationToken: string;
    tenancyName: string;
}

export class SwitchToLinkedAccountInput implements ISwitchToLinkedAccountInput {
    targetTenantId: number;
    targetUserId: number;

    constructor(data?: ISwitchToLinkedAccountInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.targetTenantId = data["targetTenantId"];
            this.targetUserId = data["targetUserId"];
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountInput {
        let result = new SwitchToLinkedAccountInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetTenantId"] = this.targetTenantId;
        data["targetUserId"] = this.targetUserId;
        return data; 
    }
}

export interface ISwitchToLinkedAccountInput {
    targetTenantId: number;
    targetUserId: number;
}

export class SwitchToLinkedAccountOutput implements ISwitchToLinkedAccountOutput {
    switchAccountToken: string;
    tenancyName: string;

    constructor(data?: ISwitchToLinkedAccountOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.switchAccountToken = data["switchAccountToken"];
            this.tenancyName = data["tenancyName"];
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountOutput {
        let result = new SwitchToLinkedAccountOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["switchAccountToken"] = this.switchAccountToken;
        data["tenancyName"] = this.tenancyName;
        return data; 
    }
}

export interface ISwitchToLinkedAccountOutput {
    switchAccountToken: string;
    tenancyName: string;
}

export class ListResultDtoOfActivityListDto implements IListResultDtoOfActivityListDto {
    items: ActivityListDto[];

    constructor(data?: IListResultDtoOfActivityListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ActivityListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfActivityListDto {
        let result = new ListResultDtoOfActivityListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfActivityListDto {
    items: ActivityListDto[];
}

export class ActivityListDto implements IActivityListDto {
    id: number;
    activityName: string;
    activityCode: string;
    colorCode: string;

    constructor(data?: IActivityListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.activityName = data["activityName"];
            this.activityCode = data["activityCode"];
            this.colorCode = data["colorCode"];
        }
    }

    static fromJS(data: any): ActivityListDto {
        let result = new ActivityListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["activityName"] = this.activityName;
        data["activityCode"] = this.activityCode;
        data["colorCode"] = this.colorCode;
        return data; 
    }
}

export interface IActivityListDto {
    id: number;
    activityName: string;
    activityCode: string;
    colorCode: string;
}

export class GetActivity implements IGetActivity {
    activity: ActivityListDto;

    constructor(data?: IGetActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.activity = data["activity"] ? ActivityListDto.fromJS(data["activity"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetActivity {
        let result = new GetActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activity"] = this.activity ? this.activity.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetActivity {
    activity: ActivityListDto;
}

export class ActivityInputDto implements IActivityInputDto {
    id: number;
    activityName: string;
    activityCode: string;
    colorCode: string;

    constructor(data?: IActivityInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.activityName = data["activityName"];
            this.activityCode = data["activityCode"];
            this.colorCode = data["colorCode"];
        }
    }

    static fromJS(data: any): ActivityInputDto {
        let result = new ActivityInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["activityName"] = this.activityName;
        data["activityCode"] = this.activityCode;
        data["colorCode"] = this.colorCode;
        return data; 
    }
}

export interface IActivityInputDto {
    id: number;
    activityName: string;
    activityCode: string;
    colorCode: string;
}

export class FileDto implements IFileDto {
    fileName: string;
    fileType: string;
    fileToken: string;

    constructor(data?: IFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileName = data["fileName"];
            this.fileType = data["fileType"];
            this.fileToken = data["fileToken"];
        }
    }

    static fromJS(data: any): FileDto {
        let result = new FileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileType"] = this.fileType;
        data["fileToken"] = this.fileToken;
        return data; 
    }
}

export interface IFileDto {
    fileName: string;
    fileType: string;
    fileToken: string;
}

export class ListResultDtoOfAttributeGroupListDto implements IListResultDtoOfAttributeGroupListDto {
    items: AttributeGroupListDto[];

    constructor(data?: IListResultDtoOfAttributeGroupListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(AttributeGroupListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfAttributeGroupListDto {
        let result = new ListResultDtoOfAttributeGroupListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfAttributeGroupListDto {
    items: AttributeGroupListDto[];
}

export class AttributeGroupListDto implements IAttributeGroupListDto {
    id: number;
    attributeGroupName: string;
    attributeGroupCode: string;

    constructor(data?: IAttributeGroupListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.attributeGroupName = data["attributeGroupName"];
            this.attributeGroupCode = data["attributeGroupCode"];
        }
    }

    static fromJS(data: any): AttributeGroupListDto {
        let result = new AttributeGroupListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["attributeGroupName"] = this.attributeGroupName;
        data["attributeGroupCode"] = this.attributeGroupCode;
        return data; 
    }
}

export interface IAttributeGroupListDto {
    id: number;
    attributeGroupName: string;
    attributeGroupCode: string;
}

export class GetAttributeGroup implements IGetAttributeGroup {
    attributeGroup: CreateAttributeGroupInput;
    attributeGroupDetails: AttributeGroupDetailListDto[];

    constructor(data?: IGetAttributeGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.attributeGroup = data["attributeGroup"] ? CreateAttributeGroupInput.fromJS(data["attributeGroup"]) : <any>undefined;
            if (data["attributeGroupDetails"] && data["attributeGroupDetails"].constructor === Array) {
                this.attributeGroupDetails = [];
                for (let item of data["attributeGroupDetails"])
                    this.attributeGroupDetails.push(AttributeGroupDetailListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetAttributeGroup {
        let result = new GetAttributeGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attributeGroup"] = this.attributeGroup ? this.attributeGroup.toJSON() : <any>undefined;
        if (this.attributeGroupDetails && this.attributeGroupDetails.constructor === Array) {
            data["attributeGroupDetails"] = [];
            for (let item of this.attributeGroupDetails)
                data["attributeGroupDetails"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetAttributeGroup {
    attributeGroup: CreateAttributeGroupInput;
    attributeGroupDetails: AttributeGroupDetailListDto[];
}

export class CreateAttributeGroupInput implements ICreateAttributeGroupInput {
    id: number;
    attributeGroupName: string;
    attributeGroupCode: string;

    constructor(data?: ICreateAttributeGroupInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.attributeGroupName = data["attributeGroupName"];
            this.attributeGroupCode = data["attributeGroupCode"];
        }
    }

    static fromJS(data: any): CreateAttributeGroupInput {
        let result = new CreateAttributeGroupInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["attributeGroupName"] = this.attributeGroupName;
        data["attributeGroupCode"] = this.attributeGroupCode;
        return data; 
    }
}

export interface ICreateAttributeGroupInput {
    id: number;
    attributeGroupName: string;
    attributeGroupCode: string;
}

export class AttributeGroupDetailListDto implements IAttributeGroupDetailListDto {
    id: number;
    attributeGroupId: number;
    attributeId: number;
    attributeGroupName: string;
    attributeName: string;
    attributeCode: string;
    imgPath: string;
    selected: boolean;

    constructor(data?: IAttributeGroupDetailListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.attributeGroupId = data["attributeGroupId"];
            this.attributeId = data["attributeId"];
            this.attributeGroupName = data["attributeGroupName"];
            this.attributeName = data["attributeName"];
            this.attributeCode = data["attributeCode"];
            this.imgPath = data["imgPath"];
            this.selected = data["selected"];
        }
    }

    static fromJS(data: any): AttributeGroupDetailListDto {
        let result = new AttributeGroupDetailListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["attributeGroupId"] = this.attributeGroupId;
        data["attributeId"] = this.attributeId;
        data["attributeGroupName"] = this.attributeGroupName;
        data["attributeName"] = this.attributeName;
        data["attributeCode"] = this.attributeCode;
        data["imgPath"] = this.imgPath;
        data["selected"] = this.selected;
        return data; 
    }
}

export interface IAttributeGroupDetailListDto {
    id: number;
    attributeGroupId: number;
    attributeId: number;
    attributeGroupName: string;
    attributeName: string;
    attributeCode: string;
    imgPath: string;
    selected: boolean;
}

export class ListResultDtoOfAttributeGroupDetailList implements IListResultDtoOfAttributeGroupDetailList {
    items: AttributeGroupDetailList[];

    constructor(data?: IListResultDtoOfAttributeGroupDetailList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(AttributeGroupDetailList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfAttributeGroupDetailList {
        let result = new ListResultDtoOfAttributeGroupDetailList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfAttributeGroupDetailList {
    items: AttributeGroupDetailList[];
}

export class AttributeGroupDetailList implements IAttributeGroupDetailList {
    id: number;
    attributeGroupId: number;
    attributeGroupName: string;
    attributeId: number;
    attributeName: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: IAttributeGroupDetailList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.attributeGroupId = data["attributeGroupId"];
            this.attributeGroupName = data["attributeGroupName"];
            this.attributeId = data["attributeId"];
            this.attributeName = data["attributeName"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): AttributeGroupDetailList {
        let result = new AttributeGroupDetailList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["attributeGroupId"] = this.attributeGroupId;
        data["attributeGroupName"] = this.attributeGroupName;
        data["attributeId"] = this.attributeId;
        data["attributeName"] = this.attributeName;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IAttributeGroupDetailList {
    id: number;
    attributeGroupId: number;
    attributeGroupName: string;
    attributeId: number;
    attributeName: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class AttributeGroupDetailInput implements IAttributeGroupDetailInput {
    id: number;
    attributeGroupId: number;
    attributeId: number;

    constructor(data?: IAttributeGroupDetailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.attributeGroupId = data["attributeGroupId"];
            this.attributeId = data["attributeId"];
        }
    }

    static fromJS(data: any): AttributeGroupDetailInput {
        let result = new AttributeGroupDetailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["attributeGroupId"] = this.attributeGroupId;
        data["attributeId"] = this.attributeId;
        return data; 
    }
}

export interface IAttributeGroupDetailInput {
    id: number;
    attributeGroupId: number;
    attributeId: number;
}

export class PagedResultDtoOfAuditLogListDto implements IPagedResultDtoOfAuditLogListDto {
    totalCount: number;
    items: AuditLogListDto[];

    constructor(data?: IPagedResultDtoOfAuditLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(AuditLogListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfAuditLogListDto {
        let result = new PagedResultDtoOfAuditLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfAuditLogListDto {
    totalCount: number;
    items: AuditLogListDto[];
}

export class AuditLogListDto implements IAuditLogListDto {
    userId: number;
    userName: string;
    impersonatorTenantId: number;
    impersonatorUserId: number;
    serviceName: string;
    methodName: string;
    parameters: string;
    executionTime: moment.Moment;
    executionDuration: number;
    clientIpAddress: string;
    clientName: string;
    browserInfo: string;
    exception: string;
    customData: string;
    id: number;

    constructor(data?: IAuditLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.userName = data["userName"];
            this.impersonatorTenantId = data["impersonatorTenantId"];
            this.impersonatorUserId = data["impersonatorUserId"];
            this.serviceName = data["serviceName"];
            this.methodName = data["methodName"];
            this.parameters = data["parameters"];
            this.executionTime = data["executionTime"] ? moment(data["executionTime"].toString()) : <any>undefined;
            this.executionDuration = data["executionDuration"];
            this.clientIpAddress = data["clientIpAddress"];
            this.clientName = data["clientName"];
            this.browserInfo = data["browserInfo"];
            this.exception = data["exception"];
            this.customData = data["customData"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): AuditLogListDto {
        let result = new AuditLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["impersonatorTenantId"] = this.impersonatorTenantId;
        data["impersonatorUserId"] = this.impersonatorUserId;
        data["serviceName"] = this.serviceName;
        data["methodName"] = this.methodName;
        data["parameters"] = this.parameters;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : <any>undefined;
        data["executionDuration"] = this.executionDuration;
        data["clientIpAddress"] = this.clientIpAddress;
        data["clientName"] = this.clientName;
        data["browserInfo"] = this.browserInfo;
        data["exception"] = this.exception;
        data["customData"] = this.customData;
        data["id"] = this.id;
        return data; 
    }
}

export interface IAuditLogListDto {
    userId: number;
    userName: string;
    impersonatorTenantId: number;
    impersonatorUserId: number;
    serviceName: string;
    methodName: string;
    parameters: string;
    executionTime: moment.Moment;
    executionDuration: number;
    clientIpAddress: string;
    clientName: string;
    browserInfo: string;
    exception: string;
    customData: string;
    id: number;
}

export class ListResultDtoOfCacheDto implements IListResultDtoOfCacheDto {
    items: CacheDto[];

    constructor(data?: IListResultDtoOfCacheDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(CacheDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfCacheDto {
        let result = new ListResultDtoOfCacheDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfCacheDto {
    items: CacheDto[];
}

export class CacheDto implements ICacheDto {
    name: string;

    constructor(data?: ICacheDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CacheDto {
        let result = new CacheDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ICacheDto {
    name: string;
}

export class EntityDtoOfString implements IEntityDtoOfString {
    id: string;

    constructor(data?: IEntityDtoOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfString {
        let result = new EntityDtoOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDtoOfString {
    id: string;
}

export class GetUserChatFriendsWithSettingsOutput implements IGetUserChatFriendsWithSettingsOutput {
    serverTime: moment.Moment;
    friends: FriendDto[];

    constructor(data?: IGetUserChatFriendsWithSettingsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.serverTime = data["serverTime"] ? moment(data["serverTime"].toString()) : <any>undefined;
            if (data["friends"] && data["friends"].constructor === Array) {
                this.friends = [];
                for (let item of data["friends"])
                    this.friends.push(FriendDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserChatFriendsWithSettingsOutput {
        let result = new GetUserChatFriendsWithSettingsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serverTime"] = this.serverTime ? this.serverTime.toISOString() : <any>undefined;
        if (this.friends && this.friends.constructor === Array) {
            data["friends"] = [];
            for (let item of this.friends)
                data["friends"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetUserChatFriendsWithSettingsOutput {
    serverTime: moment.Moment;
    friends: FriendDto[];
}

export class FriendDto implements IFriendDto {
    friendUserId: number;
    friendTenantId: number;
    friendUserName: string;
    friendTenancyName: string;
    friendProfilePictureId: string;
    unreadMessageCount: number;
    isOnline: boolean;
    state: FriendDtoState;

    constructor(data?: IFriendDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.friendUserId = data["friendUserId"];
            this.friendTenantId = data["friendTenantId"];
            this.friendUserName = data["friendUserName"];
            this.friendTenancyName = data["friendTenancyName"];
            this.friendProfilePictureId = data["friendProfilePictureId"];
            this.unreadMessageCount = data["unreadMessageCount"];
            this.isOnline = data["isOnline"];
            this.state = data["state"];
        }
    }

    static fromJS(data: any): FriendDto {
        let result = new FriendDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["friendUserId"] = this.friendUserId;
        data["friendTenantId"] = this.friendTenantId;
        data["friendUserName"] = this.friendUserName;
        data["friendTenancyName"] = this.friendTenancyName;
        data["friendProfilePictureId"] = this.friendProfilePictureId;
        data["unreadMessageCount"] = this.unreadMessageCount;
        data["isOnline"] = this.isOnline;
        data["state"] = this.state;
        return data; 
    }
}

export interface IFriendDto {
    friendUserId: number;
    friendTenantId: number;
    friendUserName: string;
    friendTenancyName: string;
    friendProfilePictureId: string;
    unreadMessageCount: number;
    isOnline: boolean;
    state: FriendDtoState;
}

export class ListResultDtoOfChatMessageDto implements IListResultDtoOfChatMessageDto {
    items: ChatMessageDto[];

    constructor(data?: IListResultDtoOfChatMessageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ChatMessageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfChatMessageDto {
        let result = new ListResultDtoOfChatMessageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfChatMessageDto {
    items: ChatMessageDto[];
}

export class ChatMessageDto implements IChatMessageDto {
    userId: number;
    tenantId: number;
    targetUserId: number;
    targetTenantId: number;
    side: ChatMessageDtoSide;
    readState: ChatMessageDtoReadState;
    message: string;
    creationTime: moment.Moment;
    id: number;

    constructor(data?: IChatMessageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
            this.targetUserId = data["targetUserId"];
            this.targetTenantId = data["targetTenantId"];
            this.side = data["side"];
            this.readState = data["readState"];
            this.message = data["message"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ChatMessageDto {
        let result = new ChatMessageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        data["targetUserId"] = this.targetUserId;
        data["targetTenantId"] = this.targetTenantId;
        data["side"] = this.side;
        data["readState"] = this.readState;
        data["message"] = this.message;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IChatMessageDto {
    userId: number;
    tenantId: number;
    targetUserId: number;
    targetTenantId: number;
    side: ChatMessageDtoSide;
    readState: ChatMessageDtoReadState;
    message: string;
    creationTime: moment.Moment;
    id: number;
}

export class MarkAllUnreadMessagesOfUserAsReadInput implements IMarkAllUnreadMessagesOfUserAsReadInput {
    tenantId: number;
    userId: number;

    constructor(data?: IMarkAllUnreadMessagesOfUserAsReadInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): MarkAllUnreadMessagesOfUserAsReadInput {
        let result = new MarkAllUnreadMessagesOfUserAsReadInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IMarkAllUnreadMessagesOfUserAsReadInput {
    tenantId: number;
    userId: number;
}

export class PagedResultDtoOfCityList implements IPagedResultDtoOfCityList {
    totalCount: number;
    items: CityList[];

    constructor(data?: IPagedResultDtoOfCityList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(CityList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfCityList {
        let result = new PagedResultDtoOfCityList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfCityList {
    totalCount: number;
    items: CityList[];
}

export class CityList implements ICityList {
    id: number;
    cityCode: string;
    cityName: string;
    countryName: string;
    countryId: number;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: ICityList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.cityCode = data["cityCode"];
            this.cityName = data["cityName"];
            this.countryName = data["countryName"];
            this.countryId = data["countryId"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): CityList {
        let result = new CityList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cityCode"] = this.cityCode;
        data["cityName"] = this.cityName;
        data["countryName"] = this.countryName;
        data["countryId"] = this.countryId;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface ICityList {
    id: number;
    cityCode: string;
    cityName: string;
    countryName: string;
    countryId: number;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class GetCity implements IGetCity {
    myCity: CityList;

    constructor(data?: IGetCity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.myCity = data["myCity"] ? CityList.fromJS(data["myCity"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCity {
        let result = new GetCity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["myCity"] = this.myCity ? this.myCity.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetCity {
    myCity: CityList;
}

export class CreateCityInput implements ICreateCityInput {
    id: number;
    cityCode: string;
    cityName: string;
    countryId: number;

    constructor(data?: ICreateCityInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.cityCode = data["cityCode"];
            this.cityName = data["cityName"];
            this.countryId = data["countryId"];
        }
    }

    static fromJS(data: any): CreateCityInput {
        let result = new CreateCityInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cityCode"] = this.cityCode;
        data["cityName"] = this.cityName;
        data["countryId"] = this.countryId;
        return data; 
    }
}

export interface ICreateCityInput {
    id: number;
    cityCode: string;
    cityName: string;
    countryId: number;
}

export class ListResultDtoOfCollectionListDto implements IListResultDtoOfCollectionListDto {
    items: CollectionListDto[];

    constructor(data?: IListResultDtoOfCollectionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(CollectionListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfCollectionListDto {
        let result = new ListResultDtoOfCollectionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfCollectionListDto {
    items: CollectionListDto[];
}

export class CollectionListDto implements ICollectionListDto {
    id: number;
    collectionCode: string;
    collectionName: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: ICollectionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.collectionCode = data["collectionCode"];
            this.collectionName = data["collectionName"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): CollectionListDto {
        let result = new CollectionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["collectionCode"] = this.collectionCode;
        data["collectionName"] = this.collectionName;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface ICollectionListDto {
    id: number;
    collectionCode: string;
    collectionName: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class GetCollection implements IGetCollection {
    collections: CollectionListDto;

    constructor(data?: IGetCollection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.collections = data["collections"] ? CollectionListDto.fromJS(data["collections"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCollection {
        let result = new GetCollection();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["collections"] = this.collections ? this.collections.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetCollection {
    collections: CollectionListDto;
}

export class CreateCollectionInput implements ICreateCollectionInput {
    id: number;
    collectionCode: string;
    collectionName: string;

    constructor(data?: ICreateCollectionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.collectionCode = data["collectionCode"];
            this.collectionName = data["collectionName"];
        }
    }

    static fromJS(data: any): CreateCollectionInput {
        let result = new CreateCollectionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["collectionCode"] = this.collectionCode;
        data["collectionName"] = this.collectionName;
        return data; 
    }
}

export interface ICreateCollectionInput {
    id: number;
    collectionCode: string;
    collectionName: string;
}

export class ListResultDtoOfColorCodeList implements IListResultDtoOfColorCodeList {
    items: ColorCodeList[];

    constructor(data?: IListResultDtoOfColorCodeList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ColorCodeList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfColorCodeList {
        let result = new ListResultDtoOfColorCodeList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfColorCodeList {
    items: ColorCodeList[];
}

export class ColorCodeList implements IColorCodeList {
    id: number;
    component: string;
    code: string;
    color: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: IColorCodeList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.component = data["component"];
            this.code = data["code"];
            this.color = data["color"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): ColorCodeList {
        let result = new ColorCodeList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["component"] = this.component;
        data["code"] = this.code;
        data["color"] = this.color;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IColorCodeList {
    id: number;
    component: string;
    code: string;
    color: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class GetColorCode implements IGetColorCode {
    colors: ColorCodeList;

    constructor(data?: IGetColorCode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.colors = data["colors"] ? ColorCodeList.fromJS(data["colors"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetColorCode {
        let result = new GetColorCode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["colors"] = this.colors ? this.colors.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetColorCode {
    colors: ColorCodeList;
}

export class CreateColorCodeInput implements ICreateColorCodeInput {
    id: number;
    component: string;
    code: string;
    color: string;

    constructor(data?: ICreateColorCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.component = data["component"];
            this.code = data["code"];
            this.color = data["color"];
        }
    }

    static fromJS(data: any): CreateColorCodeInput {
        let result = new CreateColorCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["component"] = this.component;
        data["code"] = this.code;
        data["color"] = this.color;
        return data; 
    }
}

export interface ICreateColorCodeInput {
    id: number;
    component: string;
    code: string;
    color: string;
}

export class ListResultDtoOfSubscribableEditionComboboxItemDto implements IListResultDtoOfSubscribableEditionComboboxItemDto {
    items: SubscribableEditionComboboxItemDto[];

    constructor(data?: IListResultDtoOfSubscribableEditionComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(SubscribableEditionComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfSubscribableEditionComboboxItemDto {
        let result = new ListResultDtoOfSubscribableEditionComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfSubscribableEditionComboboxItemDto {
    items: SubscribableEditionComboboxItemDto[];
}

export class SubscribableEditionComboboxItemDto implements ISubscribableEditionComboboxItemDto {
    isFree: boolean;
    value: string;
    displayText: string;
    isSelected: boolean;

    constructor(data?: ISubscribableEditionComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isFree = data["isFree"];
            this.value = data["value"];
            this.displayText = data["displayText"];
            this.isSelected = data["isSelected"];
        }
    }

    static fromJS(data: any): SubscribableEditionComboboxItemDto {
        let result = new SubscribableEditionComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isFree"] = this.isFree;
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        data["isSelected"] = this.isSelected;
        return data; 
    }
}

export interface ISubscribableEditionComboboxItemDto {
    isFree: boolean;
    value: string;
    displayText: string;
    isSelected: boolean;
}

export class FindUsersInput implements IFindUsersInput {
    tenantId: number;
    maxResultCount: number;
    skipCount: number;
    filter: string;

    constructor(data?: IFindUsersInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
            this.filter = data["filter"];
        }
    }

    static fromJS(data: any): FindUsersInput {
        let result = new FindUsersInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["filter"] = this.filter;
        return data; 
    }
}

export interface IFindUsersInput {
    tenantId: number;
    maxResultCount: number;
    skipCount: number;
    filter: string;
}

export class PagedResultDtoOfNameValueDto implements IPagedResultDtoOfNameValueDto {
    totalCount: number;
    items: NameValueDto[];

    constructor(data?: IPagedResultDtoOfNameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfNameValueDto {
        let result = new PagedResultDtoOfNameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfNameValueDto {
    totalCount: number;
    items: NameValueDto[];
}

export class NameValueDto implements INameValueDto {
    name: string;
    value: string;

    constructor(data?: INameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): NameValueDto {
        let result = new NameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface INameValueDto {
    name: string;
    value: string;
}

export class GetDefaultEditionNameOutput implements IGetDefaultEditionNameOutput {
    name: string;

    constructor(data?: IGetDefaultEditionNameOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): GetDefaultEditionNameOutput {
        let result = new GetDefaultEditionNameOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface IGetDefaultEditionNameOutput {
    name: string;
}

export class PagedResultDtoOfCompanyViewDt implements IPagedResultDtoOfCompanyViewDt {
    totalCount: number;
    items: CompanyViewDt[];

    constructor(data?: IPagedResultDtoOfCompanyViewDt) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(CompanyViewDt.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfCompanyViewDt {
        let result = new PagedResultDtoOfCompanyViewDt();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfCompanyViewDt {
    totalCount: number;
    items: CompanyViewDt[];
}

export class CompanyViewDt implements ICompanyViewDt {
    companyName: string;
    companyCode: string;
    city: string;
    customerType: string;
    address: string;
    fax: string;
    telNo: string;
    country: string;
    email: string;
    phone: string;
    creatorUserId: number;
    accountManager: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    id: number;

    constructor(data?: ICompanyViewDt) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.companyName = data["companyName"];
            this.companyCode = data["companyCode"];
            this.city = data["city"];
            this.customerType = data["customerType"];
            this.address = data["address"];
            this.fax = data["fax"];
            this.telNo = data["telNo"];
            this.country = data["country"];
            this.email = data["email"];
            this.phone = data["phone"];
            this.creatorUserId = data["creatorUserId"];
            this.accountManager = data["accountManager"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CompanyViewDt {
        let result = new CompanyViewDt();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyName"] = this.companyName;
        data["companyCode"] = this.companyCode;
        data["city"] = this.city;
        data["customerType"] = this.customerType;
        data["address"] = this.address;
        data["fax"] = this.fax;
        data["telNo"] = this.telNo;
        data["country"] = this.country;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["creatorUserId"] = this.creatorUserId;
        data["accountManager"] = this.accountManager;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICompanyViewDt {
    companyName: string;
    companyCode: string;
    city: string;
    customerType: string;
    address: string;
    fax: string;
    telNo: string;
    country: string;
    email: string;
    phone: string;
    creatorUserId: number;
    accountManager: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    id: number;
}

export class GetCompany implements IGetCompany {
    company: CreateCompanyInput;
    city: CityDto[];
    customerType: CustomerTypeDto[];
    accountManager: AccountManagerDto[];

    constructor(data?: IGetCompany) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.company = data["company"] ? CreateCompanyInput.fromJS(data["company"]) : <any>undefined;
            if (data["city"] && data["city"].constructor === Array) {
                this.city = [];
                for (let item of data["city"])
                    this.city.push(CityDto.fromJS(item));
            }
            if (data["customerType"] && data["customerType"].constructor === Array) {
                this.customerType = [];
                for (let item of data["customerType"])
                    this.customerType.push(CustomerTypeDto.fromJS(item));
            }
            if (data["accountManager"] && data["accountManager"].constructor === Array) {
                this.accountManager = [];
                for (let item of data["accountManager"])
                    this.accountManager.push(AccountManagerDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetCompany {
        let result = new GetCompany();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["company"] = this.company ? this.company.toJSON() : <any>undefined;
        if (this.city && this.city.constructor === Array) {
            data["city"] = [];
            for (let item of this.city)
                data["city"].push(item.toJSON());
        }
        if (this.customerType && this.customerType.constructor === Array) {
            data["customerType"] = [];
            for (let item of this.customerType)
                data["customerType"].push(item.toJSON());
        }
        if (this.accountManager && this.accountManager.constructor === Array) {
            data["accountManager"] = [];
            for (let item of this.accountManager)
                data["accountManager"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetCompany {
    company: CreateCompanyInput;
    city: CityDto[];
    customerType: CustomerTypeDto[];
    accountManager: AccountManagerDto[];
}

export class CreateCompanyInput implements ICreateCompanyInput {
    id: number;
    companyName: string;
    companyCode: string;
    address: string;
    cityId: number;
    accountManagerId: number;
    customerTypeId: number;
    telNo: string;
    email: string;
    fax: string;
    phoneNo: string;
    mob_No: string;
    creatorUserId: number;

    constructor(data?: ICreateCompanyInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.companyName = data["companyName"];
            this.companyCode = data["companyCode"];
            this.address = data["address"];
            this.cityId = data["cityId"];
            this.accountManagerId = data["accountManagerId"];
            this.customerTypeId = data["customerTypeId"];
            this.telNo = data["telNo"];
            this.email = data["email"];
            this.fax = data["fax"];
            this.phoneNo = data["phoneNo"];
            this.mob_No = data["mob_No"];
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): CreateCompanyInput {
        let result = new CreateCompanyInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyName"] = this.companyName;
        data["companyCode"] = this.companyCode;
        data["address"] = this.address;
        data["cityId"] = this.cityId;
        data["accountManagerId"] = this.accountManagerId;
        data["customerTypeId"] = this.customerTypeId;
        data["telNo"] = this.telNo;
        data["email"] = this.email;
        data["fax"] = this.fax;
        data["phoneNo"] = this.phoneNo;
        data["mob_No"] = this.mob_No;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface ICreateCompanyInput {
    id: number;
    companyName: string;
    companyCode: string;
    address: string;
    cityId: number;
    accountManagerId: number;
    customerTypeId: number;
    telNo: string;
    email: string;
    fax: string;
    phoneNo: string;
    mob_No: string;
    creatorUserId: number;
}

export class CityDto implements ICityDto {
    cityId: number;
    cityName: string;

    constructor(data?: ICityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.cityId = data["cityId"];
            this.cityName = data["cityName"];
        }
    }

    static fromJS(data: any): CityDto {
        let result = new CityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cityId"] = this.cityId;
        data["cityName"] = this.cityName;
        return data; 
    }
}

export interface ICityDto {
    cityId: number;
    cityName: string;
}

export class CustomerTypeDto implements ICustomerTypeDto {
    customerTypeId: number;
    customerTypeName: string;

    constructor(data?: ICustomerTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customerTypeId = data["customerTypeId"];
            this.customerTypeName = data["customerTypeName"];
        }
    }

    static fromJS(data: any): CustomerTypeDto {
        let result = new CustomerTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerTypeId"] = this.customerTypeId;
        data["customerTypeName"] = this.customerTypeName;
        return data; 
    }
}

export interface ICustomerTypeDto {
    customerTypeId: number;
    customerTypeName: string;
}

export class AccountManagerDto implements IAccountManagerDto {
    accountManagerId: number;
    accountManagerName: string;

    constructor(data?: IAccountManagerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accountManagerId = data["accountManagerId"];
            this.accountManagerName = data["accountManagerName"];
        }
    }

    static fromJS(data: any): AccountManagerDto {
        let result = new AccountManagerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountManagerId"] = this.accountManagerId;
        data["accountManagerName"] = this.accountManagerName;
        return data; 
    }
}

export interface IAccountManagerDto {
    accountManagerId: number;
    accountManagerName: string;
}

export class ListResultDtoOfContactViewDto implements IListResultDtoOfContactViewDto {
    items: ContactViewDto[];

    constructor(data?: IListResultDtoOfContactViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ContactViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfContactViewDto {
        let result = new ListResultDtoOfContactViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfContactViewDto {
    items: ContactViewDto[];
}

export class ContactViewDto implements IContactViewDto {
    companyId: number;
    companyName: string;
    contactPersonName: string;
    desigination: string;
    work_No: string;
    mobile_No: string;
    address: string;
    description: string;
    email: string;
    creatorUserId: number;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    id: number;

    constructor(data?: IContactViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.companyId = data["companyId"];
            this.companyName = data["companyName"];
            this.contactPersonName = data["contactPersonName"];
            this.desigination = data["desigination"];
            this.work_No = data["work_No"];
            this.mobile_No = data["mobile_No"];
            this.address = data["address"];
            this.description = data["description"];
            this.email = data["email"];
            this.creatorUserId = data["creatorUserId"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ContactViewDto {
        let result = new ContactViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        data["companyName"] = this.companyName;
        data["contactPersonName"] = this.contactPersonName;
        data["desigination"] = this.desigination;
        data["work_No"] = this.work_No;
        data["mobile_No"] = this.mobile_No;
        data["address"] = this.address;
        data["description"] = this.description;
        data["email"] = this.email;
        data["creatorUserId"] = this.creatorUserId;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IContactViewDto {
    companyId: number;
    companyName: string;
    contactPersonName: string;
    desigination: string;
    work_No: string;
    mobile_No: string;
    address: string;
    description: string;
    email: string;
    creatorUserId: number;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    id: number;
}

export class PagedResultDtoOfContactViewDto implements IPagedResultDtoOfContactViewDto {
    totalCount: number;
    items: ContactViewDto[];

    constructor(data?: IPagedResultDtoOfContactViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ContactViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfContactViewDto {
        let result = new PagedResultDtoOfContactViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfContactViewDto {
    totalCount: number;
    items: ContactViewDto[];
}

export class GetCompanyContact implements IGetCompanyContact {
    contact: CreateContactInput;
    company: CompanyDto[];
    title: TitleDto[];
    desigination: DesiginationDto[];

    constructor(data?: IGetCompanyContact) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contact = data["contact"] ? CreateContactInput.fromJS(data["contact"]) : <any>undefined;
            if (data["company"] && data["company"].constructor === Array) {
                this.company = [];
                for (let item of data["company"])
                    this.company.push(CompanyDto.fromJS(item));
            }
            if (data["title"] && data["title"].constructor === Array) {
                this.title = [];
                for (let item of data["title"])
                    this.title.push(TitleDto.fromJS(item));
            }
            if (data["desigination"] && data["desigination"].constructor === Array) {
                this.desigination = [];
                for (let item of data["desigination"])
                    this.desigination.push(DesiginationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetCompanyContact {
        let result = new GetCompanyContact();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contact"] = this.contact ? this.contact.toJSON() : <any>undefined;
        if (this.company && this.company.constructor === Array) {
            data["company"] = [];
            for (let item of this.company)
                data["company"].push(item.toJSON());
        }
        if (this.title && this.title.constructor === Array) {
            data["title"] = [];
            for (let item of this.title)
                data["title"].push(item.toJSON());
        }
        if (this.desigination && this.desigination.constructor === Array) {
            data["desigination"] = [];
            for (let item of this.desigination)
                data["desigination"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetCompanyContact {
    contact: CreateContactInput;
    company: CompanyDto[];
    title: TitleDto[];
    desigination: DesiginationDto[];
}

export class CreateContactInput implements ICreateContactInput {
    id: number;
    companyId: number;
    contactPersonName: string;
    desiginationId: number;
    email: string;
    work_No: string;
    mobile_No: string;
    titleId: number;
    address: string;
    description: string;
    creatorUserId: number;

    constructor(data?: ICreateContactInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.companyId = data["companyId"];
            this.contactPersonName = data["contactPersonName"];
            this.desiginationId = data["desiginationId"];
            this.email = data["email"];
            this.work_No = data["work_No"];
            this.mobile_No = data["mobile_No"];
            this.titleId = data["titleId"];
            this.address = data["address"];
            this.description = data["description"];
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): CreateContactInput {
        let result = new CreateContactInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyId"] = this.companyId;
        data["contactPersonName"] = this.contactPersonName;
        data["desiginationId"] = this.desiginationId;
        data["email"] = this.email;
        data["work_No"] = this.work_No;
        data["mobile_No"] = this.mobile_No;
        data["titleId"] = this.titleId;
        data["address"] = this.address;
        data["description"] = this.description;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface ICreateContactInput {
    id: number;
    companyId: number;
    contactPersonName: string;
    desiginationId: number;
    email: string;
    work_No: string;
    mobile_No: string;
    titleId: number;
    address: string;
    description: string;
    creatorUserId: number;
}

export class CompanyDto implements ICompanyDto {
    companyId: number;
    companyName: string;

    constructor(data?: ICompanyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.companyId = data["companyId"];
            this.companyName = data["companyName"];
        }
    }

    static fromJS(data: any): CompanyDto {
        let result = new CompanyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        data["companyName"] = this.companyName;
        return data; 
    }
}

export interface ICompanyDto {
    companyId: number;
    companyName: string;
}

export class TitleDto implements ITitleDto {
    titleId: number;
    title: string;

    constructor(data?: ITitleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.titleId = data["titleId"];
            this.title = data["title"];
        }
    }

    static fromJS(data: any): TitleDto {
        let result = new TitleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["titleId"] = this.titleId;
        data["title"] = this.title;
        return data; 
    }
}

export interface ITitleDto {
    titleId: number;
    title: string;
}

export class DesiginationDto implements IDesiginationDto {
    desiginationId: number;
    desigination: string;

    constructor(data?: IDesiginationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.desiginationId = data["desiginationId"];
            this.desigination = data["desigination"];
        }
    }

    static fromJS(data: any): DesiginationDto {
        let result = new DesiginationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["desiginationId"] = this.desiginationId;
        data["desigination"] = this.desigination;
        return data; 
    }
}

export interface IDesiginationDto {
    desiginationId: number;
    desigination: string;
}

export class CompanyCreateInput implements ICompanyCreateInput {
    companyName: string;
    inSales: boolean;
    industryId: number;

    constructor(data?: ICompanyCreateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.companyName = data["companyName"];
            this.inSales = data["inSales"];
            this.industryId = data["industryId"];
        }
    }

    static fromJS(data: any): CompanyCreateInput {
        let result = new CompanyCreateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyName"] = this.companyName;
        data["inSales"] = this.inSales;
        data["industryId"] = this.industryId;
        return data; 
    }
}

export interface ICompanyCreateInput {
    companyName: string;
    inSales: boolean;
    industryId: number;
}

export class ListResultDtoOfContactDesignationInput implements IListResultDtoOfContactDesignationInput {
    items: ContactDesignationInput[];

    constructor(data?: IListResultDtoOfContactDesignationInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ContactDesignationInput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfContactDesignationInput {
        let result = new ListResultDtoOfContactDesignationInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfContactDesignationInput {
    items: ContactDesignationInput[];
}

export class ContactDesignationInput implements IContactDesignationInput {
    id: number;
    designationCode: string;
    desiginationName: string;

    constructor(data?: IContactDesignationInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.designationCode = data["designationCode"];
            this.desiginationName = data["desiginationName"];
        }
    }

    static fromJS(data: any): ContactDesignationInput {
        let result = new ContactDesignationInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["designationCode"] = this.designationCode;
        data["desiginationName"] = this.desiginationName;
        return data; 
    }
}

export interface IContactDesignationInput {
    id: number;
    designationCode: string;
    desiginationName: string;
}

export class GetContactDesignation implements IGetContactDesignation {
    contactDesignation: ContactDesignationInput;

    constructor(data?: IGetContactDesignation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contactDesignation = data["contactDesignation"] ? ContactDesignationInput.fromJS(data["contactDesignation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetContactDesignation {
        let result = new GetContactDesignation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contactDesignation"] = this.contactDesignation ? this.contactDesignation.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetContactDesignation {
    contactDesignation: ContactDesignationInput;
}

export class ListResultDtoOfCountryListDto implements IListResultDtoOfCountryListDto {
    items: CountryListDto[];

    constructor(data?: IListResultDtoOfCountryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(CountryListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfCountryListDto {
        let result = new ListResultDtoOfCountryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfCountryListDto {
    items: CountryListDto[];
}

export class CountryListDto implements ICountryListDto {
    id: number;
    countryName: string;
    countryCode: string;
    isdCode: string;
    creatorUserName: string;

    constructor(data?: ICountryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.countryName = data["countryName"];
            this.countryCode = data["countryCode"];
            this.isdCode = data["isdCode"];
            this.creatorUserName = data["creatorUserName"];
        }
    }

    static fromJS(data: any): CountryListDto {
        let result = new CountryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["countryName"] = this.countryName;
        data["countryCode"] = this.countryCode;
        data["isdCode"] = this.isdCode;
        data["creatorUserName"] = this.creatorUserName;
        return data; 
    }
}

export interface ICountryListDto {
    id: number;
    countryName: string;
    countryCode: string;
    isdCode: string;
    creatorUserName: string;
}

export class GetCountry implements IGetCountry {
    countrys: CountryListDto;

    constructor(data?: IGetCountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.countrys = data["countrys"] ? CountryListDto.fromJS(data["countrys"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCountry {
        let result = new GetCountry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["countrys"] = this.countrys ? this.countrys.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetCountry {
    countrys: CountryListDto;
}

export class CountryInputDto implements ICountryInputDto {
    id: number;
    countryName: string;
    countryCode: string;
    isdCode: string;

    constructor(data?: ICountryInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.countryName = data["countryName"];
            this.countryCode = data["countryCode"];
            this.isdCode = data["isdCode"];
        }
    }

    static fromJS(data: any): CountryInputDto {
        let result = new CountryInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["countryName"] = this.countryName;
        data["countryCode"] = this.countryCode;
        data["isdCode"] = this.isdCode;
        return data; 
    }
}

export interface ICountryInputDto {
    id: number;
    countryName: string;
    countryCode: string;
    isdCode: string;
}

export class DateToStringOutput implements IDateToStringOutput {
    dateString: string;

    constructor(data?: IDateToStringOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dateString = data["dateString"];
        }
    }

    static fromJS(data: any): DateToStringOutput {
        let result = new DateToStringOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateString"] = this.dateString;
        return data; 
    }
}

export interface IDateToStringOutput {
    dateString: string;
}

export class NameValueOfString implements INameValueOfString {
    name: string;
    value: string;

    constructor(data?: INameValueOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): NameValueOfString {
        let result = new NameValueOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface INameValueOfString {
    name: string;
    value: string;
}

export class StringOutput implements IStringOutput {
    output: string;

    constructor(data?: IStringOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.output = data["output"];
        }
    }

    static fromJS(data: any): StringOutput {
        let result = new StringOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["output"] = this.output;
        return data; 
    }
}

export interface IStringOutput {
    output: string;
}

export class ListResultDtoOfDepartmentListDto implements IListResultDtoOfDepartmentListDto {
    items: DepartmentListDto[];

    constructor(data?: IListResultDtoOfDepartmentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(DepartmentListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfDepartmentListDto {
        let result = new ListResultDtoOfDepartmentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfDepartmentListDto {
    items: DepartmentListDto[];
}

export class DepartmentListDto implements IDepartmentListDto {
    id: number;
    depatmentName: string;
    departmentCode: string;

    constructor(data?: IDepartmentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.depatmentName = data["depatmentName"];
            this.departmentCode = data["departmentCode"];
        }
    }

    static fromJS(data: any): DepartmentListDto {
        let result = new DepartmentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["depatmentName"] = this.depatmentName;
        data["departmentCode"] = this.departmentCode;
        return data; 
    }
}

export interface IDepartmentListDto {
    id: number;
    depatmentName: string;
    departmentCode: string;
}

export class GetDepartment implements IGetDepartment {
    departments: DepartmentListDto;

    constructor(data?: IGetDepartment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.departments = data["departments"] ? DepartmentListDto.fromJS(data["departments"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetDepartment {
        let result = new GetDepartment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["departments"] = this.departments ? this.departments.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetDepartment {
    departments: DepartmentListDto;
}

export class DepartmentInputDto implements IDepartmentInputDto {
    id: number;
    depatmentName: string;
    departmentCode: string;

    constructor(data?: IDepartmentInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.depatmentName = data["depatmentName"];
            this.departmentCode = data["departmentCode"];
        }
    }

    static fromJS(data: any): DepartmentInputDto {
        let result = new DepartmentInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["depatmentName"] = this.depatmentName;
        data["departmentCode"] = this.departmentCode;
        return data; 
    }
}

export interface IDepartmentInputDto {
    id: number;
    depatmentName: string;
    departmentCode: string;
}

export class ListResultDtoOfDimensionListDto implements IListResultDtoOfDimensionListDto {
    items: DimensionListDto[];

    constructor(data?: IListResultDtoOfDimensionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(DimensionListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfDimensionListDto {
        let result = new ListResultDtoOfDimensionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfDimensionListDto {
    items: DimensionListDto[];
}

export class DimensionListDto implements IDimensionListDto {
    id: number;
    dimensionCode: string;
    dimensionName: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: IDimensionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.dimensionCode = data["dimensionCode"];
            this.dimensionName = data["dimensionName"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): DimensionListDto {
        let result = new DimensionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dimensionCode"] = this.dimensionCode;
        data["dimensionName"] = this.dimensionName;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IDimensionListDto {
    id: number;
    dimensionCode: string;
    dimensionName: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class GetDimension implements IGetDimension {
    dimension: DimensionListDto;

    constructor(data?: IGetDimension) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dimension = data["dimension"] ? DimensionListDto.fromJS(data["dimension"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetDimension {
        let result = new GetDimension();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dimension"] = this.dimension ? this.dimension.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetDimension {
    dimension: DimensionListDto;
}

export class DimensionInputDto implements IDimensionInputDto {
    id: number;
    dimensionCode: string;
    dimensionName: string;

    constructor(data?: IDimensionInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.dimensionCode = data["dimensionCode"];
            this.dimensionName = data["dimensionName"];
        }
    }

    static fromJS(data: any): DimensionInputDto {
        let result = new DimensionInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dimensionCode"] = this.dimensionCode;
        data["dimensionName"] = this.dimensionName;
        return data; 
    }
}

export interface IDimensionInputDto {
    id: number;
    dimensionCode: string;
    dimensionName: string;
}

export class ListResultDtoOfEditionListDto implements IListResultDtoOfEditionListDto {
    items: EditionListDto[];

    constructor(data?: IListResultDtoOfEditionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(EditionListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfEditionListDto {
        let result = new ListResultDtoOfEditionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfEditionListDto {
    items: EditionListDto[];
}

export class EditionListDto implements IEditionListDto {
    name: string;
    displayName: string;
    creationTime: moment.Moment;
    id: number;

    constructor(data?: IEditionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EditionListDto {
        let result = new EditionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IEditionListDto {
    name: string;
    displayName: string;
    creationTime: moment.Moment;
    id: number;
}

export class GetEditionEditOutput implements IGetEditionEditOutput {
    edition: EditionEditDto;
    featureValues: NameValueDto[];
    features: FlatFeatureDto[];

    constructor(data?: IGetEditionEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionEditDto.fromJS(data["edition"]) : <any>undefined;
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (let item of data["features"])
                    this.features.push(FlatFeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEditionEditOutput {
        let result = new GetEditionEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEditionEditOutput {
    edition: EditionEditDto;
    featureValues: NameValueDto[];
    features: FlatFeatureDto[];
}

export class EditionEditDto implements IEditionEditDto {
    id: number;
    displayName: string;
    monthlyPrice: number;
    annualPrice: number;
    trialDayCount: number;
    waitingDayAfterExpire: number;
    expiringEditionId: number;

    constructor(data?: IEditionEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.monthlyPrice = data["monthlyPrice"];
            this.annualPrice = data["annualPrice"];
            this.trialDayCount = data["trialDayCount"];
            this.waitingDayAfterExpire = data["waitingDayAfterExpire"];
            this.expiringEditionId = data["expiringEditionId"];
        }
    }

    static fromJS(data: any): EditionEditDto {
        let result = new EditionEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["monthlyPrice"] = this.monthlyPrice;
        data["annualPrice"] = this.annualPrice;
        data["trialDayCount"] = this.trialDayCount;
        data["waitingDayAfterExpire"] = this.waitingDayAfterExpire;
        data["expiringEditionId"] = this.expiringEditionId;
        return data; 
    }
}

export interface IEditionEditDto {
    id: number;
    displayName: string;
    monthlyPrice: number;
    annualPrice: number;
    trialDayCount: number;
    waitingDayAfterExpire: number;
    expiringEditionId: number;
}

export class FlatFeatureDto implements IFlatFeatureDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    defaultValue: string;
    inputType: FeatureInputTypeDto;

    constructor(data?: IFlatFeatureDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.defaultValue = data["defaultValue"];
            this.inputType = data["inputType"] ? FeatureInputTypeDto.fromJS(data["inputType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FlatFeatureDto {
        let result = new FlatFeatureDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["defaultValue"] = this.defaultValue;
        data["inputType"] = this.inputType ? this.inputType.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IFlatFeatureDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    defaultValue: string;
    inputType: FeatureInputTypeDto;
}

export class FeatureInputTypeDto implements IFeatureInputTypeDto {
    name: string;
    attributes: { [key: string] : any; };
    validator: IValueValidator;
    itemSource: LocalizableComboboxItemSourceDto;

    constructor(data?: IFeatureInputTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key];
                }
            }
            this.validator = data["validator"] ? IValueValidator.fromJS(data["validator"]) : <any>undefined;
            this.itemSource = data["itemSource"] ? LocalizableComboboxItemSourceDto.fromJS(data["itemSource"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FeatureInputTypeDto {
        let result = new FeatureInputTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key];
            }
        }
        data["validator"] = this.validator ? this.validator.toJSON() : <any>undefined;
        data["itemSource"] = this.itemSource ? this.itemSource.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IFeatureInputTypeDto {
    name: string;
    attributes: { [key: string] : any; };
    validator: IValueValidator;
    itemSource: LocalizableComboboxItemSourceDto;
}

export class IValueValidator implements IIValueValidator {
    name: string;
    attributes: { [key: string] : any; };

    constructor(data?: IIValueValidator) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key];
                }
            }
        }
    }

    static fromJS(data: any): IValueValidator {
        let result = new IValueValidator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key];
            }
        }
        return data; 
    }
}

export interface IIValueValidator {
    name: string;
    attributes: { [key: string] : any; };
}

export class LocalizableComboboxItemSourceDto implements ILocalizableComboboxItemSourceDto {
    items: LocalizableComboboxItemDto[];

    constructor(data?: ILocalizableComboboxItemSourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LocalizableComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LocalizableComboboxItemSourceDto {
        let result = new LocalizableComboboxItemSourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILocalizableComboboxItemSourceDto {
    items: LocalizableComboboxItemDto[];
}

export class LocalizableComboboxItemDto implements ILocalizableComboboxItemDto {
    value: string;
    displayText: string;

    constructor(data?: ILocalizableComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.displayText = data["displayText"];
        }
    }

    static fromJS(data: any): LocalizableComboboxItemDto {
        let result = new LocalizableComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        return data; 
    }
}

export interface ILocalizableComboboxItemDto {
    value: string;
    displayText: string;
}

export class CreateOrUpdateEditionDto implements ICreateOrUpdateEditionDto {
    edition: EditionEditDto = new EditionEditDto();
    featureValues: NameValueDto[] = [];

    constructor(data?: ICreateOrUpdateEditionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionEditDto.fromJS(data["edition"]) : new EditionEditDto();
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateEditionDto {
        let result = new CreateOrUpdateEditionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateOrUpdateEditionDto {
    edition: EditionEditDto;
    featureValues: NameValueDto[];
}

export class ListResultDtoOfEmaildomainList implements IListResultDtoOfEmaildomainList {
    items: EmaildomainList[];

    constructor(data?: IListResultDtoOfEmaildomainList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(EmaildomainList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfEmaildomainList {
        let result = new ListResultDtoOfEmaildomainList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfEmaildomainList {
    items: EmaildomainList[];
}

export class EmaildomainList implements IEmaildomainList {
    id: number;
    emaildomainName: string;

    constructor(data?: IEmaildomainList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.emaildomainName = data["emaildomainName"];
        }
    }

    static fromJS(data: any): EmaildomainList {
        let result = new EmaildomainList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["emaildomainName"] = this.emaildomainName;
        return data; 
    }
}

export interface IEmaildomainList {
    id: number;
    emaildomainName: string;
}

export class GetEmaildomain implements IGetEmaildomain {
    emaildomainList: EmaildomainList;

    constructor(data?: IGetEmaildomain) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emaildomainList = data["emaildomainList"] ? EmaildomainList.fromJS(data["emaildomainList"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetEmaildomain {
        let result = new GetEmaildomain();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emaildomainList"] = this.emaildomainList ? this.emaildomainList.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetEmaildomain {
    emaildomainList: EmaildomainList;
}

export class CreateEmaildomainInput implements ICreateEmaildomainInput {
    id: number;
    emaildomainName: string;

    constructor(data?: ICreateEmaildomainInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.emaildomainName = data["emaildomainName"];
        }
    }

    static fromJS(data: any): CreateEmaildomainInput {
        let result = new CreateEmaildomainInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["emaildomainName"] = this.emaildomainName;
        return data; 
    }
}

export interface ICreateEmaildomainInput {
    id: number;
    emaildomainName: string;
}

export class ListResultDtoOfEnquiryContactListDto implements IListResultDtoOfEnquiryContactListDto {
    items: EnquiryContactListDto[];

    constructor(data?: IListResultDtoOfEnquiryContactListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(EnquiryContactListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfEnquiryContactListDto {
        let result = new ListResultDtoOfEnquiryContactListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfEnquiryContactListDto {
    items: EnquiryContactListDto[];
}

export class EnquiryContactListDto implements IEnquiryContactListDto {
    id: number;
    enquiryName: string;
    newContactName: string;
    contactId: number;
    newCompanyName: string;
    newCustomerTypeTitle: string;
    default: boolean;

    constructor(data?: IEnquiryContactListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.enquiryName = data["enquiryName"];
            this.newContactName = data["newContactName"];
            this.contactId = data["contactId"];
            this.newCompanyName = data["newCompanyName"];
            this.newCustomerTypeTitle = data["newCustomerTypeTitle"];
            this.default = data["default"];
        }
    }

    static fromJS(data: any): EnquiryContactListDto {
        let result = new EnquiryContactListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["enquiryName"] = this.enquiryName;
        data["newContactName"] = this.newContactName;
        data["contactId"] = this.contactId;
        data["newCompanyName"] = this.newCompanyName;
        data["newCustomerTypeTitle"] = this.newCustomerTypeTitle;
        data["default"] = this.default;
        return data; 
    }
}

export interface IEnquiryContactListDto {
    id: number;
    enquiryName: string;
    newContactName: string;
    contactId: number;
    newCompanyName: string;
    newCustomerTypeTitle: string;
    default: boolean;
}

export class EnquiryContactInputDto implements IEnquiryContactInputDto {
    id: number;
    inquiryId: number;
    contactId: number;

    constructor(data?: IEnquiryContactInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.inquiryId = data["inquiryId"];
            this.contactId = data["contactId"];
        }
    }

    static fromJS(data: any): EnquiryContactInputDto {
        let result = new EnquiryContactInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["inquiryId"] = this.inquiryId;
        data["contactId"] = this.contactId;
        return data; 
    }
}

export interface IEnquiryContactInputDto {
    id: number;
    inquiryId: number;
    contactId: number;
}

export class ListResultDtoOfEnquiryStatusListDto implements IListResultDtoOfEnquiryStatusListDto {
    items: EnquiryStatusListDto[];

    constructor(data?: IListResultDtoOfEnquiryStatusListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(EnquiryStatusListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfEnquiryStatusListDto {
        let result = new ListResultDtoOfEnquiryStatusListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfEnquiryStatusListDto {
    items: EnquiryStatusListDto[];
}

export class EnquiryStatusListDto implements IEnquiryStatusListDto {
    id: number;
    enqStatusCode: string;
    enqStatusName: string;
    enqStatusColor: string;
    percentage: number;
    stagestateId: number;
    stagestateName: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: IEnquiryStatusListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.enqStatusCode = data["enqStatusCode"];
            this.enqStatusName = data["enqStatusName"];
            this.enqStatusColor = data["enqStatusColor"];
            this.percentage = data["percentage"];
            this.stagestateId = data["stagestateId"];
            this.stagestateName = data["stagestateName"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): EnquiryStatusListDto {
        let result = new EnquiryStatusListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["enqStatusCode"] = this.enqStatusCode;
        data["enqStatusName"] = this.enqStatusName;
        data["enqStatusColor"] = this.enqStatusColor;
        data["percentage"] = this.percentage;
        data["stagestateId"] = this.stagestateId;
        data["stagestateName"] = this.stagestateName;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IEnquiryStatusListDto {
    id: number;
    enqStatusCode: string;
    enqStatusName: string;
    enqStatusColor: string;
    percentage: number;
    stagestateId: number;
    stagestateName: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class GetEnquiryStatus implements IGetEnquiryStatus {
    enquiryStatus: EnquiryStatusListDto;

    constructor(data?: IGetEnquiryStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.enquiryStatus = data["enquiryStatus"] ? EnquiryStatusListDto.fromJS(data["enquiryStatus"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetEnquiryStatus {
        let result = new GetEnquiryStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enquiryStatus"] = this.enquiryStatus ? this.enquiryStatus.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetEnquiryStatus {
    enquiryStatus: EnquiryStatusListDto;
}

export class EnquiryStatusInputDto implements IEnquiryStatusInputDto {
    id: number;
    enqStatusCode: string;
    enqStatusName: string;
    enqStatusColor: string;
    percentage: number;
    stagestateId: number;

    constructor(data?: IEnquiryStatusInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.enqStatusCode = data["enqStatusCode"];
            this.enqStatusName = data["enqStatusName"];
            this.enqStatusColor = data["enqStatusColor"];
            this.percentage = data["percentage"];
            this.stagestateId = data["stagestateId"];
        }
    }

    static fromJS(data: any): EnquiryStatusInputDto {
        let result = new EnquiryStatusInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["enqStatusCode"] = this.enqStatusCode;
        data["enqStatusName"] = this.enqStatusName;
        data["enqStatusColor"] = this.enqStatusColor;
        data["percentage"] = this.percentage;
        data["stagestateId"] = this.stagestateId;
        return data; 
    }
}

export interface IEnquiryStatusInputDto {
    id: number;
    enqStatusCode: string;
    enqStatusName: string;
    enqStatusColor: string;
    percentage: number;
    stagestateId: number;
}

export class EnquiryUpdateInputDto implements IEnquiryUpdateInputDto {
    id: number;
    updateStatusName: string;
    currentStatusName: string;
    stageId: number;

    constructor(data?: IEnquiryUpdateInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.updateStatusName = data["updateStatusName"];
            this.currentStatusName = data["currentStatusName"];
            this.stageId = data["stageId"];
        }
    }

    static fromJS(data: any): EnquiryUpdateInputDto {
        let result = new EnquiryUpdateInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["updateStatusName"] = this.updateStatusName;
        data["currentStatusName"] = this.currentStatusName;
        data["stageId"] = this.stageId;
        return data; 
    }
}

export interface IEnquiryUpdateInputDto {
    id: number;
    updateStatusName: string;
    currentStatusName: string;
    stageId: number;
}

export class EnquiryJunkUpdateInputDto implements IEnquiryJunkUpdateInputDto {
    id: number;
    junk: boolean;

    constructor(data?: IEnquiryJunkUpdateInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.junk = data["junk"];
        }
    }

    static fromJS(data: any): EnquiryJunkUpdateInputDto {
        let result = new EnquiryJunkUpdateInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["junk"] = this.junk;
        return data; 
    }
}

export interface IEnquiryJunkUpdateInputDto {
    id: number;
    junk: boolean;
}

export class EnquiryStatusUpdateInput implements IEnquiryStatusUpdateInput {
    enquiryId: number;
    statusId: number;
    stageId: number;
    lastActivity: moment.Moment;

    constructor(data?: IEnquiryStatusUpdateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.enquiryId = data["enquiryId"];
            this.statusId = data["statusId"];
            this.stageId = data["stageId"];
            this.lastActivity = data["lastActivity"] ? moment(data["lastActivity"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): EnquiryStatusUpdateInput {
        let result = new EnquiryStatusUpdateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enquiryId"] = this.enquiryId;
        data["statusId"] = this.statusId;
        data["stageId"] = this.stageId;
        data["lastActivity"] = this.lastActivity ? this.lastActivity.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IEnquiryStatusUpdateInput {
    enquiryId: number;
    statusId: number;
    stageId: number;
    lastActivity: moment.Moment;
}

export class QuotationStatusUpdateInput implements IQuotationStatusUpdateInput {
    quotationId: number;
    statusId: number;
    stageId: number;
    lastActivity: moment.Moment;

    constructor(data?: IQuotationStatusUpdateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.quotationId = data["quotationId"];
            this.statusId = data["statusId"];
            this.stageId = data["stageId"];
            this.lastActivity = data["lastActivity"] ? moment(data["lastActivity"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): QuotationStatusUpdateInput {
        let result = new QuotationStatusUpdateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quotationId"] = this.quotationId;
        data["statusId"] = this.statusId;
        data["stageId"] = this.stageId;
        data["lastActivity"] = this.lastActivity ? this.lastActivity.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IQuotationStatusUpdateInput {
    quotationId: number;
    statusId: number;
    stageId: number;
    lastActivity: moment.Moment;
}

export class ContactUpdateInputDto implements IContactUpdateInputDto {
    companyId: number;
    contactId: number;

    constructor(data?: IContactUpdateInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.companyId = data["companyId"];
            this.contactId = data["contactId"];
        }
    }

    static fromJS(data: any): ContactUpdateInputDto {
        let result = new ContactUpdateInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        data["contactId"] = this.contactId;
        return data; 
    }
}

export interface IContactUpdateInputDto {
    companyId: number;
    contactId: number;
}

export class ClosureUpdateDateInput implements IClosureUpdateDateInput {
    inquiryId: number;
    updateDate: string;

    constructor(data?: IClosureUpdateDateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.inquiryId = data["inquiryId"];
            this.updateDate = data["updateDate"];
        }
    }

    static fromJS(data: any): ClosureUpdateDateInput {
        let result = new ClosureUpdateDateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inquiryId"] = this.inquiryId;
        data["updateDate"] = this.updateDate;
        return data; 
    }
}

export interface IClosureUpdateDateInput {
    inquiryId: number;
    updateDate: string;
}

export class NullableIdDto implements INullableIdDto {
    id: number;

    constructor(data?: INullableIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): NullableIdDto {
        let result = new NullableIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface INullableIdDto {
    id: number;
}

export class CreateFriendshipRequestInput implements ICreateFriendshipRequestInput {
    userId: number;
    tenantId: number;

    constructor(data?: ICreateFriendshipRequestInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): CreateFriendshipRequestInput {
        let result = new CreateFriendshipRequestInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ICreateFriendshipRequestInput {
    userId: number;
    tenantId: number;
}

export class CreateFriendshipRequestByUserNameInput implements ICreateFriendshipRequestByUserNameInput {
    tenancyName: string;
    userName: string;

    constructor(data?: ICreateFriendshipRequestByUserNameInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): CreateFriendshipRequestByUserNameInput {
        let result = new CreateFriendshipRequestByUserNameInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface ICreateFriendshipRequestByUserNameInput {
    tenancyName: string;
    userName: string;
}

export class BlockUserInput implements IBlockUserInput {
    userId: number;
    tenantId: number;

    constructor(data?: IBlockUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): BlockUserInput {
        let result = new BlockUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IBlockUserInput {
    userId: number;
    tenantId: number;
}

export class UnblockUserInput implements IUnblockUserInput {
    userId: number;
    tenantId: number;

    constructor(data?: IUnblockUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): UnblockUserInput {
        let result = new UnblockUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IUnblockUserInput {
    userId: number;
    tenantId: number;
}

export class AcceptFriendshipRequestInput implements IAcceptFriendshipRequestInput {
    userId: number;
    tenantId: number;

    constructor(data?: IAcceptFriendshipRequestInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): AcceptFriendshipRequestInput {
        let result = new AcceptFriendshipRequestInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IAcceptFriendshipRequestInput {
    userId: number;
    tenantId: number;
}

export class HostDashboardData implements IHostDashboardData {
    newTenantsCount: number;
    newSubscriptionAmount: number;
    dashboardPlaceholder1: number;
    dashboardPlaceholder2: number;
    incomeStatistics: IncomeStastistic[];
    editionStatistics: TenantEdition[];
    expiringTenants: ExpiringTenant[];
    recentTenants: RecentTenant[];
    maxExpiringTenantsShownCount: number;
    maxRecentTenantsShownCount: number;
    subscriptionEndAlertDayCount: number;
    recentTenantsDayCount: number;
    subscriptionEndDateStart: moment.Moment;
    subscriptionEndDateEnd: moment.Moment;
    tenantCreationStartDate: moment.Moment;

    constructor(data?: IHostDashboardData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.newTenantsCount = data["newTenantsCount"];
            this.newSubscriptionAmount = data["newSubscriptionAmount"];
            this.dashboardPlaceholder1 = data["dashboardPlaceholder1"];
            this.dashboardPlaceholder2 = data["dashboardPlaceholder2"];
            if (data["incomeStatistics"] && data["incomeStatistics"].constructor === Array) {
                this.incomeStatistics = [];
                for (let item of data["incomeStatistics"])
                    this.incomeStatistics.push(IncomeStastistic.fromJS(item));
            }
            if (data["editionStatistics"] && data["editionStatistics"].constructor === Array) {
                this.editionStatistics = [];
                for (let item of data["editionStatistics"])
                    this.editionStatistics.push(TenantEdition.fromJS(item));
            }
            if (data["expiringTenants"] && data["expiringTenants"].constructor === Array) {
                this.expiringTenants = [];
                for (let item of data["expiringTenants"])
                    this.expiringTenants.push(ExpiringTenant.fromJS(item));
            }
            if (data["recentTenants"] && data["recentTenants"].constructor === Array) {
                this.recentTenants = [];
                for (let item of data["recentTenants"])
                    this.recentTenants.push(RecentTenant.fromJS(item));
            }
            this.maxExpiringTenantsShownCount = data["maxExpiringTenantsShownCount"];
            this.maxRecentTenantsShownCount = data["maxRecentTenantsShownCount"];
            this.subscriptionEndAlertDayCount = data["subscriptionEndAlertDayCount"];
            this.recentTenantsDayCount = data["recentTenantsDayCount"];
            this.subscriptionEndDateStart = data["subscriptionEndDateStart"] ? moment(data["subscriptionEndDateStart"].toString()) : <any>undefined;
            this.subscriptionEndDateEnd = data["subscriptionEndDateEnd"] ? moment(data["subscriptionEndDateEnd"].toString()) : <any>undefined;
            this.tenantCreationStartDate = data["tenantCreationStartDate"] ? moment(data["tenantCreationStartDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HostDashboardData {
        let result = new HostDashboardData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newTenantsCount"] = this.newTenantsCount;
        data["newSubscriptionAmount"] = this.newSubscriptionAmount;
        data["dashboardPlaceholder1"] = this.dashboardPlaceholder1;
        data["dashboardPlaceholder2"] = this.dashboardPlaceholder2;
        if (this.incomeStatistics && this.incomeStatistics.constructor === Array) {
            data["incomeStatistics"] = [];
            for (let item of this.incomeStatistics)
                data["incomeStatistics"].push(item.toJSON());
        }
        if (this.editionStatistics && this.editionStatistics.constructor === Array) {
            data["editionStatistics"] = [];
            for (let item of this.editionStatistics)
                data["editionStatistics"].push(item.toJSON());
        }
        if (this.expiringTenants && this.expiringTenants.constructor === Array) {
            data["expiringTenants"] = [];
            for (let item of this.expiringTenants)
                data["expiringTenants"].push(item.toJSON());
        }
        if (this.recentTenants && this.recentTenants.constructor === Array) {
            data["recentTenants"] = [];
            for (let item of this.recentTenants)
                data["recentTenants"].push(item.toJSON());
        }
        data["maxExpiringTenantsShownCount"] = this.maxExpiringTenantsShownCount;
        data["maxRecentTenantsShownCount"] = this.maxRecentTenantsShownCount;
        data["subscriptionEndAlertDayCount"] = this.subscriptionEndAlertDayCount;
        data["recentTenantsDayCount"] = this.recentTenantsDayCount;
        data["subscriptionEndDateStart"] = this.subscriptionEndDateStart ? this.subscriptionEndDateStart.toISOString() : <any>undefined;
        data["subscriptionEndDateEnd"] = this.subscriptionEndDateEnd ? this.subscriptionEndDateEnd.toISOString() : <any>undefined;
        data["tenantCreationStartDate"] = this.tenantCreationStartDate ? this.tenantCreationStartDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IHostDashboardData {
    newTenantsCount: number;
    newSubscriptionAmount: number;
    dashboardPlaceholder1: number;
    dashboardPlaceholder2: number;
    incomeStatistics: IncomeStastistic[];
    editionStatistics: TenantEdition[];
    expiringTenants: ExpiringTenant[];
    recentTenants: RecentTenant[];
    maxExpiringTenantsShownCount: number;
    maxRecentTenantsShownCount: number;
    subscriptionEndAlertDayCount: number;
    recentTenantsDayCount: number;
    subscriptionEndDateStart: moment.Moment;
    subscriptionEndDateEnd: moment.Moment;
    tenantCreationStartDate: moment.Moment;
}

export class IncomeStastistic implements IIncomeStastistic {
    label: string;
    date: moment.Moment;
    amount: number;

    constructor(data?: IIncomeStastistic) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.label = data["label"];
            this.date = data["date"] ? moment(data["date"].toString()) : <any>undefined;
            this.amount = data["amount"];
        }
    }

    static fromJS(data: any): IncomeStastistic {
        let result = new IncomeStastistic();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IIncomeStastistic {
    label: string;
    date: moment.Moment;
    amount: number;
}

export class TenantEdition implements ITenantEdition {
    label: string;
    value: number;

    constructor(data?: ITenantEdition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.label = data["label"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): TenantEdition {
        let result = new TenantEdition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["value"] = this.value;
        return data; 
    }
}

export interface ITenantEdition {
    label: string;
    value: number;
}

export class ExpiringTenant implements IExpiringTenant {
    tenantName: string;
    remainingDayCount: number;

    constructor(data?: IExpiringTenant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantName = data["tenantName"];
            this.remainingDayCount = data["remainingDayCount"];
        }
    }

    static fromJS(data: any): ExpiringTenant {
        let result = new ExpiringTenant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantName"] = this.tenantName;
        data["remainingDayCount"] = this.remainingDayCount;
        return data; 
    }
}

export interface IExpiringTenant {
    tenantName: string;
    remainingDayCount: number;
}

export class RecentTenant implements IRecentTenant {
    id: number;
    name: string;
    creationTime: moment.Moment;

    constructor(data?: IRecentTenant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RecentTenant {
        let result = new RecentTenant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IRecentTenant {
    id: number;
    name: string;
    creationTime: moment.Moment;
}

export class GetIncomeStatisticsDataOutput implements IGetIncomeStatisticsDataOutput {
    incomeStatistics: IncomeStastistic[];

    constructor(data?: IGetIncomeStatisticsDataOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["incomeStatistics"] && data["incomeStatistics"].constructor === Array) {
                this.incomeStatistics = [];
                for (let item of data["incomeStatistics"])
                    this.incomeStatistics.push(IncomeStastistic.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetIncomeStatisticsDataOutput {
        let result = new GetIncomeStatisticsDataOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.incomeStatistics && this.incomeStatistics.constructor === Array) {
            data["incomeStatistics"] = [];
            for (let item of this.incomeStatistics)
                data["incomeStatistics"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetIncomeStatisticsDataOutput {
    incomeStatistics: IncomeStastistic[];
}

export class GetEditionTenantStatisticsOutput implements IGetEditionTenantStatisticsOutput {
    editionStatistics: TenantEdition[];

    constructor(data?: IGetEditionTenantStatisticsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["editionStatistics"] && data["editionStatistics"].constructor === Array) {
                this.editionStatistics = [];
                for (let item of data["editionStatistics"])
                    this.editionStatistics.push(TenantEdition.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEditionTenantStatisticsOutput {
        let result = new GetEditionTenantStatisticsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.editionStatistics && this.editionStatistics.constructor === Array) {
            data["editionStatistics"] = [];
            for (let item of this.editionStatistics)
                data["editionStatistics"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEditionTenantStatisticsOutput {
    editionStatistics: TenantEdition[];
}

export class HostSettingsEditDto implements IHostSettingsEditDto {
    general: GeneralSettingsEditDto = new GeneralSettingsEditDto();
    userManagement: HostUserManagementSettingsEditDto = new HostUserManagementSettingsEditDto();
    email: EmailSettingsEditDto = new EmailSettingsEditDto();
    tenantManagement: TenantManagementSettingsEditDto = new TenantManagementSettingsEditDto();
    security: SecuritySettingsEditDto = new SecuritySettingsEditDto();

    constructor(data?: IHostSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.general = data["general"] ? GeneralSettingsEditDto.fromJS(data["general"]) : new GeneralSettingsEditDto();
            this.userManagement = data["userManagement"] ? HostUserManagementSettingsEditDto.fromJS(data["userManagement"]) : new HostUserManagementSettingsEditDto();
            this.email = data["email"] ? EmailSettingsEditDto.fromJS(data["email"]) : new EmailSettingsEditDto();
            this.tenantManagement = data["tenantManagement"] ? TenantManagementSettingsEditDto.fromJS(data["tenantManagement"]) : new TenantManagementSettingsEditDto();
            this.security = data["security"] ? SecuritySettingsEditDto.fromJS(data["security"]) : new SecuritySettingsEditDto();
        }
    }

    static fromJS(data: any): HostSettingsEditDto {
        let result = new HostSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["general"] = this.general ? this.general.toJSON() : <any>undefined;
        data["userManagement"] = this.userManagement ? this.userManagement.toJSON() : <any>undefined;
        data["email"] = this.email ? this.email.toJSON() : <any>undefined;
        data["tenantManagement"] = this.tenantManagement ? this.tenantManagement.toJSON() : <any>undefined;
        data["security"] = this.security ? this.security.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IHostSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: HostUserManagementSettingsEditDto;
    email: EmailSettingsEditDto;
    tenantManagement: TenantManagementSettingsEditDto;
    security: SecuritySettingsEditDto;
}

export class GeneralSettingsEditDto implements IGeneralSettingsEditDto {
    timezone: string;
    timezoneForComparison: string;

    constructor(data?: IGeneralSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.timezone = data["timezone"];
            this.timezoneForComparison = data["timezoneForComparison"];
        }
    }

    static fromJS(data: any): GeneralSettingsEditDto {
        let result = new GeneralSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timezone"] = this.timezone;
        data["timezoneForComparison"] = this.timezoneForComparison;
        return data; 
    }
}

export interface IGeneralSettingsEditDto {
    timezone: string;
    timezoneForComparison: string;
}

export class HostUserManagementSettingsEditDto implements IHostUserManagementSettingsEditDto {
    isEmailConfirmationRequiredForLogin: boolean;
    smsVerificationEnabled: boolean;

    constructor(data?: IHostUserManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isEmailConfirmationRequiredForLogin = data["isEmailConfirmationRequiredForLogin"];
            this.smsVerificationEnabled = data["smsVerificationEnabled"];
        }
    }

    static fromJS(data: any): HostUserManagementSettingsEditDto {
        let result = new HostUserManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin;
        data["smsVerificationEnabled"] = this.smsVerificationEnabled;
        return data; 
    }
}

export interface IHostUserManagementSettingsEditDto {
    isEmailConfirmationRequiredForLogin: boolean;
    smsVerificationEnabled: boolean;
}

export class EmailSettingsEditDto implements IEmailSettingsEditDto {
    defaultFromAddress: string;
    defaultFromDisplayName: string;
    smtpHost: string;
    smtpPort: number;
    smtpUserName: string;
    smtpPassword: string;
    smtpDomain: string;
    smtpEnableSsl: boolean;
    smtpUseDefaultCredentials: boolean;

    constructor(data?: IEmailSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.defaultFromAddress = data["defaultFromAddress"];
            this.defaultFromDisplayName = data["defaultFromDisplayName"];
            this.smtpHost = data["smtpHost"];
            this.smtpPort = data["smtpPort"];
            this.smtpUserName = data["smtpUserName"];
            this.smtpPassword = data["smtpPassword"];
            this.smtpDomain = data["smtpDomain"];
            this.smtpEnableSsl = data["smtpEnableSsl"];
            this.smtpUseDefaultCredentials = data["smtpUseDefaultCredentials"];
        }
    }

    static fromJS(data: any): EmailSettingsEditDto {
        let result = new EmailSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultFromAddress"] = this.defaultFromAddress;
        data["defaultFromDisplayName"] = this.defaultFromDisplayName;
        data["smtpHost"] = this.smtpHost;
        data["smtpPort"] = this.smtpPort;
        data["smtpUserName"] = this.smtpUserName;
        data["smtpPassword"] = this.smtpPassword;
        data["smtpDomain"] = this.smtpDomain;
        data["smtpEnableSsl"] = this.smtpEnableSsl;
        data["smtpUseDefaultCredentials"] = this.smtpUseDefaultCredentials;
        return data; 
    }
}

export interface IEmailSettingsEditDto {
    defaultFromAddress: string;
    defaultFromDisplayName: string;
    smtpHost: string;
    smtpPort: number;
    smtpUserName: string;
    smtpPassword: string;
    smtpDomain: string;
    smtpEnableSsl: boolean;
    smtpUseDefaultCredentials: boolean;
}

export class TenantManagementSettingsEditDto implements ITenantManagementSettingsEditDto {
    allowSelfRegistration: boolean;
    isNewRegisteredTenantActiveByDefault: boolean;
    useCaptchaOnRegistration: boolean;
    defaultEditionId: number;

    constructor(data?: ITenantManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.allowSelfRegistration = data["allowSelfRegistration"];
            this.isNewRegisteredTenantActiveByDefault = data["isNewRegisteredTenantActiveByDefault"];
            this.useCaptchaOnRegistration = data["useCaptchaOnRegistration"];
            this.defaultEditionId = data["defaultEditionId"];
        }
    }

    static fromJS(data: any): TenantManagementSettingsEditDto {
        let result = new TenantManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowSelfRegistration"] = this.allowSelfRegistration;
        data["isNewRegisteredTenantActiveByDefault"] = this.isNewRegisteredTenantActiveByDefault;
        data["useCaptchaOnRegistration"] = this.useCaptchaOnRegistration;
        data["defaultEditionId"] = this.defaultEditionId;
        return data; 
    }
}

export interface ITenantManagementSettingsEditDto {
    allowSelfRegistration: boolean;
    isNewRegisteredTenantActiveByDefault: boolean;
    useCaptchaOnRegistration: boolean;
    defaultEditionId: number;
}

export class SecuritySettingsEditDto implements ISecuritySettingsEditDto {
    useDefaultPasswordComplexitySettings: boolean;
    passwordComplexity: PasswordComplexitySetting;
    defaultPasswordComplexity: PasswordComplexitySetting;
    userLockOut: UserLockOutSettingsEditDto;
    twoFactorLogin: TwoFactorLoginSettingsEditDto;

    constructor(data?: ISecuritySettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.useDefaultPasswordComplexitySettings = data["useDefaultPasswordComplexitySettings"];
            this.passwordComplexity = data["passwordComplexity"] ? PasswordComplexitySetting.fromJS(data["passwordComplexity"]) : <any>undefined;
            this.defaultPasswordComplexity = data["defaultPasswordComplexity"] ? PasswordComplexitySetting.fromJS(data["defaultPasswordComplexity"]) : <any>undefined;
            this.userLockOut = data["userLockOut"] ? UserLockOutSettingsEditDto.fromJS(data["userLockOut"]) : <any>undefined;
            this.twoFactorLogin = data["twoFactorLogin"] ? TwoFactorLoginSettingsEditDto.fromJS(data["twoFactorLogin"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SecuritySettingsEditDto {
        let result = new SecuritySettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["useDefaultPasswordComplexitySettings"] = this.useDefaultPasswordComplexitySettings;
        data["passwordComplexity"] = this.passwordComplexity ? this.passwordComplexity.toJSON() : <any>undefined;
        data["defaultPasswordComplexity"] = this.defaultPasswordComplexity ? this.defaultPasswordComplexity.toJSON() : <any>undefined;
        data["userLockOut"] = this.userLockOut ? this.userLockOut.toJSON() : <any>undefined;
        data["twoFactorLogin"] = this.twoFactorLogin ? this.twoFactorLogin.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISecuritySettingsEditDto {
    useDefaultPasswordComplexitySettings: boolean;
    passwordComplexity: PasswordComplexitySetting;
    defaultPasswordComplexity: PasswordComplexitySetting;
    userLockOut: UserLockOutSettingsEditDto;
    twoFactorLogin: TwoFactorLoginSettingsEditDto;
}

export class PasswordComplexitySetting implements IPasswordComplexitySetting {
    requireDigit: boolean;
    requireLowercase: boolean;
    requireNonAlphanumeric: boolean;
    requireUppercase: boolean;
    requiredLength: number;

    constructor(data?: IPasswordComplexitySetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.requireDigit = data["requireDigit"];
            this.requireLowercase = data["requireLowercase"];
            this.requireNonAlphanumeric = data["requireNonAlphanumeric"];
            this.requireUppercase = data["requireUppercase"];
            this.requiredLength = data["requiredLength"];
        }
    }

    static fromJS(data: any): PasswordComplexitySetting {
        let result = new PasswordComplexitySetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requireDigit"] = this.requireDigit;
        data["requireLowercase"] = this.requireLowercase;
        data["requireNonAlphanumeric"] = this.requireNonAlphanumeric;
        data["requireUppercase"] = this.requireUppercase;
        data["requiredLength"] = this.requiredLength;
        return data; 
    }
}

export interface IPasswordComplexitySetting {
    requireDigit: boolean;
    requireLowercase: boolean;
    requireNonAlphanumeric: boolean;
    requireUppercase: boolean;
    requiredLength: number;
}

export class UserLockOutSettingsEditDto implements IUserLockOutSettingsEditDto {
    isEnabled: boolean;
    maxFailedAccessAttemptsBeforeLockout: number;
    defaultAccountLockoutSeconds: number;

    constructor(data?: IUserLockOutSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isEnabled = data["isEnabled"];
            this.maxFailedAccessAttemptsBeforeLockout = data["maxFailedAccessAttemptsBeforeLockout"];
            this.defaultAccountLockoutSeconds = data["defaultAccountLockoutSeconds"];
        }
    }

    static fromJS(data: any): UserLockOutSettingsEditDto {
        let result = new UserLockOutSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabled"] = this.isEnabled;
        data["maxFailedAccessAttemptsBeforeLockout"] = this.maxFailedAccessAttemptsBeforeLockout;
        data["defaultAccountLockoutSeconds"] = this.defaultAccountLockoutSeconds;
        return data; 
    }
}

export interface IUserLockOutSettingsEditDto {
    isEnabled: boolean;
    maxFailedAccessAttemptsBeforeLockout: number;
    defaultAccountLockoutSeconds: number;
}

export class TwoFactorLoginSettingsEditDto implements ITwoFactorLoginSettingsEditDto {
    isEnabledForApplication: boolean;
    isEnabled: boolean;
    isEmailProviderEnabled: boolean;
    isSmsProviderEnabled: boolean;
    isRememberBrowserEnabled: boolean;
    isGoogleAuthenticatorEnabled: boolean;

    constructor(data?: ITwoFactorLoginSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isEnabledForApplication = data["isEnabledForApplication"];
            this.isEnabled = data["isEnabled"];
            this.isEmailProviderEnabled = data["isEmailProviderEnabled"];
            this.isSmsProviderEnabled = data["isSmsProviderEnabled"];
            this.isRememberBrowserEnabled = data["isRememberBrowserEnabled"];
            this.isGoogleAuthenticatorEnabled = data["isGoogleAuthenticatorEnabled"];
        }
    }

    static fromJS(data: any): TwoFactorLoginSettingsEditDto {
        let result = new TwoFactorLoginSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabledForApplication"] = this.isEnabledForApplication;
        data["isEnabled"] = this.isEnabled;
        data["isEmailProviderEnabled"] = this.isEmailProviderEnabled;
        data["isSmsProviderEnabled"] = this.isSmsProviderEnabled;
        data["isRememberBrowserEnabled"] = this.isRememberBrowserEnabled;
        data["isGoogleAuthenticatorEnabled"] = this.isGoogleAuthenticatorEnabled;
        return data; 
    }
}

export interface ITwoFactorLoginSettingsEditDto {
    isEnabledForApplication: boolean;
    isEnabled: boolean;
    isEmailProviderEnabled: boolean;
    isSmsProviderEnabled: boolean;
    isRememberBrowserEnabled: boolean;
    isGoogleAuthenticatorEnabled: boolean;
}

export class SendTestEmailInput implements ISendTestEmailInput {
    emailAddress: string;

    constructor(data?: ISendTestEmailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): SendTestEmailInput {
        let result = new SendTestEmailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data; 
    }
}

export interface ISendTestEmailInput {
    emailAddress: string;
}

export class ListResultDtoOfIndustryListDto implements IListResultDtoOfIndustryListDto {
    items: IndustryListDto[];

    constructor(data?: IListResultDtoOfIndustryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(IndustryListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfIndustryListDto {
        let result = new ListResultDtoOfIndustryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfIndustryListDto {
    items: IndustryListDto[];
}

export class IndustryListDto implements IIndustryListDto {
    id: number;
    industryCode: string;
    industryName: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: IIndustryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.industryCode = data["industryCode"];
            this.industryName = data["industryName"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): IndustryListDto {
        let result = new IndustryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["industryCode"] = this.industryCode;
        data["industryName"] = this.industryName;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IIndustryListDto {
    id: number;
    industryCode: string;
    industryName: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class GetIndustry implements IGetIndustry {
    industrys: IndustryListDto;

    constructor(data?: IGetIndustry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.industrys = data["industrys"] ? IndustryListDto.fromJS(data["industrys"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetIndustry {
        let result = new GetIndustry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["industrys"] = this.industrys ? this.industrys.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetIndustry {
    industrys: IndustryListDto;
}

export class IndustryInputDto implements IIndustryInputDto {
    id: number;
    industryCode: string;
    industryName: string;

    constructor(data?: IIndustryInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.industryCode = data["industryCode"];
            this.industryName = data["industryName"];
        }
    }

    static fromJS(data: any): IndustryInputDto {
        let result = new IndustryInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["industryCode"] = this.industryCode;
        data["industryName"] = this.industryName;
        return data; 
    }
}

export interface IIndustryInputDto {
    id: number;
    industryCode: string;
    industryName: string;
}

export class PagedResultDtoOfInquiryListDto implements IPagedResultDtoOfInquiryListDto {
    totalCount: number;
    items: InquiryListDto[];

    constructor(data?: IPagedResultDtoOfInquiryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(InquiryListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfInquiryListDto {
        let result = new PagedResultDtoOfInquiryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfInquiryListDto {
    totalCount: number;
    items: InquiryListDto[];
}

export class InquiryListDto implements IInquiryListDto {
    designationId: number;
    companyId: number;
    contactId: number;
    mileStoneId: number;
    quotationStatusId: number;
    name: string;
    address: string;
    webSite: string;
    email: string;
    mbNo: string;
    landlineNumber: string;
    remarks: string;
    subMmissionId: string;
    ipAddress: string;
    browcerinfo: string;
    departmentId: number;
    sourceId: number[];
    mileStoneName: string;
    designationName: string;
    companyName: string;
    id: number;
    departmentName: string;
    creatorUserId: number;
    creationTime: moment.Moment;
    sCreationTime: string;
    creationOrModification: moment.Moment;
    profilePicture: string;
    userName: string;
    assignedbyId: number;
    assignedTime: string;
    junk: boolean;
    statusId: number;
    statusColorCode: string;
    statusName: string;
    compatitorsId: number;
    compatitorName: string;
    summary: string;
    salesMan: string;
    estimationValue: number;
    estimationValueformat: string;
    size: string;
    leadTypeId: number;
    leadTypeName: string;
    junkDate: moment.Moment;
    activityColors: ActivityColor[];
    isQuotation: boolean;
    quotationId: number;
    quotations: QuotationLists[];
    quotationCount: number;
    teamId: number;
    teamName: string;
    isOptional: boolean;
    inquiryName: string;
    createdBy: string;
    contactName: string;
    approved: boolean;
    isEditable: boolean;
    isLast: boolean;
    closureDate: moment.Moment;
    lastActivity: moment.Moment;
    isExpire: boolean;
    percentage: number;
    whyBafcoId: number;
    whyBafcoName: string;
    opportunitySourceId: number;
    opportunitySourceName: string;
    opportunity: number;
    locationId: number;
    locationName: string;
    assignedbyImage: string;
    designerName: string;
    designerImage: string;
    archieved: boolean;
    isClosed: boolean;
    cEmail: string;
    cMbNo: string;
    cLandlineNumber: string;
    industryId: number;
    industryName: string;
    leadStatusId: number;
    leadStatusName: string;
    isReversable: boolean;
    won: boolean;
    total: number;
    disableQuotation: boolean;
    quotationRefno: string;
    sclosureDate: string;
    slastActivity: string;
    coordinatorId: number;
    coordinatorName: string;
    coordinatorImage: string;
    quotationsNew: string;
    lost: boolean;

    constructor(data?: IInquiryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.designationId = data["designationId"];
            this.companyId = data["companyId"];
            this.contactId = data["contactId"];
            this.mileStoneId = data["mileStoneId"];
            this.quotationStatusId = data["quotationStatusId"];
            this.name = data["name"];
            this.address = data["address"];
            this.webSite = data["webSite"];
            this.email = data["email"];
            this.mbNo = data["mbNo"];
            this.landlineNumber = data["landlineNumber"];
            this.remarks = data["remarks"];
            this.subMmissionId = data["subMmissionId"];
            this.ipAddress = data["ipAddress"];
            this.browcerinfo = data["browcerinfo"];
            this.departmentId = data["departmentId"];
            if (data["sourceId"] && data["sourceId"].constructor === Array) {
                this.sourceId = [];
                for (let item of data["sourceId"])
                    this.sourceId.push(item);
            }
            this.mileStoneName = data["mileStoneName"];
            this.designationName = data["designationName"];
            this.companyName = data["companyName"];
            this.id = data["id"];
            this.departmentName = data["departmentName"];
            this.creatorUserId = data["creatorUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.sCreationTime = data["sCreationTime"];
            this.creationOrModification = data["creationOrModification"] ? moment(data["creationOrModification"].toString()) : <any>undefined;
            this.profilePicture = data["profilePicture"];
            this.userName = data["userName"];
            this.assignedbyId = data["assignedbyId"];
            this.assignedTime = data["assignedTime"];
            this.junk = data["junk"];
            this.statusId = data["statusId"];
            this.statusColorCode = data["statusColorCode"];
            this.statusName = data["statusName"];
            this.compatitorsId = data["compatitorsId"];
            this.compatitorName = data["compatitorName"];
            this.summary = data["summary"];
            this.salesMan = data["salesMan"];
            this.estimationValue = data["estimationValue"];
            this.estimationValueformat = data["estimationValueformat"];
            this.size = data["size"];
            this.leadTypeId = data["leadTypeId"];
            this.leadTypeName = data["leadTypeName"];
            this.junkDate = data["junkDate"] ? moment(data["junkDate"].toString()) : <any>undefined;
            if (data["activityColors"] && data["activityColors"].constructor === Array) {
                this.activityColors = [];
                for (let item of data["activityColors"])
                    this.activityColors.push(ActivityColor.fromJS(item));
            }
            this.isQuotation = data["isQuotation"];
            this.quotationId = data["quotationId"];
            if (data["quotations"] && data["quotations"].constructor === Array) {
                this.quotations = [];
                for (let item of data["quotations"])
                    this.quotations.push(QuotationLists.fromJS(item));
            }
            this.quotationCount = data["quotationCount"];
            this.teamId = data["teamId"];
            this.teamName = data["teamName"];
            this.isOptional = data["isOptional"];
            this.inquiryName = data["inquiryName"];
            this.createdBy = data["createdBy"];
            this.contactName = data["contactName"];
            this.approved = data["approved"];
            this.isEditable = data["isEditable"];
            this.isLast = data["isLast"];
            this.closureDate = data["closureDate"] ? moment(data["closureDate"].toString()) : <any>undefined;
            this.lastActivity = data["lastActivity"] ? moment(data["lastActivity"].toString()) : <any>undefined;
            this.isExpire = data["isExpire"];
            this.percentage = data["percentage"];
            this.whyBafcoId = data["whyBafcoId"];
            this.whyBafcoName = data["whyBafcoName"];
            this.opportunitySourceId = data["opportunitySourceId"];
            this.opportunitySourceName = data["opportunitySourceName"];
            this.opportunity = data["opportunity"];
            this.locationId = data["locationId"];
            this.locationName = data["locationName"];
            this.assignedbyImage = data["assignedbyImage"];
            this.designerName = data["designerName"];
            this.designerImage = data["designerImage"];
            this.archieved = data["archieved"];
            this.isClosed = data["isClosed"];
            this.cEmail = data["cEmail"];
            this.cMbNo = data["cMbNo"];
            this.cLandlineNumber = data["cLandlineNumber"];
            this.industryId = data["industryId"];
            this.industryName = data["industryName"];
            this.leadStatusId = data["leadStatusId"];
            this.leadStatusName = data["leadStatusName"];
            this.isReversable = data["isReversable"];
            this.won = data["won"];
            this.total = data["total"];
            this.disableQuotation = data["disableQuotation"];
            this.quotationRefno = data["quotationRefno"];
            this.sclosureDate = data["sclosureDate"];
            this.slastActivity = data["slastActivity"];
            this.coordinatorId = data["coordinatorId"];
            this.coordinatorName = data["coordinatorName"];
            this.coordinatorImage = data["coordinatorImage"];
            this.quotationsNew = data["quotationsNew"];
            this.lost = data["lost"];
        }
    }

    static fromJS(data: any): InquiryListDto {
        let result = new InquiryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["designationId"] = this.designationId;
        data["companyId"] = this.companyId;
        data["contactId"] = this.contactId;
        data["mileStoneId"] = this.mileStoneId;
        data["quotationStatusId"] = this.quotationStatusId;
        data["name"] = this.name;
        data["address"] = this.address;
        data["webSite"] = this.webSite;
        data["email"] = this.email;
        data["mbNo"] = this.mbNo;
        data["landlineNumber"] = this.landlineNumber;
        data["remarks"] = this.remarks;
        data["subMmissionId"] = this.subMmissionId;
        data["ipAddress"] = this.ipAddress;
        data["browcerinfo"] = this.browcerinfo;
        data["departmentId"] = this.departmentId;
        if (this.sourceId && this.sourceId.constructor === Array) {
            data["sourceId"] = [];
            for (let item of this.sourceId)
                data["sourceId"].push(item);
        }
        data["mileStoneName"] = this.mileStoneName;
        data["designationName"] = this.designationName;
        data["companyName"] = this.companyName;
        data["id"] = this.id;
        data["departmentName"] = this.departmentName;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["sCreationTime"] = this.sCreationTime;
        data["creationOrModification"] = this.creationOrModification ? this.creationOrModification.toISOString() : <any>undefined;
        data["profilePicture"] = this.profilePicture;
        data["userName"] = this.userName;
        data["assignedbyId"] = this.assignedbyId;
        data["assignedTime"] = this.assignedTime;
        data["junk"] = this.junk;
        data["statusId"] = this.statusId;
        data["statusColorCode"] = this.statusColorCode;
        data["statusName"] = this.statusName;
        data["compatitorsId"] = this.compatitorsId;
        data["compatitorName"] = this.compatitorName;
        data["summary"] = this.summary;
        data["salesMan"] = this.salesMan;
        data["estimationValue"] = this.estimationValue;
        data["estimationValueformat"] = this.estimationValueformat;
        data["size"] = this.size;
        data["leadTypeId"] = this.leadTypeId;
        data["leadTypeName"] = this.leadTypeName;
        data["junkDate"] = this.junkDate ? this.junkDate.toISOString() : <any>undefined;
        if (this.activityColors && this.activityColors.constructor === Array) {
            data["activityColors"] = [];
            for (let item of this.activityColors)
                data["activityColors"].push(item.toJSON());
        }
        data["isQuotation"] = this.isQuotation;
        data["quotationId"] = this.quotationId;
        if (this.quotations && this.quotations.constructor === Array) {
            data["quotations"] = [];
            for (let item of this.quotations)
                data["quotations"].push(item.toJSON());
        }
        data["quotationCount"] = this.quotationCount;
        data["teamId"] = this.teamId;
        data["teamName"] = this.teamName;
        data["isOptional"] = this.isOptional;
        data["inquiryName"] = this.inquiryName;
        data["createdBy"] = this.createdBy;
        data["contactName"] = this.contactName;
        data["approved"] = this.approved;
        data["isEditable"] = this.isEditable;
        data["isLast"] = this.isLast;
        data["closureDate"] = this.closureDate ? this.closureDate.toISOString() : <any>undefined;
        data["lastActivity"] = this.lastActivity ? this.lastActivity.toISOString() : <any>undefined;
        data["isExpire"] = this.isExpire;
        data["percentage"] = this.percentage;
        data["whyBafcoId"] = this.whyBafcoId;
        data["whyBafcoName"] = this.whyBafcoName;
        data["opportunitySourceId"] = this.opportunitySourceId;
        data["opportunitySourceName"] = this.opportunitySourceName;
        data["opportunity"] = this.opportunity;
        data["locationId"] = this.locationId;
        data["locationName"] = this.locationName;
        data["assignedbyImage"] = this.assignedbyImage;
        data["designerName"] = this.designerName;
        data["designerImage"] = this.designerImage;
        data["archieved"] = this.archieved;
        data["isClosed"] = this.isClosed;
        data["cEmail"] = this.cEmail;
        data["cMbNo"] = this.cMbNo;
        data["cLandlineNumber"] = this.cLandlineNumber;
        data["industryId"] = this.industryId;
        data["industryName"] = this.industryName;
        data["leadStatusId"] = this.leadStatusId;
        data["leadStatusName"] = this.leadStatusName;
        data["isReversable"] = this.isReversable;
        data["won"] = this.won;
        data["total"] = this.total;
        data["disableQuotation"] = this.disableQuotation;
        data["quotationRefno"] = this.quotationRefno;
        data["sclosureDate"] = this.sclosureDate;
        data["slastActivity"] = this.slastActivity;
        data["coordinatorId"] = this.coordinatorId;
        data["coordinatorName"] = this.coordinatorName;
        data["coordinatorImage"] = this.coordinatorImage;
        data["quotationsNew"] = this.quotationsNew;
        data["lost"] = this.lost;
        return data; 
    }
}

export interface IInquiryListDto {
    designationId: number;
    companyId: number;
    contactId: number;
    mileStoneId: number;
    quotationStatusId: number;
    name: string;
    address: string;
    webSite: string;
    email: string;
    mbNo: string;
    landlineNumber: string;
    remarks: string;
    subMmissionId: string;
    ipAddress: string;
    browcerinfo: string;
    departmentId: number;
    sourceId: number[];
    mileStoneName: string;
    designationName: string;
    companyName: string;
    id: number;
    departmentName: string;
    creatorUserId: number;
    creationTime: moment.Moment;
    sCreationTime: string;
    creationOrModification: moment.Moment;
    profilePicture: string;
    userName: string;
    assignedbyId: number;
    assignedTime: string;
    junk: boolean;
    statusId: number;
    statusColorCode: string;
    statusName: string;
    compatitorsId: number;
    compatitorName: string;
    summary: string;
    salesMan: string;
    estimationValue: number;
    estimationValueformat: string;
    size: string;
    leadTypeId: number;
    leadTypeName: string;
    junkDate: moment.Moment;
    activityColors: ActivityColor[];
    isQuotation: boolean;
    quotationId: number;
    quotations: QuotationLists[];
    quotationCount: number;
    teamId: number;
    teamName: string;
    isOptional: boolean;
    inquiryName: string;
    createdBy: string;
    contactName: string;
    approved: boolean;
    isEditable: boolean;
    isLast: boolean;
    closureDate: moment.Moment;
    lastActivity: moment.Moment;
    isExpire: boolean;
    percentage: number;
    whyBafcoId: number;
    whyBafcoName: string;
    opportunitySourceId: number;
    opportunitySourceName: string;
    opportunity: number;
    locationId: number;
    locationName: string;
    assignedbyImage: string;
    designerName: string;
    designerImage: string;
    archieved: boolean;
    isClosed: boolean;
    cEmail: string;
    cMbNo: string;
    cLandlineNumber: string;
    industryId: number;
    industryName: string;
    leadStatusId: number;
    leadStatusName: string;
    isReversable: boolean;
    won: boolean;
    total: number;
    disableQuotation: boolean;
    quotationRefno: string;
    sclosureDate: string;
    slastActivity: string;
    coordinatorId: number;
    coordinatorName: string;
    coordinatorImage: string;
    quotationsNew: string;
    lost: boolean;
}

export class ActivityColor implements IActivityColor {
    activityId: number;
    activityName: string;
    activityColors: string;
    activityCount: string;

    constructor(data?: IActivityColor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.activityId = data["activityId"];
            this.activityName = data["activityName"];
            this.activityColors = data["activityColors"];
            this.activityCount = data["activityCount"];
        }
    }

    static fromJS(data: any): ActivityColor {
        let result = new ActivityColor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activityId"] = this.activityId;
        data["activityName"] = this.activityName;
        data["activityColors"] = this.activityColors;
        data["activityCount"] = this.activityCount;
        return data; 
    }
}

export interface IActivityColor {
    activityId: number;
    activityName: string;
    activityColors: string;
    activityCount: string;
}

export class QuotationLists implements IQuotationLists {
    isOptional: boolean;
    quotationName: string;

    constructor(data?: IQuotationLists) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isOptional = data["isOptional"];
            this.quotationName = data["quotationName"];
        }
    }

    static fromJS(data: any): QuotationLists {
        let result = new QuotationLists();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isOptional"] = this.isOptional;
        data["quotationName"] = this.quotationName;
        return data; 
    }
}

export interface IQuotationLists {
    isOptional: boolean;
    quotationName: string;
}

export class GetInquirys implements IGetInquirys {
    inquirys: InquiryListDto;
    inquiryDetails: LeadDetailListDto;
    sourcelists: Sourcelist[];
    selectedSource: Sourcelist[];
    contactEdit: any[];
    inquiryLock: InquiryLockedQuotation;

    constructor(data?: IGetInquirys) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.inquirys = data["inquirys"] ? InquiryListDto.fromJS(data["inquirys"]) : <any>undefined;
            this.inquiryDetails = data["inquiryDetails"] ? LeadDetailListDto.fromJS(data["inquiryDetails"]) : <any>undefined;
            if (data["sourcelists"] && data["sourcelists"].constructor === Array) {
                this.sourcelists = [];
                for (let item of data["sourcelists"])
                    this.sourcelists.push(Sourcelist.fromJS(item));
            }
            if (data["selectedSource"] && data["selectedSource"].constructor === Array) {
                this.selectedSource = [];
                for (let item of data["selectedSource"])
                    this.selectedSource.push(Sourcelist.fromJS(item));
            }
            if (data["contactEdit"] && data["contactEdit"].constructor === Array) {
                this.contactEdit = [];
                for (let item of data["contactEdit"])
                    this.contactEdit.push(item);
            }
            this.inquiryLock = data["inquiryLock"] ? InquiryLockedQuotation.fromJS(data["inquiryLock"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetInquirys {
        let result = new GetInquirys();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inquirys"] = this.inquirys ? this.inquirys.toJSON() : <any>undefined;
        data["inquiryDetails"] = this.inquiryDetails ? this.inquiryDetails.toJSON() : <any>undefined;
        if (this.sourcelists && this.sourcelists.constructor === Array) {
            data["sourcelists"] = [];
            for (let item of this.sourcelists)
                data["sourcelists"].push(item.toJSON());
        }
        if (this.selectedSource && this.selectedSource.constructor === Array) {
            data["selectedSource"] = [];
            for (let item of this.selectedSource)
                data["selectedSource"].push(item.toJSON());
        }
        if (this.contactEdit && this.contactEdit.constructor === Array) {
            data["contactEdit"] = [];
            for (let item of this.contactEdit)
                data["contactEdit"].push(item);
        }
        data["inquiryLock"] = this.inquiryLock ? this.inquiryLock.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetInquirys {
    inquirys: InquiryListDto;
    inquiryDetails: LeadDetailListDto;
    sourcelists: Sourcelist[];
    selectedSource: Sourcelist[];
    contactEdit: any[];
    inquiryLock: InquiryLockedQuotation;
}

export class LeadDetailListDto implements ILeadDetailListDto {
    leadSourceId: number;
    leadSourceName: string;
    leadTypeId: number;
    leadTypeName: string;
    salesManagerId: number;
    salesManagerName: string;
    coordinatorId: number;
    coordinatorName: string;
    designerId: number;
    inquiryId: number;
    designerName: string;
    estimationValue: number;
    size: string;
    id: number;
    coordinatorImage: string;
    designerImage: string;

    constructor(data?: ILeadDetailListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.leadSourceId = data["leadSourceId"];
            this.leadSourceName = data["leadSourceName"];
            this.leadTypeId = data["leadTypeId"];
            this.leadTypeName = data["leadTypeName"];
            this.salesManagerId = data["salesManagerId"];
            this.salesManagerName = data["salesManagerName"];
            this.coordinatorId = data["coordinatorId"];
            this.coordinatorName = data["coordinatorName"];
            this.designerId = data["designerId"];
            this.inquiryId = data["inquiryId"];
            this.designerName = data["designerName"];
            this.estimationValue = data["estimationValue"];
            this.size = data["size"];
            this.id = data["id"];
            this.coordinatorImage = data["coordinatorImage"];
            this.designerImage = data["designerImage"];
        }
    }

    static fromJS(data: any): LeadDetailListDto {
        let result = new LeadDetailListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["leadSourceId"] = this.leadSourceId;
        data["leadSourceName"] = this.leadSourceName;
        data["leadTypeId"] = this.leadTypeId;
        data["leadTypeName"] = this.leadTypeName;
        data["salesManagerId"] = this.salesManagerId;
        data["salesManagerName"] = this.salesManagerName;
        data["coordinatorId"] = this.coordinatorId;
        data["coordinatorName"] = this.coordinatorName;
        data["designerId"] = this.designerId;
        data["inquiryId"] = this.inquiryId;
        data["designerName"] = this.designerName;
        data["estimationValue"] = this.estimationValue;
        data["size"] = this.size;
        data["id"] = this.id;
        data["coordinatorImage"] = this.coordinatorImage;
        data["designerImage"] = this.designerImage;
        return data; 
    }
}

export interface ILeadDetailListDto {
    leadSourceId: number;
    leadSourceName: string;
    leadTypeId: number;
    leadTypeName: string;
    salesManagerId: number;
    salesManagerName: string;
    coordinatorId: number;
    coordinatorName: string;
    designerId: number;
    inquiryId: number;
    designerName: string;
    estimationValue: number;
    size: string;
    id: number;
    coordinatorImage: string;
    designerImage: string;
}

export class Sourcelist implements ISourcelist {
    isAssigned: boolean;
    sourceId: number;
    sourceName: string;

    constructor(data?: ISourcelist) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isAssigned = data["isAssigned"];
            this.sourceId = data["sourceId"];
            this.sourceName = data["sourceName"];
        }
    }

    static fromJS(data: any): Sourcelist {
        let result = new Sourcelist();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isAssigned"] = this.isAssigned;
        data["sourceId"] = this.sourceId;
        data["sourceName"] = this.sourceName;
        return data; 
    }
}

export interface ISourcelist {
    isAssigned: boolean;
    sourceId: number;
    sourceName: string;
}

export class InquiryLockedQuotation implements IInquiryLockedQuotation {
    quotationRefno: string;
    quotationTotal: number;

    constructor(data?: IInquiryLockedQuotation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.quotationRefno = data["quotationRefno"];
            this.quotationTotal = data["quotationTotal"];
        }
    }

    static fromJS(data: any): InquiryLockedQuotation {
        let result = new InquiryLockedQuotation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quotationRefno"] = this.quotationRefno;
        data["quotationTotal"] = this.quotationTotal;
        return data; 
    }
}

export interface IInquiryLockedQuotation {
    quotationRefno: string;
    quotationTotal: number;
}

export class InquiryInputDto implements IInquiryInputDto {
    id: number;
    designationId: number;
    companyId: number;
    mileStoneId: number;
    leadStatusId: number;
    teamId: number;
    name: string;
    address: string;
    webSite: string;
    email: string;
    mbNo: string;
    landlineNumber: string;
    remarks: string;
    subMmissionId: string;
    ipAddress: string;
    browcerinfo: string;
    departmentId: number;
    companyName: string;
    designationName: string;
    assignedbyId: number;
    contactId: number;
    junk: boolean;
    junkDate: moment.Moment;
    statusId: number;
    compatitorsId: number;
    summary: string;
    estimationValue: number;
    size: string;
    leadTypeId: number;
    sourceId: number[];
    closureDate: moment.Moment;
    lastActivity: moment.Moment;
    whyBafcoId: number;
    opportunitySourceId: number;
    locationId: number;
    cEmail: string;
    cMbNo: string;
    cLandlineNumber: string;
    won: boolean;
    total: number;
    disableQuotation: boolean;
    lost: boolean;

    constructor(data?: IInquiryInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.designationId = data["designationId"];
            this.companyId = data["companyId"];
            this.mileStoneId = data["mileStoneId"];
            this.leadStatusId = data["leadStatusId"];
            this.teamId = data["teamId"];
            this.name = data["name"];
            this.address = data["address"];
            this.webSite = data["webSite"];
            this.email = data["email"];
            this.mbNo = data["mbNo"];
            this.landlineNumber = data["landlineNumber"];
            this.remarks = data["remarks"];
            this.subMmissionId = data["subMmissionId"];
            this.ipAddress = data["ipAddress"];
            this.browcerinfo = data["browcerinfo"];
            this.departmentId = data["departmentId"];
            this.companyName = data["companyName"];
            this.designationName = data["designationName"];
            this.assignedbyId = data["assignedbyId"];
            this.contactId = data["contactId"];
            this.junk = data["junk"];
            this.junkDate = data["junkDate"] ? moment(data["junkDate"].toString()) : <any>undefined;
            this.statusId = data["statusId"];
            this.compatitorsId = data["compatitorsId"];
            this.summary = data["summary"];
            this.estimationValue = data["estimationValue"];
            this.size = data["size"];
            this.leadTypeId = data["leadTypeId"];
            if (data["sourceId"] && data["sourceId"].constructor === Array) {
                this.sourceId = [];
                for (let item of data["sourceId"])
                    this.sourceId.push(item);
            }
            this.closureDate = data["closureDate"] ? moment(data["closureDate"].toString()) : <any>undefined;
            this.lastActivity = data["lastActivity"] ? moment(data["lastActivity"].toString()) : <any>undefined;
            this.whyBafcoId = data["whyBafcoId"];
            this.opportunitySourceId = data["opportunitySourceId"];
            this.locationId = data["locationId"];
            this.cEmail = data["cEmail"];
            this.cMbNo = data["cMbNo"];
            this.cLandlineNumber = data["cLandlineNumber"];
            this.won = data["won"];
            this.total = data["total"];
            this.disableQuotation = data["disableQuotation"];
            this.lost = data["lost"];
        }
    }

    static fromJS(data: any): InquiryInputDto {
        let result = new InquiryInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["designationId"] = this.designationId;
        data["companyId"] = this.companyId;
        data["mileStoneId"] = this.mileStoneId;
        data["leadStatusId"] = this.leadStatusId;
        data["teamId"] = this.teamId;
        data["name"] = this.name;
        data["address"] = this.address;
        data["webSite"] = this.webSite;
        data["email"] = this.email;
        data["mbNo"] = this.mbNo;
        data["landlineNumber"] = this.landlineNumber;
        data["remarks"] = this.remarks;
        data["subMmissionId"] = this.subMmissionId;
        data["ipAddress"] = this.ipAddress;
        data["browcerinfo"] = this.browcerinfo;
        data["departmentId"] = this.departmentId;
        data["companyName"] = this.companyName;
        data["designationName"] = this.designationName;
        data["assignedbyId"] = this.assignedbyId;
        data["contactId"] = this.contactId;
        data["junk"] = this.junk;
        data["junkDate"] = this.junkDate ? this.junkDate.toISOString() : <any>undefined;
        data["statusId"] = this.statusId;
        data["compatitorsId"] = this.compatitorsId;
        data["summary"] = this.summary;
        data["estimationValue"] = this.estimationValue;
        data["size"] = this.size;
        data["leadTypeId"] = this.leadTypeId;
        if (this.sourceId && this.sourceId.constructor === Array) {
            data["sourceId"] = [];
            for (let item of this.sourceId)
                data["sourceId"].push(item);
        }
        data["closureDate"] = this.closureDate ? this.closureDate.toISOString() : <any>undefined;
        data["lastActivity"] = this.lastActivity ? this.lastActivity.toISOString() : <any>undefined;
        data["whyBafcoId"] = this.whyBafcoId;
        data["opportunitySourceId"] = this.opportunitySourceId;
        data["locationId"] = this.locationId;
        data["cEmail"] = this.cEmail;
        data["cMbNo"] = this.cMbNo;
        data["cLandlineNumber"] = this.cLandlineNumber;
        data["won"] = this.won;
        data["total"] = this.total;
        data["disableQuotation"] = this.disableQuotation;
        data["lost"] = this.lost;
        return data; 
    }
}

export interface IInquiryInputDto {
    id: number;
    designationId: number;
    companyId: number;
    mileStoneId: number;
    leadStatusId: number;
    teamId: number;
    name: string;
    address: string;
    webSite: string;
    email: string;
    mbNo: string;
    landlineNumber: string;
    remarks: string;
    subMmissionId: string;
    ipAddress: string;
    browcerinfo: string;
    departmentId: number;
    companyName: string;
    designationName: string;
    assignedbyId: number;
    contactId: number;
    junk: boolean;
    junkDate: moment.Moment;
    statusId: number;
    compatitorsId: number;
    summary: string;
    estimationValue: number;
    size: string;
    leadTypeId: number;
    sourceId: number[];
    closureDate: moment.Moment;
    lastActivity: moment.Moment;
    whyBafcoId: number;
    opportunitySourceId: number;
    locationId: number;
    cEmail: string;
    cMbNo: string;
    cLandlineNumber: string;
    won: boolean;
    total: number;
    disableQuotation: boolean;
    lost: boolean;
}

export class LinkedCompanyInput implements ILinkedCompanyInput {
    inquiryId: number;
    designationId: number;
    companyId: number;
    contactId: number;
    departmentId: number;
    assignedbyId: number;
    assignedbyDate: moment.Moment;
    id: number;
    teamId: number;

    constructor(data?: ILinkedCompanyInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.inquiryId = data["inquiryId"];
            this.designationId = data["designationId"];
            this.companyId = data["companyId"];
            this.contactId = data["contactId"];
            this.departmentId = data["departmentId"];
            this.assignedbyId = data["assignedbyId"];
            this.assignedbyDate = data["assignedbyDate"] ? moment(data["assignedbyDate"].toString()) : <any>undefined;
            this.id = data["id"];
            this.teamId = data["teamId"];
        }
    }

    static fromJS(data: any): LinkedCompanyInput {
        let result = new LinkedCompanyInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inquiryId"] = this.inquiryId;
        data["designationId"] = this.designationId;
        data["companyId"] = this.companyId;
        data["contactId"] = this.contactId;
        data["departmentId"] = this.departmentId;
        data["assignedbyId"] = this.assignedbyId;
        data["assignedbyDate"] = this.assignedbyDate ? this.assignedbyDate.toISOString() : <any>undefined;
        data["id"] = this.id;
        data["teamId"] = this.teamId;
        return data; 
    }
}

export interface ILinkedCompanyInput {
    inquiryId: number;
    designationId: number;
    companyId: number;
    contactId: number;
    departmentId: number;
    assignedbyId: number;
    assignedbyDate: moment.Moment;
    id: number;
    teamId: number;
}

export class LeadDetailInputDto implements ILeadDetailInputDto {
    id: number;
    leadSourceId: number;
    leadTypeId: number;
    salesManagerId: number;
    coordinatorId: number;
    designerId: number;
    inquiryId: number;
    estimationValue: number;
    size: string;

    constructor(data?: ILeadDetailInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.leadSourceId = data["leadSourceId"];
            this.leadTypeId = data["leadTypeId"];
            this.salesManagerId = data["salesManagerId"];
            this.coordinatorId = data["coordinatorId"];
            this.designerId = data["designerId"];
            this.inquiryId = data["inquiryId"];
            this.estimationValue = data["estimationValue"];
            this.size = data["size"];
        }
    }

    static fromJS(data: any): LeadDetailInputDto {
        let result = new LeadDetailInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["leadSourceId"] = this.leadSourceId;
        data["leadTypeId"] = this.leadTypeId;
        data["salesManagerId"] = this.salesManagerId;
        data["coordinatorId"] = this.coordinatorId;
        data["designerId"] = this.designerId;
        data["inquiryId"] = this.inquiryId;
        data["estimationValue"] = this.estimationValue;
        data["size"] = this.size;
        return data; 
    }
}

export interface ILeadDetailInputDto {
    id: number;
    leadSourceId: number;
    leadTypeId: number;
    salesManagerId: number;
    coordinatorId: number;
    designerId: number;
    inquiryId: number;
    estimationValue: number;
    size: string;
}

export class PagedResultDtoOfQuotationListDto implements IPagedResultDtoOfQuotationListDto {
    totalCount: number;
    items: QuotationListDto[];

    constructor(data?: IPagedResultDtoOfQuotationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(QuotationListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfQuotationListDto {
        let result = new PagedResultDtoOfQuotationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfQuotationListDto {
    totalCount: number;
    items: QuotationListDto[];
}

export class QuotationListDto implements IQuotationListDto {
    id: number;
    termsandCondition: string;
    refNo: string;
    customerId: string;
    newCompanyId: number;
    quotationStatusId: number;
    creatorUserId: number;
    salesPersonId: number;
    salesPersonName: string;
    stageId: number;
    companyName: string;
    statusName: string;
    creationTime: moment.Moment;
    sCreationTime: string;
    total: number;
    totalFormat: string;
    discountAmount: number;
    discountAmountFormat: string;
    email: string;
    mobileNumber: string;
    attentionContactId: number;
    attentionName: string;
    discount: number;
    name: string;
    submitted: boolean;
    submittedDate: moment.Moment;
    won: boolean;
    wonDate: moment.Moment;
    lost: boolean;
    lostDate: moment.Moment;
    inquiryId: number;
    inquiryName: string;
    createdBy: string;
    mileStoneId: number;
    optional: boolean;
    void: boolean;
    poNumber: string;
    reasonRemark: string;
    compatitorId: number;
    compatitorName: string;
    reasonName: string;
    reasonId: number;
    vat: number;
    vatAmount: number;
    isVat: boolean;
    salespersonImage: string;
    designerImage: string;
    designerName: string;
    orgDate: moment.Moment;
    revised: boolean;
    revisionId: number;
    rfqNo: string;
    refQNo: string;
    isApproved: boolean;
    negotiation: boolean;
    negotiationDate: moment.Moment;
    overAllDiscountAmount: number;
    overAllDiscountPercentage: number;
    paymentDate: moment.Moment;
    discountEmail: boolean;
    probability: number;

    constructor(data?: IQuotationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.termsandCondition = data["termsandCondition"];
            this.refNo = data["refNo"];
            this.customerId = data["customerId"];
            this.newCompanyId = data["newCompanyId"];
            this.quotationStatusId = data["quotationStatusId"];
            this.creatorUserId = data["creatorUserId"];
            this.salesPersonId = data["salesPersonId"];
            this.salesPersonName = data["salesPersonName"];
            this.stageId = data["stageId"];
            this.companyName = data["companyName"];
            this.statusName = data["statusName"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.sCreationTime = data["sCreationTime"];
            this.total = data["total"];
            this.totalFormat = data["totalFormat"];
            this.discountAmount = data["discountAmount"];
            this.discountAmountFormat = data["discountAmountFormat"];
            this.email = data["email"];
            this.mobileNumber = data["mobileNumber"];
            this.attentionContactId = data["attentionContactId"];
            this.attentionName = data["attentionName"];
            this.discount = data["discount"];
            this.name = data["name"];
            this.submitted = data["submitted"];
            this.submittedDate = data["submittedDate"] ? moment(data["submittedDate"].toString()) : <any>undefined;
            this.won = data["won"];
            this.wonDate = data["wonDate"] ? moment(data["wonDate"].toString()) : <any>undefined;
            this.lost = data["lost"];
            this.lostDate = data["lostDate"] ? moment(data["lostDate"].toString()) : <any>undefined;
            this.inquiryId = data["inquiryId"];
            this.inquiryName = data["inquiryName"];
            this.createdBy = data["createdBy"];
            this.mileStoneId = data["mileStoneId"];
            this.optional = data["optional"];
            this.void = data["void"];
            this.poNumber = data["poNumber"];
            this.reasonRemark = data["reasonRemark"];
            this.compatitorId = data["compatitorId"];
            this.compatitorName = data["compatitorName"];
            this.reasonName = data["reasonName"];
            this.reasonId = data["reasonId"];
            this.vat = data["vat"];
            this.vatAmount = data["vatAmount"];
            this.isVat = data["isVat"];
            this.salespersonImage = data["salespersonImage"];
            this.designerImage = data["designerImage"];
            this.designerName = data["designerName"];
            this.orgDate = data["orgDate"] ? moment(data["orgDate"].toString()) : <any>undefined;
            this.revised = data["revised"];
            this.revisionId = data["revisionId"];
            this.rfqNo = data["rfqNo"];
            this.refQNo = data["refQNo"];
            this.isApproved = data["isApproved"];
            this.negotiation = data["negotiation"];
            this.negotiationDate = data["negotiationDate"] ? moment(data["negotiationDate"].toString()) : <any>undefined;
            this.overAllDiscountAmount = data["overAllDiscountAmount"];
            this.overAllDiscountPercentage = data["overAllDiscountPercentage"];
            this.paymentDate = data["paymentDate"] ? moment(data["paymentDate"].toString()) : <any>undefined;
            this.discountEmail = data["discountEmail"];
            this.probability = data["probability"];
        }
    }

    static fromJS(data: any): QuotationListDto {
        let result = new QuotationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["termsandCondition"] = this.termsandCondition;
        data["refNo"] = this.refNo;
        data["customerId"] = this.customerId;
        data["newCompanyId"] = this.newCompanyId;
        data["quotationStatusId"] = this.quotationStatusId;
        data["creatorUserId"] = this.creatorUserId;
        data["salesPersonId"] = this.salesPersonId;
        data["salesPersonName"] = this.salesPersonName;
        data["stageId"] = this.stageId;
        data["companyName"] = this.companyName;
        data["statusName"] = this.statusName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["sCreationTime"] = this.sCreationTime;
        data["total"] = this.total;
        data["totalFormat"] = this.totalFormat;
        data["discountAmount"] = this.discountAmount;
        data["discountAmountFormat"] = this.discountAmountFormat;
        data["email"] = this.email;
        data["mobileNumber"] = this.mobileNumber;
        data["attentionContactId"] = this.attentionContactId;
        data["attentionName"] = this.attentionName;
        data["discount"] = this.discount;
        data["name"] = this.name;
        data["submitted"] = this.submitted;
        data["submittedDate"] = this.submittedDate ? this.submittedDate.toISOString() : <any>undefined;
        data["won"] = this.won;
        data["wonDate"] = this.wonDate ? this.wonDate.toISOString() : <any>undefined;
        data["lost"] = this.lost;
        data["lostDate"] = this.lostDate ? this.lostDate.toISOString() : <any>undefined;
        data["inquiryId"] = this.inquiryId;
        data["inquiryName"] = this.inquiryName;
        data["createdBy"] = this.createdBy;
        data["mileStoneId"] = this.mileStoneId;
        data["optional"] = this.optional;
        data["void"] = this.void;
        data["poNumber"] = this.poNumber;
        data["reasonRemark"] = this.reasonRemark;
        data["compatitorId"] = this.compatitorId;
        data["compatitorName"] = this.compatitorName;
        data["reasonName"] = this.reasonName;
        data["reasonId"] = this.reasonId;
        data["vat"] = this.vat;
        data["vatAmount"] = this.vatAmount;
        data["isVat"] = this.isVat;
        data["salespersonImage"] = this.salespersonImage;
        data["designerImage"] = this.designerImage;
        data["designerName"] = this.designerName;
        data["orgDate"] = this.orgDate ? this.orgDate.toISOString() : <any>undefined;
        data["revised"] = this.revised;
        data["revisionId"] = this.revisionId;
        data["rfqNo"] = this.rfqNo;
        data["refQNo"] = this.refQNo;
        data["isApproved"] = this.isApproved;
        data["negotiation"] = this.negotiation;
        data["negotiationDate"] = this.negotiationDate ? this.negotiationDate.toISOString() : <any>undefined;
        data["overAllDiscountAmount"] = this.overAllDiscountAmount;
        data["overAllDiscountPercentage"] = this.overAllDiscountPercentage;
        data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>undefined;
        data["discountEmail"] = this.discountEmail;
        data["probability"] = this.probability;
        return data; 
    }
}

export interface IQuotationListDto {
    id: number;
    termsandCondition: string;
    refNo: string;
    customerId: string;
    newCompanyId: number;
    quotationStatusId: number;
    creatorUserId: number;
    salesPersonId: number;
    salesPersonName: string;
    stageId: number;
    companyName: string;
    statusName: string;
    creationTime: moment.Moment;
    sCreationTime: string;
    total: number;
    totalFormat: string;
    discountAmount: number;
    discountAmountFormat: string;
    email: string;
    mobileNumber: string;
    attentionContactId: number;
    attentionName: string;
    discount: number;
    name: string;
    submitted: boolean;
    submittedDate: moment.Moment;
    won: boolean;
    wonDate: moment.Moment;
    lost: boolean;
    lostDate: moment.Moment;
    inquiryId: number;
    inquiryName: string;
    createdBy: string;
    mileStoneId: number;
    optional: boolean;
    void: boolean;
    poNumber: string;
    reasonRemark: string;
    compatitorId: number;
    compatitorName: string;
    reasonName: string;
    reasonId: number;
    vat: number;
    vatAmount: number;
    isVat: boolean;
    salespersonImage: string;
    designerImage: string;
    designerName: string;
    orgDate: moment.Moment;
    revised: boolean;
    revisionId: number;
    rfqNo: string;
    refQNo: string;
    isApproved: boolean;
    negotiation: boolean;
    negotiationDate: moment.Moment;
    overAllDiscountAmount: number;
    overAllDiscountPercentage: number;
    paymentDate: moment.Moment;
    discountEmail: boolean;
    probability: number;
}

export class ListResultDtoOfEnqActList implements IListResultDtoOfEnqActList {
    items: EnqActList[];

    constructor(data?: IListResultDtoOfEnqActList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(EnqActList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfEnqActList {
        let result = new ListResultDtoOfEnqActList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfEnqActList {
    items: EnqActList[];
}

export class EnqActList implements IEnqActList {
    id: number;
    enquiryId: number;
    enquiryNo: string;
    activityId: number;
    mileStoneId: number;
    activityName: string;
    title: string;
    message: string;
    frontMessage: string;
    createdby: string;
    createdId: number;
    creationTime: moment.Moment;
    profilePicture: string;
    contactId: number;
    contactName: string;
    previousStatus: string;
    currentStatus: string;
    colorName: string;
    className: string;

    constructor(data?: IEnqActList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.enquiryId = data["enquiryId"];
            this.enquiryNo = data["enquiryNo"];
            this.activityId = data["activityId"];
            this.mileStoneId = data["mileStoneId"];
            this.activityName = data["activityName"];
            this.title = data["title"];
            this.message = data["message"];
            this.frontMessage = data["frontMessage"];
            this.createdby = data["createdby"];
            this.createdId = data["createdId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.profilePicture = data["profilePicture"];
            this.contactId = data["contactId"];
            this.contactName = data["contactName"];
            this.previousStatus = data["previousStatus"];
            this.currentStatus = data["currentStatus"];
            this.colorName = data["colorName"];
            this.className = data["className"];
        }
    }

    static fromJS(data: any): EnqActList {
        let result = new EnqActList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["enquiryId"] = this.enquiryId;
        data["enquiryNo"] = this.enquiryNo;
        data["activityId"] = this.activityId;
        data["mileStoneId"] = this.mileStoneId;
        data["activityName"] = this.activityName;
        data["title"] = this.title;
        data["message"] = this.message;
        data["frontMessage"] = this.frontMessage;
        data["createdby"] = this.createdby;
        data["createdId"] = this.createdId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["profilePicture"] = this.profilePicture;
        data["contactId"] = this.contactId;
        data["contactName"] = this.contactName;
        data["previousStatus"] = this.previousStatus;
        data["currentStatus"] = this.currentStatus;
        data["colorName"] = this.colorName;
        data["className"] = this.className;
        return data; 
    }
}

export interface IEnqActList {
    id: number;
    enquiryId: number;
    enquiryNo: string;
    activityId: number;
    mileStoneId: number;
    activityName: string;
    title: string;
    message: string;
    frontMessage: string;
    createdby: string;
    createdId: number;
    creationTime: moment.Moment;
    profilePicture: string;
    contactId: number;
    contactName: string;
    previousStatus: string;
    currentStatus: string;
    colorName: string;
    className: string;
}

export class EnqActCreate implements IEnqActCreate {
    id: number;
    title: string;
    message: string;
    activityId: number;
    enquiryId: number;
    contactId: number;
    previousStatus: string;
    currentStatus: string;

    constructor(data?: IEnqActCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.title = data["title"];
            this.message = data["message"];
            this.activityId = data["activityId"];
            this.enquiryId = data["enquiryId"];
            this.contactId = data["contactId"];
            this.previousStatus = data["previousStatus"];
            this.currentStatus = data["currentStatus"];
        }
    }

    static fromJS(data: any): EnqActCreate {
        let result = new EnqActCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["message"] = this.message;
        data["activityId"] = this.activityId;
        data["enquiryId"] = this.enquiryId;
        data["contactId"] = this.contactId;
        data["previousStatus"] = this.previousStatus;
        data["currentStatus"] = this.currentStatus;
        return data; 
    }
}

export interface IEnqActCreate {
    id: number;
    title: string;
    message: string;
    activityId: number;
    enquiryId: number;
    contactId: number;
    previousStatus: string;
    currentStatus: string;
}

export class ListResultDtoOfEnqActCommentList implements IListResultDtoOfEnqActCommentList {
    items: EnqActCommentList[];

    constructor(data?: IListResultDtoOfEnqActCommentList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(EnqActCommentList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfEnqActCommentList {
        let result = new ListResultDtoOfEnqActCommentList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfEnqActCommentList {
    items: EnqActCommentList[];
}

export class EnqActCommentList implements IEnqActCommentList {
    id: number;
    activityTrackId: number;
    message: string;
    createdby: string;
    createdId: number;
    sessionId: number;
    creationTime: moment.Moment;
    profilePicture: string;

    constructor(data?: IEnqActCommentList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.activityTrackId = data["activityTrackId"];
            this.message = data["message"];
            this.createdby = data["createdby"];
            this.createdId = data["createdId"];
            this.sessionId = data["sessionId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.profilePicture = data["profilePicture"];
        }
    }

    static fromJS(data: any): EnqActCommentList {
        let result = new EnqActCommentList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["activityTrackId"] = this.activityTrackId;
        data["message"] = this.message;
        data["createdby"] = this.createdby;
        data["createdId"] = this.createdId;
        data["sessionId"] = this.sessionId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["profilePicture"] = this.profilePicture;
        return data; 
    }
}

export interface IEnqActCommentList {
    id: number;
    activityTrackId: number;
    message: string;
    createdby: string;
    createdId: number;
    sessionId: number;
    creationTime: moment.Moment;
    profilePicture: string;
}

export class EnqActCommentCreate implements IEnqActCommentCreate {
    id: number;
    activityTrackId: number;
    message: string;

    constructor(data?: IEnqActCommentCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.activityTrackId = data["activityTrackId"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): EnqActCommentCreate {
        let result = new EnqActCommentCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["activityTrackId"] = this.activityTrackId;
        data["message"] = this.message;
        return data; 
    }
}

export interface IEnqActCommentCreate {
    id: number;
    activityTrackId: number;
    message: string;
}

export class GetEActivity implements IGetEActivity {
    activities: EnqActList;

    constructor(data?: IGetEActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.activities = data["activities"] ? EnqActList.fromJS(data["activities"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetEActivity {
        let result = new GetEActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activities"] = this.activities ? this.activities.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetEActivity {
    activities: EnqActList;
}

export class LocationInputDto implements ILocationInputDto {
    id: number;
    locationName: string;
    locationCode: string;
    cityId: number;

    constructor(data?: ILocationInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.locationName = data["locationName"];
            this.locationCode = data["locationCode"];
            this.cityId = data["cityId"];
        }
    }

    static fromJS(data: any): LocationInputDto {
        let result = new LocationInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["locationName"] = this.locationName;
        data["locationCode"] = this.locationCode;
        data["cityId"] = this.cityId;
        return data; 
    }
}

export interface ILocationInputDto {
    id: number;
    locationName: string;
    locationCode: string;
    cityId: number;
}

export class DesignationInputDto implements IDesignationInputDto {
    designationCode: string;
    desiginationName: string;

    constructor(data?: IDesignationInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.designationCode = data["designationCode"];
            this.desiginationName = data["desiginationName"];
        }
    }

    static fromJS(data: any): DesignationInputDto {
        let result = new DesignationInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["designationCode"] = this.designationCode;
        data["desiginationName"] = this.desiginationName;
        return data; 
    }
}

export interface IDesignationInputDto {
    designationCode: string;
    desiginationName: string;
}

export class CheckInquiryInput implements ICheckInquiryInput {
    inquiryName: string;

    constructor(data?: ICheckInquiryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.inquiryName = data["inquiryName"];
        }
    }

    static fromJS(data: any): CheckInquiryInput {
        let result = new CheckInquiryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inquiryName"] = this.inquiryName;
        return data; 
    }
}

export interface ICheckInquiryInput {
    inquiryName: string;
}

export class ListResultDtoOfJobActivityList implements IListResultDtoOfJobActivityList {
    items: JobActivityList[];

    constructor(data?: IListResultDtoOfJobActivityList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(JobActivityList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfJobActivityList {
        let result = new ListResultDtoOfJobActivityList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfJobActivityList {
    items: JobActivityList[];
}

export class JobActivityList implements IJobActivityList {
    id: number;
    title: string;
    remark: string;
    designerId: number;
    designerName: string;
    inquiryId: number;
    inquiryName: string;
    isopen: boolean;
    allottedDate: moment.Moment;
    endDate: moment.Moment;
    jobNumber: string;
    startDate: moment.Moment;
    sallottedDate: string;
    sendDate: string;
    sstartDate: string;
    screationTime: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: IJobActivityList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.title = data["title"];
            this.remark = data["remark"];
            this.designerId = data["designerId"];
            this.designerName = data["designerName"];
            this.inquiryId = data["inquiryId"];
            this.inquiryName = data["inquiryName"];
            this.isopen = data["isopen"];
            this.allottedDate = data["allottedDate"] ? moment(data["allottedDate"].toString()) : <any>undefined;
            this.endDate = data["endDate"] ? moment(data["endDate"].toString()) : <any>undefined;
            this.jobNumber = data["jobNumber"];
            this.startDate = data["startDate"] ? moment(data["startDate"].toString()) : <any>undefined;
            this.sallottedDate = data["sallottedDate"];
            this.sendDate = data["sendDate"];
            this.sstartDate = data["sstartDate"];
            this.screationTime = data["screationTime"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): JobActivityList {
        let result = new JobActivityList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["remark"] = this.remark;
        data["designerId"] = this.designerId;
        data["designerName"] = this.designerName;
        data["inquiryId"] = this.inquiryId;
        data["inquiryName"] = this.inquiryName;
        data["isopen"] = this.isopen;
        data["allottedDate"] = this.allottedDate ? this.allottedDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["jobNumber"] = this.jobNumber;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["sallottedDate"] = this.sallottedDate;
        data["sendDate"] = this.sendDate;
        data["sstartDate"] = this.sstartDate;
        data["screationTime"] = this.screationTime;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IJobActivityList {
    id: number;
    title: string;
    remark: string;
    designerId: number;
    designerName: string;
    inquiryId: number;
    inquiryName: string;
    isopen: boolean;
    allottedDate: moment.Moment;
    endDate: moment.Moment;
    jobNumber: string;
    startDate: moment.Moment;
    sallottedDate: string;
    sendDate: string;
    sstartDate: string;
    screationTime: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class GetJobActivity implements IGetJobActivity {
    jobActivityList: JobActivityList;

    constructor(data?: IGetJobActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.jobActivityList = data["jobActivityList"] ? JobActivityList.fromJS(data["jobActivityList"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetJobActivity {
        let result = new GetJobActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["jobActivityList"] = this.jobActivityList ? this.jobActivityList.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetJobActivity {
    jobActivityList: JobActivityList;
}

export class CreateJobActivityInput implements ICreateJobActivityInput {
    id: number;
    title: string;
    remark: string;
    designerId: number;
    inquiryId: number;
    isopen: boolean;
    allottedDate: moment.Moment;
    endDate: moment.Moment;
    jobNumber: string;
    startDate: moment.Moment;

    constructor(data?: ICreateJobActivityInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.title = data["title"];
            this.remark = data["remark"];
            this.designerId = data["designerId"];
            this.inquiryId = data["inquiryId"];
            this.isopen = data["isopen"];
            this.allottedDate = data["allottedDate"] ? moment(data["allottedDate"].toString()) : <any>undefined;
            this.endDate = data["endDate"] ? moment(data["endDate"].toString()) : <any>undefined;
            this.jobNumber = data["jobNumber"];
            this.startDate = data["startDate"] ? moment(data["startDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateJobActivityInput {
        let result = new CreateJobActivityInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["remark"] = this.remark;
        data["designerId"] = this.designerId;
        data["inquiryId"] = this.inquiryId;
        data["isopen"] = this.isopen;
        data["allottedDate"] = this.allottedDate ? this.allottedDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["jobNumber"] = this.jobNumber;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICreateJobActivityInput {
    id: number;
    title: string;
    remark: string;
    designerId: number;
    inquiryId: number;
    isopen: boolean;
    allottedDate: moment.Moment;
    endDate: moment.Moment;
    jobNumber: string;
    startDate: moment.Moment;
}

export class PagedResultDtoOfJobActivityList implements IPagedResultDtoOfJobActivityList {
    totalCount: number;
    items: JobActivityList[];

    constructor(data?: IPagedResultDtoOfJobActivityList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(JobActivityList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfJobActivityList {
        let result = new PagedResultDtoOfJobActivityList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfJobActivityList {
    totalCount: number;
    items: JobActivityList[];
}

export class SalesmanChange implements ISalesmanChange {
    companyId: number;
    salesmanId: number;

    constructor(data?: ISalesmanChange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.companyId = data["companyId"];
            this.salesmanId = data["salesmanId"];
        }
    }

    static fromJS(data: any): SalesmanChange {
        let result = new SalesmanChange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        data["salesmanId"] = this.salesmanId;
        return data; 
    }
}

export interface ISalesmanChange {
    companyId: number;
    salesmanId: number;
}

export class GetLanguagesOutput implements IGetLanguagesOutput {
    defaultLanguageName: string;
    items: ApplicationLanguageListDto[];

    constructor(data?: IGetLanguagesOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.defaultLanguageName = data["defaultLanguageName"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ApplicationLanguageListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetLanguagesOutput {
        let result = new GetLanguagesOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultLanguageName"] = this.defaultLanguageName;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetLanguagesOutput {
    defaultLanguageName: string;
    items: ApplicationLanguageListDto[];
}

export class ApplicationLanguageListDto implements IApplicationLanguageListDto {
    tenantId: number;
    name: string;
    displayName: string;
    icon: string;
    isDisabled: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: IApplicationLanguageListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.icon = data["icon"];
            this.isDisabled = data["isDisabled"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ApplicationLanguageListDto {
        let result = new ApplicationLanguageListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["icon"] = this.icon;
        data["isDisabled"] = this.isDisabled;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IApplicationLanguageListDto {
    tenantId: number;
    name: string;
    displayName: string;
    icon: string;
    isDisabled: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;
}

export class GetLanguageForEditOutput implements IGetLanguageForEditOutput {
    language: ApplicationLanguageEditDto;
    languageNames: ComboboxItemDto[];
    flags: ComboboxItemDto[];

    constructor(data?: IGetLanguageForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.language = data["language"] ? ApplicationLanguageEditDto.fromJS(data["language"]) : <any>undefined;
            if (data["languageNames"] && data["languageNames"].constructor === Array) {
                this.languageNames = [];
                for (let item of data["languageNames"])
                    this.languageNames.push(ComboboxItemDto.fromJS(item));
            }
            if (data["flags"] && data["flags"].constructor === Array) {
                this.flags = [];
                for (let item of data["flags"])
                    this.flags.push(ComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetLanguageForEditOutput {
        let result = new GetLanguageForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        if (this.languageNames && this.languageNames.constructor === Array) {
            data["languageNames"] = [];
            for (let item of this.languageNames)
                data["languageNames"].push(item.toJSON());
        }
        if (this.flags && this.flags.constructor === Array) {
            data["flags"] = [];
            for (let item of this.flags)
                data["flags"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetLanguageForEditOutput {
    language: ApplicationLanguageEditDto;
    languageNames: ComboboxItemDto[];
    flags: ComboboxItemDto[];
}

export class ApplicationLanguageEditDto implements IApplicationLanguageEditDto {
    id: number;
    name: string;
    icon: string;
    isEnabled: boolean;

    constructor(data?: IApplicationLanguageEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.icon = data["icon"];
            this.isEnabled = data["isEnabled"];
        }
    }

    static fromJS(data: any): ApplicationLanguageEditDto {
        let result = new ApplicationLanguageEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["icon"] = this.icon;
        data["isEnabled"] = this.isEnabled;
        return data; 
    }
}

export interface IApplicationLanguageEditDto {
    id: number;
    name: string;
    icon: string;
    isEnabled: boolean;
}

export class ComboboxItemDto implements IComboboxItemDto {
    value: string;
    displayText: string;
    isSelected: boolean;

    constructor(data?: IComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.displayText = data["displayText"];
            this.isSelected = data["isSelected"];
        }
    }

    static fromJS(data: any): ComboboxItemDto {
        let result = new ComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        data["isSelected"] = this.isSelected;
        return data; 
    }
}

export interface IComboboxItemDto {
    value: string;
    displayText: string;
    isSelected: boolean;
}

export class CreateOrUpdateLanguageInput implements ICreateOrUpdateLanguageInput {
    language: ApplicationLanguageEditDto = new ApplicationLanguageEditDto();

    constructor(data?: ICreateOrUpdateLanguageInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.language = data["language"] ? ApplicationLanguageEditDto.fromJS(data["language"]) : new ApplicationLanguageEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdateLanguageInput {
        let result = new CreateOrUpdateLanguageInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateOrUpdateLanguageInput {
    language: ApplicationLanguageEditDto;
}

export class SetDefaultLanguageInput implements ISetDefaultLanguageInput {
    name: string;

    constructor(data?: ISetDefaultLanguageInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): SetDefaultLanguageInput {
        let result = new SetDefaultLanguageInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ISetDefaultLanguageInput {
    name: string;
}

export class PagedResultDtoOfLanguageTextListDto implements IPagedResultDtoOfLanguageTextListDto {
    totalCount: number;
    items: LanguageTextListDto[];

    constructor(data?: IPagedResultDtoOfLanguageTextListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LanguageTextListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLanguageTextListDto {
        let result = new PagedResultDtoOfLanguageTextListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfLanguageTextListDto {
    totalCount: number;
    items: LanguageTextListDto[];
}

export class LanguageTextListDto implements ILanguageTextListDto {
    key: string;
    baseValue: string;
    targetValue: string;

    constructor(data?: ILanguageTextListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.key = data["key"];
            this.baseValue = data["baseValue"];
            this.targetValue = data["targetValue"];
        }
    }

    static fromJS(data: any): LanguageTextListDto {
        let result = new LanguageTextListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["baseValue"] = this.baseValue;
        data["targetValue"] = this.targetValue;
        return data; 
    }
}

export interface ILanguageTextListDto {
    key: string;
    baseValue: string;
    targetValue: string;
}

export class UpdateLanguageTextInput implements IUpdateLanguageTextInput {
    languageName: string;
    sourceName: string;
    key: string;
    value: string;

    constructor(data?: IUpdateLanguageTextInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.languageName = data["languageName"];
            this.sourceName = data["sourceName"];
            this.key = data["key"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): UpdateLanguageTextInput {
        let result = new UpdateLanguageTextInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName;
        data["sourceName"] = this.sourceName;
        data["key"] = this.key;
        data["value"] = this.value;
        return data; 
    }
}

export interface IUpdateLanguageTextInput {
    languageName: string;
    sourceName: string;
    key: string;
    value: string;
}

export class ListResultDtoOfLeadReasonList implements IListResultDtoOfLeadReasonList {
    items: LeadReasonList[];

    constructor(data?: IListResultDtoOfLeadReasonList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LeadReasonList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfLeadReasonList {
        let result = new ListResultDtoOfLeadReasonList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfLeadReasonList {
    items: LeadReasonList[];
}

export class LeadReasonList implements ILeadReasonList {
    id: number;
    leadReasonName: string;
    leadReasonCode: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: ILeadReasonList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.leadReasonName = data["leadReasonName"];
            this.leadReasonCode = data["leadReasonCode"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): LeadReasonList {
        let result = new LeadReasonList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["leadReasonName"] = this.leadReasonName;
        data["leadReasonCode"] = this.leadReasonCode;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface ILeadReasonList {
    id: number;
    leadReasonName: string;
    leadReasonCode: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class GetLeadReason implements IGetLeadReason {
    leadreasons: LeadReasonList;

    constructor(data?: IGetLeadReason) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.leadreasons = data["leadreasons"] ? LeadReasonList.fromJS(data["leadreasons"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetLeadReason {
        let result = new GetLeadReason();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["leadreasons"] = this.leadreasons ? this.leadreasons.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetLeadReason {
    leadreasons: LeadReasonList;
}

export class CreateLeadReasonInput implements ICreateLeadReasonInput {
    id: number;
    leadReasonName: string;
    leadReasonCode: string;

    constructor(data?: ICreateLeadReasonInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.leadReasonName = data["leadReasonName"];
            this.leadReasonCode = data["leadReasonCode"];
        }
    }

    static fromJS(data: any): CreateLeadReasonInput {
        let result = new CreateLeadReasonInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["leadReasonName"] = this.leadReasonName;
        data["leadReasonCode"] = this.leadReasonCode;
        return data; 
    }
}

export interface ICreateLeadReasonInput {
    id: number;
    leadReasonName: string;
    leadReasonCode: string;
}

export class ListResultDtoOfLeadStatusList implements IListResultDtoOfLeadStatusList {
    items: LeadStatusList[];

    constructor(data?: IListResultDtoOfLeadStatusList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LeadStatusList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfLeadStatusList {
        let result = new ListResultDtoOfLeadStatusList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfLeadStatusList {
    items: LeadStatusList[];
}

export class LeadStatusList implements ILeadStatusList {
    id: number;
    leadStatusCode: string;
    leadStatusName: string;

    constructor(data?: ILeadStatusList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.leadStatusCode = data["leadStatusCode"];
            this.leadStatusName = data["leadStatusName"];
        }
    }

    static fromJS(data: any): LeadStatusList {
        let result = new LeadStatusList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["leadStatusCode"] = this.leadStatusCode;
        data["leadStatusName"] = this.leadStatusName;
        return data; 
    }
}

export interface ILeadStatusList {
    id: number;
    leadStatusCode: string;
    leadStatusName: string;
}

export class GetLeadStatus implements IGetLeadStatus {
    leadstatus: LeadStatusList;

    constructor(data?: IGetLeadStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.leadstatus = data["leadstatus"] ? LeadStatusList.fromJS(data["leadstatus"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetLeadStatus {
        let result = new GetLeadStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["leadstatus"] = this.leadstatus ? this.leadstatus.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetLeadStatus {
    leadstatus: LeadStatusList;
}

export class CreateLeadStatusInput implements ICreateLeadStatusInput {
    id: number;
    leadStatusCode: string;
    leadStatusName: string;

    constructor(data?: ICreateLeadStatusInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.leadStatusCode = data["leadStatusCode"];
            this.leadStatusName = data["leadStatusName"];
        }
    }

    static fromJS(data: any): CreateLeadStatusInput {
        let result = new CreateLeadStatusInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["leadStatusCode"] = this.leadStatusCode;
        data["leadStatusName"] = this.leadStatusName;
        return data; 
    }
}

export interface ICreateLeadStatusInput {
    id: number;
    leadStatusCode: string;
    leadStatusName: string;
}

export class ListResultDtoOfLeadTypeList implements IListResultDtoOfLeadTypeList {
    items: LeadTypeList[];

    constructor(data?: IListResultDtoOfLeadTypeList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LeadTypeList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfLeadTypeList {
        let result = new ListResultDtoOfLeadTypeList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfLeadTypeList {
    items: LeadTypeList[];
}

export class LeadTypeList implements ILeadTypeList {
    id: number;
    leadTypeName: string;
    leadTypeCode: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: ILeadTypeList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.leadTypeName = data["leadTypeName"];
            this.leadTypeCode = data["leadTypeCode"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): LeadTypeList {
        let result = new LeadTypeList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["leadTypeName"] = this.leadTypeName;
        data["leadTypeCode"] = this.leadTypeCode;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface ILeadTypeList {
    id: number;
    leadTypeName: string;
    leadTypeCode: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class GetLeadType implements IGetLeadType {
    leadtypes: LeadTypeList;

    constructor(data?: IGetLeadType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.leadtypes = data["leadtypes"] ? LeadTypeList.fromJS(data["leadtypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetLeadType {
        let result = new GetLeadType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["leadtypes"] = this.leadtypes ? this.leadtypes.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetLeadType {
    leadtypes: LeadTypeList;
}

export class CreateLeadTypeInput implements ICreateLeadTypeInput {
    id: number;
    leadTypeName: string;
    leadTypeCode: string;

    constructor(data?: ICreateLeadTypeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.leadTypeName = data["leadTypeName"];
            this.leadTypeCode = data["leadTypeCode"];
        }
    }

    static fromJS(data: any): CreateLeadTypeInput {
        let result = new CreateLeadTypeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["leadTypeName"] = this.leadTypeName;
        data["leadTypeCode"] = this.leadTypeCode;
        return data; 
    }
}

export interface ICreateLeadTypeInput {
    id: number;
    leadTypeName: string;
    leadTypeCode: string;
}

export class ListResultDtoOfLineTypeListDto implements IListResultDtoOfLineTypeListDto {
    items: LineTypeListDto[];

    constructor(data?: IListResultDtoOfLineTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LineTypeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfLineTypeListDto {
        let result = new ListResultDtoOfLineTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfLineTypeListDto {
    items: LineTypeListDto[];
}

export class LineTypeListDto implements ILineTypeListDto {
    id: number;
    lineTypeName: string;
    lineTypeCode: string;

    constructor(data?: ILineTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.lineTypeName = data["lineTypeName"];
            this.lineTypeCode = data["lineTypeCode"];
        }
    }

    static fromJS(data: any): LineTypeListDto {
        let result = new LineTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["lineTypeName"] = this.lineTypeName;
        data["lineTypeCode"] = this.lineTypeCode;
        return data; 
    }
}

export interface ILineTypeListDto {
    id: number;
    lineTypeName: string;
    lineTypeCode: string;
}

export class GetLineType implements IGetLineType {
    lineTypes: LineTypeListDto;

    constructor(data?: IGetLineType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.lineTypes = data["lineTypes"] ? LineTypeListDto.fromJS(data["lineTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetLineType {
        let result = new GetLineType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lineTypes"] = this.lineTypes ? this.lineTypes.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetLineType {
    lineTypes: LineTypeListDto;
}

export class LineTypeInputDto implements ILineTypeInputDto {
    id: number;
    lineTypeName: string;
    lineTypeCode: string;

    constructor(data?: ILineTypeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.lineTypeName = data["lineTypeName"];
            this.lineTypeCode = data["lineTypeCode"];
        }
    }

    static fromJS(data: any): LineTypeInputDto {
        let result = new LineTypeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["lineTypeName"] = this.lineTypeName;
        data["lineTypeCode"] = this.lineTypeCode;
        return data; 
    }
}

export interface ILineTypeInputDto {
    id: number;
    lineTypeName: string;
    lineTypeCode: string;
}

export class PagedResultDtoOfLocationListDto implements IPagedResultDtoOfLocationListDto {
    totalCount: number;
    items: LocationListDto[];

    constructor(data?: IPagedResultDtoOfLocationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LocationListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLocationListDto {
        let result = new PagedResultDtoOfLocationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfLocationListDto {
    totalCount: number;
    items: LocationListDto[];
}

export class LocationListDto implements ILocationListDto {
    id: number;
    locationName: string;
    locationCode: string;
    cityId: number;
    cityName: string;

    constructor(data?: ILocationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.locationName = data["locationName"];
            this.locationCode = data["locationCode"];
            this.cityId = data["cityId"];
            this.cityName = data["cityName"];
        }
    }

    static fromJS(data: any): LocationListDto {
        let result = new LocationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["locationName"] = this.locationName;
        data["locationCode"] = this.locationCode;
        data["cityId"] = this.cityId;
        data["cityName"] = this.cityName;
        return data; 
    }
}

export interface ILocationListDto {
    id: number;
    locationName: string;
    locationCode: string;
    cityId: number;
    cityName: string;
}

export class GetLocation implements IGetLocation {
    locations: LocationListDto;

    constructor(data?: IGetLocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.locations = data["locations"] ? LocationListDto.fromJS(data["locations"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetLocation {
        let result = new GetLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locations"] = this.locations ? this.locations.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetLocation {
    locations: LocationListDto;
}

export class PagedResultDtoOfMileStoneList implements IPagedResultDtoOfMileStoneList {
    totalCount: number;
    items: MileStoneList[];

    constructor(data?: IPagedResultDtoOfMileStoneList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(MileStoneList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMileStoneList {
        let result = new PagedResultDtoOfMileStoneList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfMileStoneList {
    totalCount: number;
    items: MileStoneList[];
}

export class MileStoneList implements IMileStoneList {
    id: number;
    mileStoneCode: string;
    mileStoneName: string;
    sourceTypeName: string;
    sourceTypeId: number;
    rottingPeriod: number;
    isQuotation: boolean;
    resetActivity: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: IMileStoneList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.mileStoneCode = data["mileStoneCode"];
            this.mileStoneName = data["mileStoneName"];
            this.sourceTypeName = data["sourceTypeName"];
            this.sourceTypeId = data["sourceTypeId"];
            this.rottingPeriod = data["rottingPeriod"];
            this.isQuotation = data["isQuotation"];
            this.resetActivity = data["resetActivity"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): MileStoneList {
        let result = new MileStoneList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["mileStoneCode"] = this.mileStoneCode;
        data["mileStoneName"] = this.mileStoneName;
        data["sourceTypeName"] = this.sourceTypeName;
        data["sourceTypeId"] = this.sourceTypeId;
        data["rottingPeriod"] = this.rottingPeriod;
        data["isQuotation"] = this.isQuotation;
        data["resetActivity"] = this.resetActivity;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IMileStoneList {
    id: number;
    mileStoneCode: string;
    mileStoneName: string;
    sourceTypeName: string;
    sourceTypeId: number;
    rottingPeriod: number;
    isQuotation: boolean;
    resetActivity: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class GetMileStone implements IGetMileStone {
    mileStones: MileStoneList;
    sourceTyped: SourceTypees[];
    stages: StageDetailListDto[];

    constructor(data?: IGetMileStone) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.mileStones = data["mileStones"] ? MileStoneList.fromJS(data["mileStones"]) : <any>undefined;
            if (data["sourceTyped"] && data["sourceTyped"].constructor === Array) {
                this.sourceTyped = [];
                for (let item of data["sourceTyped"])
                    this.sourceTyped.push(SourceTypees.fromJS(item));
            }
            if (data["stages"] && data["stages"].constructor === Array) {
                this.stages = [];
                for (let item of data["stages"])
                    this.stages.push(StageDetailListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetMileStone {
        let result = new GetMileStone();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mileStones"] = this.mileStones ? this.mileStones.toJSON() : <any>undefined;
        if (this.sourceTyped && this.sourceTyped.constructor === Array) {
            data["sourceTyped"] = [];
            for (let item of this.sourceTyped)
                data["sourceTyped"].push(item.toJSON());
        }
        if (this.stages && this.stages.constructor === Array) {
            data["stages"] = [];
            for (let item of this.stages)
                data["stages"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetMileStone {
    mileStones: MileStoneList;
    sourceTyped: SourceTypees[];
    stages: StageDetailListDto[];
}

export class SourceTypees implements ISourceTypees {
    sourceTypeId: number;
    sourceTypeName: string;

    constructor(data?: ISourceTypees) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sourceTypeId = data["sourceTypeId"];
            this.sourceTypeName = data["sourceTypeName"];
        }
    }

    static fromJS(data: any): SourceTypees {
        let result = new SourceTypees();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sourceTypeId"] = this.sourceTypeId;
        data["sourceTypeName"] = this.sourceTypeName;
        return data; 
    }
}

export interface ISourceTypees {
    sourceTypeId: number;
    sourceTypeName: string;
}

export class StageDetailListDto implements IStageDetailListDto {
    id: number;
    stageId: number;
    stageName: string;
    value: number;

    constructor(data?: IStageDetailListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.stageId = data["stageId"];
            this.stageName = data["stageName"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): StageDetailListDto {
        let result = new StageDetailListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["stageId"] = this.stageId;
        data["stageName"] = this.stageName;
        data["value"] = this.value;
        return data; 
    }
}

export interface IStageDetailListDto {
    id: number;
    stageId: number;
    stageName: string;
    value: number;
}

export class MileStoneDetailInput implements IMileStoneDetailInput {
    mileStoneId: number;
    stageId: number;

    constructor(data?: IMileStoneDetailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.mileStoneId = data["mileStoneId"];
            this.stageId = data["stageId"];
        }
    }

    static fromJS(data: any): MileStoneDetailInput {
        let result = new MileStoneDetailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mileStoneId"] = this.mileStoneId;
        data["stageId"] = this.stageId;
        return data; 
    }
}

export interface IMileStoneDetailInput {
    mileStoneId: number;
    stageId: number;
}

export class CreateMileStoneInput implements ICreateMileStoneInput {
    id: number;
    mileStoneCode: string;
    mileStoneName: string;
    sourceTypeId: number;
    rottingPeriod: number;
    isQuotation: boolean;
    resetActivity: boolean;

    constructor(data?: ICreateMileStoneInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.mileStoneCode = data["mileStoneCode"];
            this.mileStoneName = data["mileStoneName"];
            this.sourceTypeId = data["sourceTypeId"];
            this.rottingPeriod = data["rottingPeriod"];
            this.isQuotation = data["isQuotation"];
            this.resetActivity = data["resetActivity"];
        }
    }

    static fromJS(data: any): CreateMileStoneInput {
        let result = new CreateMileStoneInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["mileStoneCode"] = this.mileStoneCode;
        data["mileStoneName"] = this.mileStoneName;
        data["sourceTypeId"] = this.sourceTypeId;
        data["rottingPeriod"] = this.rottingPeriod;
        data["isQuotation"] = this.isQuotation;
        data["resetActivity"] = this.resetActivity;
        return data; 
    }
}

export interface ICreateMileStoneInput {
    id: number;
    mileStoneCode: string;
    mileStoneName: string;
    sourceTypeId: number;
    rottingPeriod: number;
    isQuotation: boolean;
    resetActivity: boolean;
}

export class PagedResultDtoOfNewCompanyListDto implements IPagedResultDtoOfNewCompanyListDto {
    totalCount: number;
    items: NewCompanyListDto[];

    constructor(data?: IPagedResultDtoOfNewCompanyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NewCompanyListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfNewCompanyListDto {
        let result = new PagedResultDtoOfNewCompanyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfNewCompanyListDto {
    totalCount: number;
    items: NewCompanyListDto[];
}

export class NewCompanyListDto implements INewCompanyListDto {
    id: number;
    companyName: string;
    newCustomerTypeId: number;
    customerTypeName: string;
    accountManagerId: number;
    managedBy: string;
    customerId: string;
    tradeLicense: string;
    trNnumber: string;
    approvedById: number;
    isApproved: boolean;
    approvedBy: string;
    createdBy: string;
    createdUserId: number;
    creationTime: moment.Moment;
    industryId: number;
    industryName: string;
    discountable: number;
    unDiscountable: number;

    constructor(data?: INewCompanyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.companyName = data["companyName"];
            this.newCustomerTypeId = data["newCustomerTypeId"];
            this.customerTypeName = data["customerTypeName"];
            this.accountManagerId = data["accountManagerId"];
            this.managedBy = data["managedBy"];
            this.customerId = data["customerId"];
            this.tradeLicense = data["tradeLicense"];
            this.trNnumber = data["trNnumber"];
            this.approvedById = data["approvedById"];
            this.isApproved = data["isApproved"];
            this.approvedBy = data["approvedBy"];
            this.createdBy = data["createdBy"];
            this.createdUserId = data["createdUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.industryId = data["industryId"];
            this.industryName = data["industryName"];
            this.discountable = data["discountable"];
            this.unDiscountable = data["unDiscountable"];
        }
    }

    static fromJS(data: any): NewCompanyListDto {
        let result = new NewCompanyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyName"] = this.companyName;
        data["newCustomerTypeId"] = this.newCustomerTypeId;
        data["customerTypeName"] = this.customerTypeName;
        data["accountManagerId"] = this.accountManagerId;
        data["managedBy"] = this.managedBy;
        data["customerId"] = this.customerId;
        data["tradeLicense"] = this.tradeLicense;
        data["trNnumber"] = this.trNnumber;
        data["approvedById"] = this.approvedById;
        data["isApproved"] = this.isApproved;
        data["approvedBy"] = this.approvedBy;
        data["createdBy"] = this.createdBy;
        data["createdUserId"] = this.createdUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["industryId"] = this.industryId;
        data["industryName"] = this.industryName;
        data["discountable"] = this.discountable;
        data["unDiscountable"] = this.unDiscountable;
        return data; 
    }
}

export interface INewCompanyListDto {
    id: number;
    companyName: string;
    newCustomerTypeId: number;
    customerTypeName: string;
    accountManagerId: number;
    managedBy: string;
    customerId: string;
    tradeLicense: string;
    trNnumber: string;
    approvedById: number;
    isApproved: boolean;
    approvedBy: string;
    createdBy: string;
    createdUserId: number;
    creationTime: moment.Moment;
    industryId: number;
    industryName: string;
    discountable: number;
    unDiscountable: number;
}

export class PagedResultDtoOfNewContactListDto implements IPagedResultDtoOfNewContactListDto {
    totalCount: number;
    items: NewContactListDto[];

    constructor(data?: IPagedResultDtoOfNewContactListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NewContactListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfNewContactListDto {
        let result = new PagedResultDtoOfNewContactListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfNewContactListDto {
    totalCount: number;
    items: NewContactListDto[];
}

export class NewContactListDto implements INewContactListDto {
    id: number;
    contactName: string;
    companyName: string;
    newCustomerTypeId: number;
    customerTypeName: string;
    contactTypeName: string;
    titleId: number;
    title: string;
    lastName: string;
    industryName: string;
    designationId: number;
    designationName: string;

    constructor(data?: INewContactListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.contactName = data["contactName"];
            this.companyName = data["companyName"];
            this.newCustomerTypeId = data["newCustomerTypeId"];
            this.customerTypeName = data["customerTypeName"];
            this.contactTypeName = data["contactTypeName"];
            this.titleId = data["titleId"];
            this.title = data["title"];
            this.lastName = data["lastName"];
            this.industryName = data["industryName"];
            this.designationId = data["designationId"];
            this.designationName = data["designationName"];
        }
    }

    static fromJS(data: any): NewContactListDto {
        let result = new NewContactListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["contactName"] = this.contactName;
        data["companyName"] = this.companyName;
        data["newCustomerTypeId"] = this.newCustomerTypeId;
        data["customerTypeName"] = this.customerTypeName;
        data["contactTypeName"] = this.contactTypeName;
        data["titleId"] = this.titleId;
        data["title"] = this.title;
        data["lastName"] = this.lastName;
        data["industryName"] = this.industryName;
        data["designationId"] = this.designationId;
        data["designationName"] = this.designationName;
        return data; 
    }
}

export interface INewContactListDto {
    id: number;
    contactName: string;
    companyName: string;
    newCustomerTypeId: number;
    customerTypeName: string;
    contactTypeName: string;
    titleId: number;
    title: string;
    lastName: string;
    industryName: string;
    designationId: number;
    designationName: string;
}

export class ListResultDtoOfNewContactListDto implements IListResultDtoOfNewContactListDto {
    items: NewContactListDto[];

    constructor(data?: IListResultDtoOfNewContactListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NewContactListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfNewContactListDto {
        let result = new ListResultDtoOfNewContactListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfNewContactListDto {
    items: NewContactListDto[];
}

export class CreateCompanyOrContact implements ICreateCompanyOrContact {
    id: number;
    name: string;
    newCustomerTypeId: number;
    discountable: number;
    unDiscountable: number;
    newCompanyId: number;
    accountManagerId: number;
    titleId: number;
    lastName: string;
    industryId: number;
    customerId: string;
    approvedById: number;
    isApproved: boolean;
    tradeLicense: string;
    trNnumber: string;
    designationId: number;

    constructor(data?: ICreateCompanyOrContact) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.newCustomerTypeId = data["newCustomerTypeId"];
            this.discountable = data["discountable"];
            this.unDiscountable = data["unDiscountable"];
            this.newCompanyId = data["newCompanyId"];
            this.accountManagerId = data["accountManagerId"];
            this.titleId = data["titleId"];
            this.lastName = data["lastName"];
            this.industryId = data["industryId"];
            this.customerId = data["customerId"];
            this.approvedById = data["approvedById"];
            this.isApproved = data["isApproved"];
            this.tradeLicense = data["tradeLicense"];
            this.trNnumber = data["trNnumber"];
            this.designationId = data["designationId"];
        }
    }

    static fromJS(data: any): CreateCompanyOrContact {
        let result = new CreateCompanyOrContact();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["newCustomerTypeId"] = this.newCustomerTypeId;
        data["discountable"] = this.discountable;
        data["unDiscountable"] = this.unDiscountable;
        data["newCompanyId"] = this.newCompanyId;
        data["accountManagerId"] = this.accountManagerId;
        data["titleId"] = this.titleId;
        data["lastName"] = this.lastName;
        data["industryId"] = this.industryId;
        data["customerId"] = this.customerId;
        data["approvedById"] = this.approvedById;
        data["isApproved"] = this.isApproved;
        data["tradeLicense"] = this.tradeLicense;
        data["trNnumber"] = this.trNnumber;
        data["designationId"] = this.designationId;
        return data; 
    }
}

export interface ICreateCompanyOrContact {
    id: number;
    name: string;
    newCustomerTypeId: number;
    discountable: number;
    unDiscountable: number;
    newCompanyId: number;
    accountManagerId: number;
    titleId: number;
    lastName: string;
    industryId: number;
    customerId: string;
    approvedById: number;
    isApproved: boolean;
    tradeLicense: string;
    trNnumber: string;
    designationId: number;
}

export class CreateAddressInfo implements ICreateAddressInfo {
    id: number;
    newCompanyId: number;
    newContacId: number;
    newInfoTypeId: number;
    address1: string;
    address2: string;
    cityId: number;
    countryName: string;

    constructor(data?: ICreateAddressInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.newCompanyId = data["newCompanyId"];
            this.newContacId = data["newContacId"];
            this.newInfoTypeId = data["newInfoTypeId"];
            this.address1 = data["address1"];
            this.address2 = data["address2"];
            this.cityId = data["cityId"];
            this.countryName = data["countryName"];
        }
    }

    static fromJS(data: any): CreateAddressInfo {
        let result = new CreateAddressInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["newCompanyId"] = this.newCompanyId;
        data["newContacId"] = this.newContacId;
        data["newInfoTypeId"] = this.newInfoTypeId;
        data["address1"] = this.address1;
        data["address2"] = this.address2;
        data["cityId"] = this.cityId;
        data["countryName"] = this.countryName;
        return data; 
    }
}

export interface ICreateAddressInfo {
    id: number;
    newCompanyId: number;
    newContacId: number;
    newInfoTypeId: number;
    address1: string;
    address2: string;
    cityId: number;
    countryName: string;
}

export class CreateContactInfo implements ICreateContactInfo {
    id: number;
    newCompanyId: number;
    newContacId: number;
    newInfoTypeId: number;
    infoData: string;

    constructor(data?: ICreateContactInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.newCompanyId = data["newCompanyId"];
            this.newContacId = data["newContacId"];
            this.newInfoTypeId = data["newInfoTypeId"];
            this.infoData = data["infoData"];
        }
    }

    static fromJS(data: any): CreateContactInfo {
        let result = new CreateContactInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["newCompanyId"] = this.newCompanyId;
        data["newContacId"] = this.newContacId;
        data["newInfoTypeId"] = this.newInfoTypeId;
        data["infoData"] = this.infoData;
        return data; 
    }
}

export interface ICreateContactInfo {
    id: number;
    newCompanyId: number;
    newContacId: number;
    newInfoTypeId: number;
    infoData: string;
}

export class GetNewAddressInfo implements IGetNewAddressInfo {
    createAddressInfos: CreateAddressInfo;

    constructor(data?: IGetNewAddressInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.createAddressInfos = data["createAddressInfos"] ? CreateAddressInfo.fromJS(data["createAddressInfos"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetNewAddressInfo {
        let result = new GetNewAddressInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createAddressInfos"] = this.createAddressInfos ? this.createAddressInfos.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetNewAddressInfo {
    createAddressInfos: CreateAddressInfo;
}

export class GetNewContactInfo implements IGetNewContactInfo {
    createContactInfos: CreateContactInfo;

    constructor(data?: IGetNewContactInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.createContactInfos = data["createContactInfos"] ? CreateContactInfo.fromJS(data["createContactInfos"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetNewContactInfo {
        let result = new GetNewContactInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createContactInfos"] = this.createContactInfos ? this.createContactInfos.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetNewContactInfo {
    createContactInfos: CreateContactInfo;
}

export class CompanyInputDto implements ICompanyInputDto {
    companyName: string;

    constructor(data?: ICompanyInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.companyName = data["companyName"];
        }
    }

    static fromJS(data: any): CompanyInputDto {
        let result = new CompanyInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyName"] = this.companyName;
        return data; 
    }
}

export interface ICompanyInputDto {
    companyName: string;
}

export class ContactInputDto implements IContactInputDto {
    firstName: string;
    lastName: string;
    newCompanyId: number;

    constructor(data?: IContactInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.newCompanyId = data["newCompanyId"];
        }
    }

    static fromJS(data: any): ContactInputDto {
        let result = new ContactInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["newCompanyId"] = this.newCompanyId;
        return data; 
    }
}

export interface IContactInputDto {
    firstName: string;
    lastName: string;
    newCompanyId: number;
}

export class EntityDto implements IEntityDto {
    id: number;

    constructor(data?: IEntityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDto {
        let result = new EntityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDto {
    id: number;
}

export class EnquiryContactInput implements IEnquiryContactInput {
    email: string;
    mobileNo: string;
    telephone: string;

    constructor(data?: IEnquiryContactInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
            this.mobileNo = data["mobileNo"];
            this.telephone = data["telephone"];
        }
    }

    static fromJS(data: any): EnquiryContactInput {
        let result = new EnquiryContactInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["mobileNo"] = this.mobileNo;
        data["telephone"] = this.telephone;
        return data; 
    }
}

export interface IEnquiryContactInput {
    email: string;
    mobileNo: string;
    telephone: string;
}

export class GetNewContacts implements IGetNewContacts {
    id: number;
    name: string;
    newCustomerTypeId: number;
    companyId: number;
    companyName: string;
    titleId: number;
    lastName: string;
    country: string;
    addressInfo: CreateAddressInfo[];
    contactinfo: CreateContactInfo[];
    designationId: number;

    constructor(data?: IGetNewContacts) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.newCustomerTypeId = data["newCustomerTypeId"];
            this.companyId = data["companyId"];
            this.companyName = data["companyName"];
            this.titleId = data["titleId"];
            this.lastName = data["lastName"];
            this.country = data["country"];
            if (data["addressInfo"] && data["addressInfo"].constructor === Array) {
                this.addressInfo = [];
                for (let item of data["addressInfo"])
                    this.addressInfo.push(CreateAddressInfo.fromJS(item));
            }
            if (data["contactinfo"] && data["contactinfo"].constructor === Array) {
                this.contactinfo = [];
                for (let item of data["contactinfo"])
                    this.contactinfo.push(CreateContactInfo.fromJS(item));
            }
            this.designationId = data["designationId"];
        }
    }

    static fromJS(data: any): GetNewContacts {
        let result = new GetNewContacts();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["newCustomerTypeId"] = this.newCustomerTypeId;
        data["companyId"] = this.companyId;
        data["companyName"] = this.companyName;
        data["titleId"] = this.titleId;
        data["lastName"] = this.lastName;
        data["country"] = this.country;
        if (this.addressInfo && this.addressInfo.constructor === Array) {
            data["addressInfo"] = [];
            for (let item of this.addressInfo)
                data["addressInfo"].push(item.toJSON());
        }
        if (this.contactinfo && this.contactinfo.constructor === Array) {
            data["contactinfo"] = [];
            for (let item of this.contactinfo)
                data["contactinfo"].push(item.toJSON());
        }
        data["designationId"] = this.designationId;
        return data; 
    }
}

export interface IGetNewContacts {
    id: number;
    name: string;
    newCustomerTypeId: number;
    companyId: number;
    companyName: string;
    titleId: number;
    lastName: string;
    country: string;
    addressInfo: CreateAddressInfo[];
    contactinfo: CreateContactInfo[];
    designationId: number;
}

export class PagedResultDtoOfNewCustomerTypeListDto implements IPagedResultDtoOfNewCustomerTypeListDto {
    totalCount: number;
    items: NewCustomerTypeListDto[];

    constructor(data?: IPagedResultDtoOfNewCustomerTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NewCustomerTypeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfNewCustomerTypeListDto {
        let result = new PagedResultDtoOfNewCustomerTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfNewCustomerTypeListDto {
    totalCount: number;
    items: NewCustomerTypeListDto[];
}

export class NewCustomerTypeListDto implements INewCustomerTypeListDto {
    id: number;
    title: string;
    company: boolean;

    constructor(data?: INewCustomerTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.title = data["title"];
            this.company = data["company"];
        }
    }

    static fromJS(data: any): NewCustomerTypeListDto {
        let result = new NewCustomerTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["company"] = this.company;
        return data; 
    }
}

export interface INewCustomerTypeListDto {
    id: number;
    title: string;
    company: boolean;
}

export class GetNewCustomerType implements IGetNewCustomerType {
    newCustomerTypes: NewCustomerTypeListDto;

    constructor(data?: IGetNewCustomerType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.newCustomerTypes = data["newCustomerTypes"] ? NewCustomerTypeListDto.fromJS(data["newCustomerTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetNewCustomerType {
        let result = new GetNewCustomerType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newCustomerTypes"] = this.newCustomerTypes ? this.newCustomerTypes.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetNewCustomerType {
    newCustomerTypes: NewCustomerTypeListDto;
}

export class NewCustomerTypeInputDto implements INewCustomerTypeInputDto {
    id: number;
    title: string;
    company: boolean;

    constructor(data?: INewCustomerTypeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.title = data["title"];
            this.company = data["company"];
        }
    }

    static fromJS(data: any): NewCustomerTypeInputDto {
        let result = new NewCustomerTypeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["company"] = this.company;
        return data; 
    }
}

export interface INewCustomerTypeInputDto {
    id: number;
    title: string;
    company: boolean;
}

export class PagedResultDtoOfNewInfoTypeListDto implements IPagedResultDtoOfNewInfoTypeListDto {
    totalCount: number;
    items: NewInfoTypeListDto[];

    constructor(data?: IPagedResultDtoOfNewInfoTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NewInfoTypeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfNewInfoTypeListDto {
        let result = new PagedResultDtoOfNewInfoTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfNewInfoTypeListDto {
    totalCount: number;
    items: NewInfoTypeListDto[];
}

export class NewInfoTypeListDto implements INewInfoTypeListDto {
    id: number;
    contactName: string;
    info: boolean;

    constructor(data?: INewInfoTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.contactName = data["contactName"];
            this.info = data["info"];
        }
    }

    static fromJS(data: any): NewInfoTypeListDto {
        let result = new NewInfoTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["contactName"] = this.contactName;
        data["info"] = this.info;
        return data; 
    }
}

export interface INewInfoTypeListDto {
    id: number;
    contactName: string;
    info: boolean;
}

export class GetNewInfoType implements IGetNewInfoType {
    newInfoTypes: NewInfoTypeListDto;

    constructor(data?: IGetNewInfoType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.newInfoTypes = data["newInfoTypes"] ? NewInfoTypeListDto.fromJS(data["newInfoTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetNewInfoType {
        let result = new GetNewInfoType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newInfoTypes"] = this.newInfoTypes ? this.newInfoTypes.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetNewInfoType {
    newInfoTypes: NewInfoTypeListDto;
}

export class NewInfoTypeInputDto implements INewInfoTypeInputDto {
    id: number;
    contactName: string;
    info: boolean;

    constructor(data?: INewInfoTypeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.contactName = data["contactName"];
            this.info = data["info"];
        }
    }

    static fromJS(data: any): NewInfoTypeInputDto {
        let result = new NewInfoTypeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["contactName"] = this.contactName;
        data["info"] = this.info;
        return data; 
    }
}

export interface INewInfoTypeInputDto {
    id: number;
    contactName: string;
    info: boolean;
}

export class GetNotificationsOutput implements IGetNotificationsOutput {
    unreadCount: number;
    totalCount: number;
    items: UserNotification[];

    constructor(data?: IGetNotificationsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unreadCount = data["unreadCount"];
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserNotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationsOutput {
        let result = new GetNotificationsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unreadCount"] = this.unreadCount;
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetNotificationsOutput {
    unreadCount: number;
    totalCount: number;
    items: UserNotification[];
}

export class UserNotification implements IUserNotification {
    tenantId: number;
    userId: number;
    state: UserNotificationState;
    notification: TenantNotification;
    id: string;

    constructor(data?: IUserNotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.state = data["state"];
            this.notification = data["notification"] ? TenantNotification.fromJS(data["notification"]) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserNotification {
        let result = new UserNotification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["state"] = this.state;
        data["notification"] = this.notification ? this.notification.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserNotification {
    tenantId: number;
    userId: number;
    state: UserNotificationState;
    notification: TenantNotification;
    id: string;
}

export class TenantNotification implements ITenantNotification {
    tenantId: number;
    notificationName: string;
    data: NotificationData;
    entityType: string;
    entityTypeName: string;
    entityId: any;
    severity: TenantNotificationSeverity;
    creationTime: moment.Moment;
    id: string;

    constructor(data?: ITenantNotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.notificationName = data["notificationName"];
            this.data = data["data"] ? NotificationData.fromJS(data["data"]) : <any>undefined;
            this.entityType = data["entityType"];
            this.entityTypeName = data["entityTypeName"];
            if (data["entityId"]) {
                this.entityId = {};
                for (let key in data["entityId"]) {
                    if (data["entityId"].hasOwnProperty(key))
                        this.entityId[key] = data["entityId"][key];
                }
            }
            this.severity = data["severity"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantNotification {
        let result = new TenantNotification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["notificationName"] = this.notificationName;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["entityType"] = this.entityType;
        data["entityTypeName"] = this.entityTypeName;
        if (this.entityId) {
            data["entityId"] = {};
            for (let key in this.entityId) {
                if (this.entityId.hasOwnProperty(key))
                    data["entityId"][key] = this.entityId[key];
            }
        }
        data["severity"] = this.severity;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantNotification {
    tenantId: number;
    notificationName: string;
    data: NotificationData;
    entityType: string;
    entityTypeName: string;
    entityId: any;
    severity: TenantNotificationSeverity;
    creationTime: moment.Moment;
    id: string;
}

export class NotificationData implements INotificationData {
    type: string;
    properties: { [key: string] : any; };

    constructor(data?: INotificationData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            if (data["properties"]) {
                this.properties = {};
                for (let key in data["properties"]) {
                    if (data["properties"].hasOwnProperty(key))
                        this.properties[key] = data["properties"][key];
                }
            }
        }
    }

    static fromJS(data: any): NotificationData {
        let result = new NotificationData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    data["properties"][key] = this.properties[key];
            }
        }
        return data; 
    }
}

export interface INotificationData {
    type: string;
    properties: { [key: string] : any; };
}

export class EntityDtoOfGuid implements IEntityDtoOfGuid {
    id: string;

    constructor(data?: IEntityDtoOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfGuid {
        let result = new EntityDtoOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDtoOfGuid {
    id: string;
}

export class GetNotificationSettingsOutput implements IGetNotificationSettingsOutput {
    receiveNotifications: boolean;
    notifications: NotificationSubscriptionWithDisplayNameDto[];

    constructor(data?: IGetNotificationSettingsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.receiveNotifications = data["receiveNotifications"];
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [];
                for (let item of data["notifications"])
                    this.notifications.push(NotificationSubscriptionWithDisplayNameDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationSettingsOutput {
        let result = new GetNotificationSettingsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["receiveNotifications"] = this.receiveNotifications;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetNotificationSettingsOutput {
    receiveNotifications: boolean;
    notifications: NotificationSubscriptionWithDisplayNameDto[];
}

export class NotificationSubscriptionWithDisplayNameDto implements INotificationSubscriptionWithDisplayNameDto {
    displayName: string;
    description: string;
    name: string;
    isSubscribed: boolean;

    constructor(data?: INotificationSubscriptionWithDisplayNameDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.name = data["name"];
            this.isSubscribed = data["isSubscribed"];
        }
    }

    static fromJS(data: any): NotificationSubscriptionWithDisplayNameDto {
        let result = new NotificationSubscriptionWithDisplayNameDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["name"] = this.name;
        data["isSubscribed"] = this.isSubscribed;
        return data; 
    }
}

export interface INotificationSubscriptionWithDisplayNameDto {
    displayName: string;
    description: string;
    name: string;
    isSubscribed: boolean;
}

export class UpdateNotificationSettingsInput implements IUpdateNotificationSettingsInput {
    receiveNotifications: boolean;
    notifications: NotificationSubscriptionDto[];

    constructor(data?: IUpdateNotificationSettingsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.receiveNotifications = data["receiveNotifications"];
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [];
                for (let item of data["notifications"])
                    this.notifications.push(NotificationSubscriptionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateNotificationSettingsInput {
        let result = new UpdateNotificationSettingsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["receiveNotifications"] = this.receiveNotifications;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateNotificationSettingsInput {
    receiveNotifications: boolean;
    notifications: NotificationSubscriptionDto[];
}

export class NotificationSubscriptionDto implements INotificationSubscriptionDto {
    name: string;
    isSubscribed: boolean;

    constructor(data?: INotificationSubscriptionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.isSubscribed = data["isSubscribed"];
        }
    }

    static fromJS(data: any): NotificationSubscriptionDto {
        let result = new NotificationSubscriptionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isSubscribed"] = this.isSubscribed;
        return data; 
    }
}

export interface INotificationSubscriptionDto {
    name: string;
    isSubscribed: boolean;
}

export class ListResultDtoOfOpportunitySourceList implements IListResultDtoOfOpportunitySourceList {
    items: OpportunitySourceList[];

    constructor(data?: IListResultDtoOfOpportunitySourceList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(OpportunitySourceList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfOpportunitySourceList {
        let result = new ListResultDtoOfOpportunitySourceList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfOpportunitySourceList {
    items: OpportunitySourceList[];
}

export class OpportunitySourceList implements IOpportunitySourceList {
    id: number;
    code: string;
    name: string;

    constructor(data?: IOpportunitySourceList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): OpportunitySourceList {
        let result = new OpportunitySourceList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data; 
    }
}

export interface IOpportunitySourceList {
    id: number;
    code: string;
    name: string;
}

export class GetOpportunitySource implements IGetOpportunitySource {
    sources: OpportunitySourceInput;

    constructor(data?: IGetOpportunitySource) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sources = data["sources"] ? OpportunitySourceInput.fromJS(data["sources"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetOpportunitySource {
        let result = new GetOpportunitySource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sources"] = this.sources ? this.sources.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetOpportunitySource {
    sources: OpportunitySourceInput;
}

export class OpportunitySourceInput implements IOpportunitySourceInput {
    id: number;
    code: string;
    name: string;

    constructor(data?: IOpportunitySourceInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): OpportunitySourceInput {
        let result = new OpportunitySourceInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data; 
    }
}

export interface IOpportunitySourceInput {
    id: number;
    code: string;
    name: string;
}

export class ListResultDtoOfOrganizationUnitDto implements IListResultDtoOfOrganizationUnitDto {
    items: OrganizationUnitDto[];

    constructor(data?: IListResultDtoOfOrganizationUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(OrganizationUnitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfOrganizationUnitDto {
        let result = new ListResultDtoOfOrganizationUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfOrganizationUnitDto {
    items: OrganizationUnitDto[];
}

export class OrganizationUnitDto implements IOrganizationUnitDto {
    parentId: number;
    code: string;
    displayName: string;
    memberCount: number;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: IOrganizationUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentId = data["parentId"];
            this.code = data["code"];
            this.displayName = data["displayName"];
            this.memberCount = data["memberCount"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrganizationUnitDto {
        let result = new OrganizationUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["code"] = this.code;
        data["displayName"] = this.displayName;
        data["memberCount"] = this.memberCount;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrganizationUnitDto {
    parentId: number;
    code: string;
    displayName: string;
    memberCount: number;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;
}

export class PagedResultDtoOfOrganizationUnitUserListDto implements IPagedResultDtoOfOrganizationUnitUserListDto {
    totalCount: number;
    items: OrganizationUnitUserListDto[];

    constructor(data?: IPagedResultDtoOfOrganizationUnitUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(OrganizationUnitUserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOrganizationUnitUserListDto {
        let result = new PagedResultDtoOfOrganizationUnitUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfOrganizationUnitUserListDto {
    totalCount: number;
    items: OrganizationUnitUserListDto[];
}

export class OrganizationUnitUserListDto implements IOrganizationUnitUserListDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    profilePictureId: string;
    addedTime: moment.Moment;
    id: number;

    constructor(data?: IOrganizationUnitUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.profilePictureId = data["profilePictureId"];
            this.addedTime = data["addedTime"] ? moment(data["addedTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrganizationUnitUserListDto {
        let result = new OrganizationUnitUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["profilePictureId"] = this.profilePictureId;
        data["addedTime"] = this.addedTime ? this.addedTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrganizationUnitUserListDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    profilePictureId: string;
    addedTime: moment.Moment;
    id: number;
}

export class CreateOrganizationUnitInput implements ICreateOrganizationUnitInput {
    parentId: number;
    displayName: string;

    constructor(data?: ICreateOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentId = data["parentId"];
            this.displayName = data["displayName"];
        }
    }

    static fromJS(data: any): CreateOrganizationUnitInput {
        let result = new CreateOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["displayName"] = this.displayName;
        return data; 
    }
}

export interface ICreateOrganizationUnitInput {
    parentId: number;
    displayName: string;
}

export class UpdateOrganizationUnitInput implements IUpdateOrganizationUnitInput {
    id: number;
    displayName: string;

    constructor(data?: IUpdateOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
        }
    }

    static fromJS(data: any): UpdateOrganizationUnitInput {
        let result = new UpdateOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        return data; 
    }
}

export interface IUpdateOrganizationUnitInput {
    id: number;
    displayName: string;
}

export class MoveOrganizationUnitInput implements IMoveOrganizationUnitInput {
    id: number;
    newParentId: number;

    constructor(data?: IMoveOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.newParentId = data["newParentId"];
        }
    }

    static fromJS(data: any): MoveOrganizationUnitInput {
        let result = new MoveOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["newParentId"] = this.newParentId;
        return data; 
    }
}

export interface IMoveOrganizationUnitInput {
    id: number;
    newParentId: number;
}

export class UsersToOrganizationUnitInput implements IUsersToOrganizationUnitInput {
    userIds: number[];
    organizationUnitId: number;

    constructor(data?: IUsersToOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["userIds"] && data["userIds"].constructor === Array) {
                this.userIds = [];
                for (let item of data["userIds"])
                    this.userIds.push(item);
            }
            this.organizationUnitId = data["organizationUnitId"];
        }
    }

    static fromJS(data: any): UsersToOrganizationUnitInput {
        let result = new UsersToOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.userIds && this.userIds.constructor === Array) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        data["organizationUnitId"] = this.organizationUnitId;
        return data; 
    }
}

export interface IUsersToOrganizationUnitInput {
    userIds: number[];
    organizationUnitId: number;
}

export class FindOrganizationUnitUsersInput implements IFindOrganizationUnitUsersInput {
    organizationUnitId: number;
    maxResultCount: number;
    skipCount: number;
    filter: string;

    constructor(data?: IFindOrganizationUnitUsersInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
            this.filter = data["filter"];
        }
    }

    static fromJS(data: any): FindOrganizationUnitUsersInput {
        let result = new FindOrganizationUnitUsersInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["filter"] = this.filter;
        return data; 
    }
}

export interface IFindOrganizationUnitUsersInput {
    organizationUnitId: number;
    maxResultCount: number;
    skipCount: number;
    filter: string;
}

export class ListResultDtoOfOrientationListDto implements IListResultDtoOfOrientationListDto {
    items: OrientationListDto[];

    constructor(data?: IListResultDtoOfOrientationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(OrientationListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfOrientationListDto {
        let result = new ListResultDtoOfOrientationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfOrientationListDto {
    items: OrientationListDto[];
}

export class OrientationListDto implements IOrientationListDto {
    id: number;
    orientationCode: string;
    orientationName: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: IOrientationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.orientationCode = data["orientationCode"];
            this.orientationName = data["orientationName"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): OrientationListDto {
        let result = new OrientationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orientationCode"] = this.orientationCode;
        data["orientationName"] = this.orientationName;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IOrientationListDto {
    id: number;
    orientationCode: string;
    orientationName: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class GetOrientation implements IGetOrientation {
    orientation: OrientationListDto;

    constructor(data?: IGetOrientation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orientation = data["orientation"] ? OrientationListDto.fromJS(data["orientation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetOrientation {
        let result = new GetOrientation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orientation"] = this.orientation ? this.orientation.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetOrientation {
    orientation: OrientationListDto;
}

export class OrientationInputDto implements IOrientationInputDto {
    id: number;
    orientationCode: string;
    orientationName: string;

    constructor(data?: IOrientationInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.orientationCode = data["orientationCode"];
            this.orientationName = data["orientationName"];
        }
    }

    static fromJS(data: any): OrientationInputDto {
        let result = new OrientationInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orientationCode"] = this.orientationCode;
        data["orientationName"] = this.orientationName;
        return data; 
    }
}

export interface IOrientationInputDto {
    id: number;
    orientationCode: string;
    orientationName: string;
}

export class PaymentInfoDto implements IPaymentInfoDto {
    edition: EditionSelectDto;
    additionalPrice: number;

    constructor(data?: IPaymentInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionSelectDto.fromJS(data["edition"]) : <any>undefined;
            this.additionalPrice = data["additionalPrice"];
        }
    }

    static fromJS(data: any): PaymentInfoDto {
        let result = new PaymentInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        data["additionalPrice"] = this.additionalPrice;
        return data; 
    }
}

export interface IPaymentInfoDto {
    edition: EditionSelectDto;
    additionalPrice: number;
}

export class EditionSelectDto implements IEditionSelectDto {
    id: number;
    name: string;
    displayName: string;
    expiringEditionId: number;
    monthlyPrice: number;
    annualPrice: number;
    trialDayCount: number;
    waitingDayAfterExpire: number;
    isFree: boolean;
    additionalData: AdditionalData;

    constructor(data?: IEditionSelectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.expiringEditionId = data["expiringEditionId"];
            this.monthlyPrice = data["monthlyPrice"];
            this.annualPrice = data["annualPrice"];
            this.trialDayCount = data["trialDayCount"];
            this.waitingDayAfterExpire = data["waitingDayAfterExpire"];
            this.isFree = data["isFree"];
            this.additionalData = data["additionalData"] ? AdditionalData.fromJS(data["additionalData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EditionSelectDto {
        let result = new EditionSelectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["expiringEditionId"] = this.expiringEditionId;
        data["monthlyPrice"] = this.monthlyPrice;
        data["annualPrice"] = this.annualPrice;
        data["trialDayCount"] = this.trialDayCount;
        data["waitingDayAfterExpire"] = this.waitingDayAfterExpire;
        data["isFree"] = this.isFree;
        data["additionalData"] = this.additionalData ? this.additionalData.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEditionSelectDto {
    id: number;
    name: string;
    displayName: string;
    expiringEditionId: number;
    monthlyPrice: number;
    annualPrice: number;
    trialDayCount: number;
    waitingDayAfterExpire: number;
    isFree: boolean;
    additionalData: AdditionalData;
}

export class CreatePaymentDto implements ICreatePaymentDto {
    editionId: number;
    editionPaymentType: CreatePaymentDtoEditionPaymentType;
    paymentPeriodType: CreatePaymentDtoPaymentPeriodType;
    subscriptionPaymentGatewayType: CreatePaymentDtoSubscriptionPaymentGatewayType;

    constructor(data?: ICreatePaymentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.editionId = data["editionId"];
            this.editionPaymentType = data["editionPaymentType"];
            this.paymentPeriodType = data["paymentPeriodType"];
            this.subscriptionPaymentGatewayType = data["subscriptionPaymentGatewayType"];
        }
    }

    static fromJS(data: any): CreatePaymentDto {
        let result = new CreatePaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editionId"] = this.editionId;
        data["editionPaymentType"] = this.editionPaymentType;
        data["paymentPeriodType"] = this.paymentPeriodType;
        data["subscriptionPaymentGatewayType"] = this.subscriptionPaymentGatewayType;
        return data; 
    }
}

export interface ICreatePaymentDto {
    editionId: number;
    editionPaymentType: CreatePaymentDtoEditionPaymentType;
    paymentPeriodType: CreatePaymentDtoPaymentPeriodType;
    subscriptionPaymentGatewayType: CreatePaymentDtoSubscriptionPaymentGatewayType;
}

export class ExecutePaymentDto implements IExecutePaymentDto {
    gateway: ExecutePaymentDtoGateway;
    editionPaymentType: ExecutePaymentDtoEditionPaymentType;
    editionId: number;
    paymentPeriodType: ExecutePaymentDtoPaymentPeriodType;
    additionalData: { [key: string] : string; };

    constructor(data?: IExecutePaymentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.gateway = data["gateway"];
            this.editionPaymentType = data["editionPaymentType"];
            this.editionId = data["editionId"];
            this.paymentPeriodType = data["paymentPeriodType"];
            if (data["additionalData"]) {
                this.additionalData = {};
                for (let key in data["additionalData"]) {
                    if (data["additionalData"].hasOwnProperty(key))
                        this.additionalData[key] = data["additionalData"][key];
                }
            }
        }
    }

    static fromJS(data: any): ExecutePaymentDto {
        let result = new ExecutePaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gateway"] = this.gateway;
        data["editionPaymentType"] = this.editionPaymentType;
        data["editionId"] = this.editionId;
        data["paymentPeriodType"] = this.paymentPeriodType;
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    data["additionalData"][key] = this.additionalData[key];
            }
        }
        return data; 
    }
}

export interface IExecutePaymentDto {
    gateway: ExecutePaymentDtoGateway;
    editionPaymentType: ExecutePaymentDtoEditionPaymentType;
    editionId: number;
    paymentPeriodType: ExecutePaymentDtoPaymentPeriodType;
    additionalData: { [key: string] : string; };
}

export class PagedResultDtoOfSubscriptionPaymentListDto implements IPagedResultDtoOfSubscriptionPaymentListDto {
    totalCount: number;
    items: SubscriptionPaymentListDto[];

    constructor(data?: IPagedResultDtoOfSubscriptionPaymentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(SubscriptionPaymentListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSubscriptionPaymentListDto {
        let result = new PagedResultDtoOfSubscriptionPaymentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfSubscriptionPaymentListDto {
    totalCount: number;
    items: SubscriptionPaymentListDto[];
}

export class SubscriptionPaymentListDto implements ISubscriptionPaymentListDto {
    gateway: string;
    amount: number;
    editionId: number;
    dayCount: number;
    paymentPeriodType: string;
    paymentId: string;
    payerId: string;
    status: string;
    editionDisplayName: string;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: ISubscriptionPaymentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.gateway = data["gateway"];
            this.amount = data["amount"];
            this.editionId = data["editionId"];
            this.dayCount = data["dayCount"];
            this.paymentPeriodType = data["paymentPeriodType"];
            this.paymentId = data["paymentId"];
            this.payerId = data["payerId"];
            this.status = data["status"];
            this.editionDisplayName = data["editionDisplayName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): SubscriptionPaymentListDto {
        let result = new SubscriptionPaymentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gateway"] = this.gateway;
        data["amount"] = this.amount;
        data["editionId"] = this.editionId;
        data["dayCount"] = this.dayCount;
        data["paymentPeriodType"] = this.paymentPeriodType;
        data["paymentId"] = this.paymentId;
        data["payerId"] = this.payerId;
        data["status"] = this.status;
        data["editionDisplayName"] = this.editionDisplayName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface ISubscriptionPaymentListDto {
    gateway: string;
    amount: number;
    editionId: number;
    dayCount: number;
    paymentPeriodType: string;
    paymentId: string;
    payerId: string;
    status: string;
    editionDisplayName: string;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;
}

export class ListResultDtoOfFlatPermissionWithLevelDto implements IListResultDtoOfFlatPermissionWithLevelDto {
    items: FlatPermissionWithLevelDto[];

    constructor(data?: IListResultDtoOfFlatPermissionWithLevelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(FlatPermissionWithLevelDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfFlatPermissionWithLevelDto {
        let result = new ListResultDtoOfFlatPermissionWithLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfFlatPermissionWithLevelDto {
    items: FlatPermissionWithLevelDto[];
}

export class FlatPermissionWithLevelDto implements IFlatPermissionWithLevelDto {
    level: number;
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    isGrantedByDefault: boolean;

    constructor(data?: IFlatPermissionWithLevelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.level = data["level"];
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.isGrantedByDefault = data["isGrantedByDefault"];
        }
    }

    static fromJS(data: any): FlatPermissionWithLevelDto {
        let result = new FlatPermissionWithLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level;
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["isGrantedByDefault"] = this.isGrantedByDefault;
        return data; 
    }
}

export interface IFlatPermissionWithLevelDto {
    level: number;
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    isGrantedByDefault: boolean;
}

export class ListResultDtoOfPriceLevelListDto implements IListResultDtoOfPriceLevelListDto {
    items: PriceLevelListDto[];

    constructor(data?: IListResultDtoOfPriceLevelListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(PriceLevelListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfPriceLevelListDto {
        let result = new ListResultDtoOfPriceLevelListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfPriceLevelListDto {
    items: PriceLevelListDto[];
}

export class PriceLevelListDto implements IPriceLevelListDto {
    id: number;
    priceLevelCode: string;
    priceLevelName: string;
    discountAllowed: boolean;

    constructor(data?: IPriceLevelListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.priceLevelCode = data["priceLevelCode"];
            this.priceLevelName = data["priceLevelName"];
            this.discountAllowed = data["discountAllowed"];
        }
    }

    static fromJS(data: any): PriceLevelListDto {
        let result = new PriceLevelListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["priceLevelCode"] = this.priceLevelCode;
        data["priceLevelName"] = this.priceLevelName;
        data["discountAllowed"] = this.discountAllowed;
        return data; 
    }
}

export interface IPriceLevelListDto {
    id: number;
    priceLevelCode: string;
    priceLevelName: string;
    discountAllowed: boolean;
}

export class GetPriceLevel implements IGetPriceLevel {
    priceLevels: PriceLevelListDto;

    constructor(data?: IGetPriceLevel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.priceLevels = data["priceLevels"] ? PriceLevelListDto.fromJS(data["priceLevels"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPriceLevel {
        let result = new GetPriceLevel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["priceLevels"] = this.priceLevels ? this.priceLevels.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetPriceLevel {
    priceLevels: PriceLevelListDto;
}

export class CreatePriceLevelInput implements ICreatePriceLevelInput {
    id: number;
    priceLevelCode: string;
    priceLevelName: string;
    discountAllowed: boolean;

    constructor(data?: ICreatePriceLevelInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.priceLevelCode = data["priceLevelCode"];
            this.priceLevelName = data["priceLevelName"];
            this.discountAllowed = data["discountAllowed"];
        }
    }

    static fromJS(data: any): CreatePriceLevelInput {
        let result = new CreatePriceLevelInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["priceLevelCode"] = this.priceLevelCode;
        data["priceLevelName"] = this.priceLevelName;
        data["discountAllowed"] = this.discountAllowed;
        return data; 
    }
}

export interface ICreatePriceLevelInput {
    id: number;
    priceLevelCode: string;
    priceLevelName: string;
    discountAllowed: boolean;
}

export class PagedResultDtoOfProductList implements IPagedResultDtoOfProductList {
    totalCount: number;
    items: ProductList[];

    constructor(data?: IPagedResultDtoOfProductList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ProductList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfProductList {
        let result = new PagedResultDtoOfProductList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfProductList {
    totalCount: number;
    items: ProductList[];
}

export class ProductList implements IProductList {
    id: number;
    productCode: string;
    productName: string;
    suspectCode: string;
    gpcode: string;
    description: string;
    productSpecificationId: number;
    productSpecificationName: string;
    price: number;
    screationTime: string;
    inQuotationProduct: boolean;
    isQuotation: boolean;
    width: number;
    depth: number;
    height: number;
    dimention: string;
    categoryName: string;
    bafcoMade: boolean;
    isSelected: boolean;
    isDiscountable: boolean;
    productStateId: number;
    productState: string;
    productImage: string;
    createdBy: string;
    lastModifiedBy: string;
    dCreationTime: moment.Moment;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: IProductList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productCode = data["productCode"];
            this.productName = data["productName"];
            this.suspectCode = data["suspectCode"];
            this.gpcode = data["gpcode"];
            this.description = data["description"];
            this.productSpecificationId = data["productSpecificationId"];
            this.productSpecificationName = data["productSpecificationName"];
            this.price = data["price"];
            this.screationTime = data["screationTime"];
            this.inQuotationProduct = data["inQuotationProduct"];
            this.isQuotation = data["isQuotation"];
            this.width = data["width"];
            this.depth = data["depth"];
            this.height = data["height"];
            this.dimention = data["dimention"];
            this.categoryName = data["categoryName"];
            this.bafcoMade = data["bafcoMade"];
            this.isSelected = data["isSelected"];
            this.isDiscountable = data["isDiscountable"];
            this.productStateId = data["productStateId"];
            this.productState = data["productState"];
            this.productImage = data["productImage"];
            this.createdBy = data["createdBy"];
            this.lastModifiedBy = data["lastModifiedBy"];
            this.dCreationTime = data["dCreationTime"] ? moment(data["dCreationTime"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): ProductList {
        let result = new ProductList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["suspectCode"] = this.suspectCode;
        data["gpcode"] = this.gpcode;
        data["description"] = this.description;
        data["productSpecificationId"] = this.productSpecificationId;
        data["productSpecificationName"] = this.productSpecificationName;
        data["price"] = this.price;
        data["screationTime"] = this.screationTime;
        data["inQuotationProduct"] = this.inQuotationProduct;
        data["isQuotation"] = this.isQuotation;
        data["width"] = this.width;
        data["depth"] = this.depth;
        data["height"] = this.height;
        data["dimention"] = this.dimention;
        data["categoryName"] = this.categoryName;
        data["bafcoMade"] = this.bafcoMade;
        data["isSelected"] = this.isSelected;
        data["isDiscountable"] = this.isDiscountable;
        data["productStateId"] = this.productStateId;
        data["productState"] = this.productState;
        data["productImage"] = this.productImage;
        data["createdBy"] = this.createdBy;
        data["lastModifiedBy"] = this.lastModifiedBy;
        data["dCreationTime"] = this.dCreationTime ? this.dCreationTime.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IProductList {
    id: number;
    productCode: string;
    productName: string;
    suspectCode: string;
    gpcode: string;
    description: string;
    productSpecificationId: number;
    productSpecificationName: string;
    price: number;
    screationTime: string;
    inQuotationProduct: boolean;
    isQuotation: boolean;
    width: number;
    depth: number;
    height: number;
    dimention: string;
    categoryName: string;
    bafcoMade: boolean;
    isSelected: boolean;
    isDiscountable: boolean;
    productStateId: number;
    productState: string;
    productImage: string;
    createdBy: string;
    lastModifiedBy: string;
    dCreationTime: moment.Moment;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class GetProduct implements IGetProduct {
    productLists: ProductList;
    images: ProductImages[];
    productPriceLevelLists: ProductPriceLevelList[];

    constructor(data?: IGetProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productLists = data["productLists"] ? ProductList.fromJS(data["productLists"]) : <any>undefined;
            if (data["images"] && data["images"].constructor === Array) {
                this.images = [];
                for (let item of data["images"])
                    this.images.push(ProductImages.fromJS(item));
            }
            if (data["productPriceLevelLists"] && data["productPriceLevelLists"].constructor === Array) {
                this.productPriceLevelLists = [];
                for (let item of data["productPriceLevelLists"])
                    this.productPriceLevelLists.push(ProductPriceLevelList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetProduct {
        let result = new GetProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productLists"] = this.productLists ? this.productLists.toJSON() : <any>undefined;
        if (this.images && this.images.constructor === Array) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        if (this.productPriceLevelLists && this.productPriceLevelLists.constructor === Array) {
            data["productPriceLevelLists"] = [];
            for (let item of this.productPriceLevelLists)
                data["productPriceLevelLists"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetProduct {
    productLists: ProductList;
    images: ProductImages[];
    productPriceLevelLists: ProductPriceLevelList[];
}

export class ProductImages implements IProductImages {
    id: number;
    imageUrl: string;

    constructor(data?: IProductImages) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.imageUrl = data["imageUrl"];
        }
    }

    static fromJS(data: any): ProductImages {
        let result = new ProductImages();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["imageUrl"] = this.imageUrl;
        return data; 
    }
}

export interface IProductImages {
    id: number;
    imageUrl: string;
}

export class ProductPriceLevelList implements IProductPriceLevelList {
    id: number;
    productId: number;
    productName: string;
    priceLevelId: number;
    priceLeveName: string;
    price: number;

    constructor(data?: IProductPriceLevelList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productId = data["productId"];
            this.productName = data["productName"];
            this.priceLevelId = data["priceLevelId"];
            this.priceLeveName = data["priceLeveName"];
            this.price = data["price"];
        }
    }

    static fromJS(data: any): ProductPriceLevelList {
        let result = new ProductPriceLevelList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["priceLevelId"] = this.priceLevelId;
        data["priceLeveName"] = this.priceLeveName;
        data["price"] = this.price;
        return data; 
    }
}

export interface IProductPriceLevelList {
    id: number;
    productId: number;
    productName: string;
    priceLevelId: number;
    priceLeveName: string;
    price: number;
}

export class ProductInput implements IProductInput {
    id: number;
    productCode: string;
    productName: string;
    suspectCode: string;
    gpcode: string;
    description: string;
    productSpecificationId: number;
    price: number;
    width: number;
    depth: number;
    height: number;
    productStateId: number;

    constructor(data?: IProductInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productCode = data["productCode"];
            this.productName = data["productName"];
            this.suspectCode = data["suspectCode"];
            this.gpcode = data["gpcode"];
            this.description = data["description"];
            this.productSpecificationId = data["productSpecificationId"];
            this.price = data["price"];
            this.width = data["width"];
            this.depth = data["depth"];
            this.height = data["height"];
            this.productStateId = data["productStateId"];
        }
    }

    static fromJS(data: any): ProductInput {
        let result = new ProductInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["suspectCode"] = this.suspectCode;
        data["gpcode"] = this.gpcode;
        data["description"] = this.description;
        data["productSpecificationId"] = this.productSpecificationId;
        data["price"] = this.price;
        data["width"] = this.width;
        data["depth"] = this.depth;
        data["height"] = this.height;
        data["productStateId"] = this.productStateId;
        return data; 
    }
}

export interface IProductInput {
    id: number;
    productCode: string;
    productName: string;
    suspectCode: string;
    gpcode: string;
    description: string;
    productSpecificationId: number;
    price: number;
    width: number;
    depth: number;
    height: number;
    productStateId: number;
}

export class ProductImagesInput implements IProductImagesInput {
    id: number;
    productId: number;
    imageUrl: string;

    constructor(data?: IProductImagesInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productId = data["productId"];
            this.imageUrl = data["imageUrl"];
        }
    }

    static fromJS(data: any): ProductImagesInput {
        let result = new ProductImagesInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productId"] = this.productId;
        data["imageUrl"] = this.imageUrl;
        return data; 
    }
}

export interface IProductImagesInput {
    id: number;
    productId: number;
    imageUrl: string;
}

export class ProductPriceLevelInput implements IProductPriceLevelInput {
    id: number;
    productId: number;
    priceLevelId: number;
    price: number;

    constructor(data?: IProductPriceLevelInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productId = data["productId"];
            this.priceLevelId = data["priceLevelId"];
            this.price = data["price"];
        }
    }

    static fromJS(data: any): ProductPriceLevelInput {
        let result = new ProductPriceLevelInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productId"] = this.productId;
        data["priceLevelId"] = this.priceLevelId;
        data["price"] = this.price;
        return data; 
    }
}

export interface IProductPriceLevelInput {
    id: number;
    productId: number;
    priceLevelId: number;
    price: number;
}

export class ProductLinkInput implements IProductLinkInput {
    tempProductId: number;
    productId: number;

    constructor(data?: IProductLinkInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tempProductId = data["tempProductId"];
            this.productId = data["productId"];
        }
    }

    static fromJS(data: any): ProductLinkInput {
        let result = new ProductLinkInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tempProductId"] = this.tempProductId;
        data["productId"] = this.productId;
        return data; 
    }
}

export interface IProductLinkInput {
    tempProductId: number;
    productId: number;
}

export class PagedResultDtoOfTempProductList implements IPagedResultDtoOfTempProductList {
    totalCount: number;
    items: TempProductList[];

    constructor(data?: IPagedResultDtoOfTempProductList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TempProductList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTempProductList {
        let result = new PagedResultDtoOfTempProductList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfTempProductList {
    totalCount: number;
    items: TempProductList[];
}

export class TempProductList implements ITempProductList {
    id: number;
    productCode: string;
    productName: string;
    suspectCode: string;
    gpcode: string;
    description: string;
    price: number;
    updated: boolean;
    width: number;
    depth: number;
    height: number;
    isSelect: boolean;
    productSpecificationId: number;
    productSpecificationName: string;
    gmtCreationTime: moment.Moment;
    dimention: string;
    bafcoMade: boolean;
    categoryName: string;
    salesCount: number;
    isQuotation: boolean;
    productImage: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: ITempProductList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productCode = data["productCode"];
            this.productName = data["productName"];
            this.suspectCode = data["suspectCode"];
            this.gpcode = data["gpcode"];
            this.description = data["description"];
            this.price = data["price"];
            this.updated = data["updated"];
            this.width = data["width"];
            this.depth = data["depth"];
            this.height = data["height"];
            this.isSelect = data["isSelect"];
            this.productSpecificationId = data["productSpecificationId"];
            this.productSpecificationName = data["productSpecificationName"];
            this.gmtCreationTime = data["gmtCreationTime"] ? moment(data["gmtCreationTime"].toString()) : <any>undefined;
            this.dimention = data["dimention"];
            this.bafcoMade = data["bafcoMade"];
            this.categoryName = data["categoryName"];
            this.salesCount = data["salesCount"];
            this.isQuotation = data["isQuotation"];
            this.productImage = data["productImage"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): TempProductList {
        let result = new TempProductList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["suspectCode"] = this.suspectCode;
        data["gpcode"] = this.gpcode;
        data["description"] = this.description;
        data["price"] = this.price;
        data["updated"] = this.updated;
        data["width"] = this.width;
        data["depth"] = this.depth;
        data["height"] = this.height;
        data["isSelect"] = this.isSelect;
        data["productSpecificationId"] = this.productSpecificationId;
        data["productSpecificationName"] = this.productSpecificationName;
        data["gmtCreationTime"] = this.gmtCreationTime ? this.gmtCreationTime.toISOString() : <any>undefined;
        data["dimention"] = this.dimention;
        data["bafcoMade"] = this.bafcoMade;
        data["categoryName"] = this.categoryName;
        data["salesCount"] = this.salesCount;
        data["isQuotation"] = this.isQuotation;
        data["productImage"] = this.productImage;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface ITempProductList {
    id: number;
    productCode: string;
    productName: string;
    suspectCode: string;
    gpcode: string;
    description: string;
    price: number;
    updated: boolean;
    width: number;
    depth: number;
    height: number;
    isSelect: boolean;
    productSpecificationId: number;
    productSpecificationName: string;
    gmtCreationTime: moment.Moment;
    dimention: string;
    bafcoMade: boolean;
    categoryName: string;
    salesCount: number;
    isQuotation: boolean;
    productImage: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class ListResultDtoOfProductAttributeListDto implements IListResultDtoOfProductAttributeListDto {
    items: ProductAttributeListDto[];

    constructor(data?: IListResultDtoOfProductAttributeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ProductAttributeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfProductAttributeListDto {
        let result = new ListResultDtoOfProductAttributeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfProductAttributeListDto {
    items: ProductAttributeListDto[];
}

export class ProductAttributeListDto implements IProductAttributeListDto {
    id: number;
    attributeName: string;
    attributeCode: string;
    imageurl: string;
    isEdit: boolean;

    constructor(data?: IProductAttributeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.attributeName = data["attributeName"];
            this.attributeCode = data["attributeCode"];
            this.imageurl = data["imageurl"];
            this.isEdit = data["isEdit"];
        }
    }

    static fromJS(data: any): ProductAttributeListDto {
        let result = new ProductAttributeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["attributeName"] = this.attributeName;
        data["attributeCode"] = this.attributeCode;
        data["imageurl"] = this.imageurl;
        data["isEdit"] = this.isEdit;
        return data; 
    }
}

export interface IProductAttributeListDto {
    id: number;
    attributeName: string;
    attributeCode: string;
    imageurl: string;
    isEdit: boolean;
}

export class GetProductAttribute implements IGetProductAttribute {
    attribute: CreateProductAttributeInput;

    constructor(data?: IGetProductAttribute) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.attribute = data["attribute"] ? CreateProductAttributeInput.fromJS(data["attribute"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetProductAttribute {
        let result = new GetProductAttribute();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attribute"] = this.attribute ? this.attribute.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetProductAttribute {
    attribute: CreateProductAttributeInput;
}

export class CreateProductAttributeInput implements ICreateProductAttributeInput {
    id: number;
    attributeName: string;
    attributeCode: string;
    imageurl: string;
    description: string;

    constructor(data?: ICreateProductAttributeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.attributeName = data["attributeName"];
            this.attributeCode = data["attributeCode"];
            this.imageurl = data["imageurl"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): CreateProductAttributeInput {
        let result = new CreateProductAttributeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["attributeName"] = this.attributeName;
        data["attributeCode"] = this.attributeCode;
        data["imageurl"] = this.imageurl;
        data["description"] = this.description;
        return data; 
    }
}

export interface ICreateProductAttributeInput {
    id: number;
    attributeName: string;
    attributeCode: string;
    imageurl: string;
    description: string;
}

export class ListResultDtoOfProductCategoryList implements IListResultDtoOfProductCategoryList {
    items: ProductCategoryList[];

    constructor(data?: IListResultDtoOfProductCategoryList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ProductCategoryList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfProductCategoryList {
        let result = new ListResultDtoOfProductCategoryList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfProductCategoryList {
    items: ProductCategoryList[];
}

export class ProductCategoryList implements IProductCategoryList {
    id: number;
    code: string;
    name: string;

    constructor(data?: IProductCategoryList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): ProductCategoryList {
        let result = new ProductCategoryList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data; 
    }
}

export interface IProductCategoryList {
    id: number;
    code: string;
    name: string;
}

export class GetProductCategory implements IGetProductCategory {
    category: ProductCategoryInput;

    constructor(data?: IGetProductCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.category = data["category"] ? ProductCategoryInput.fromJS(data["category"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetProductCategory {
        let result = new GetProductCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetProductCategory {
    category: ProductCategoryInput;
}

export class ProductCategoryInput implements IProductCategoryInput {
    id: number;
    code: string;
    name: string;

    constructor(data?: IProductCategoryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): ProductCategoryInput {
        let result = new ProductCategoryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data; 
    }
}

export interface IProductCategoryInput {
    id: number;
    code: string;
    name: string;
}

export class ListResultDtoOfProductFamilyListDto implements IListResultDtoOfProductFamilyListDto {
    items: ProductFamilyListDto[];

    constructor(data?: IListResultDtoOfProductFamilyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ProductFamilyListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfProductFamilyListDto {
        let result = new ListResultDtoOfProductFamilyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfProductFamilyListDto {
    items: ProductFamilyListDto[];
}

export class ProductFamilyListDto implements IProductFamilyListDto {
    id: number;
    productFamilyCode: string;
    productFamilyName: string;
    description: string;
    discount: boolean;
    collectionId: number;
    collectionName: string;
    warranty: number;

    constructor(data?: IProductFamilyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productFamilyCode = data["productFamilyCode"];
            this.productFamilyName = data["productFamilyName"];
            this.description = data["description"];
            this.discount = data["discount"];
            this.collectionId = data["collectionId"];
            this.collectionName = data["collectionName"];
            this.warranty = data["warranty"];
        }
    }

    static fromJS(data: any): ProductFamilyListDto {
        let result = new ProductFamilyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productFamilyCode"] = this.productFamilyCode;
        data["productFamilyName"] = this.productFamilyName;
        data["description"] = this.description;
        data["discount"] = this.discount;
        data["collectionId"] = this.collectionId;
        data["collectionName"] = this.collectionName;
        data["warranty"] = this.warranty;
        return data; 
    }
}

export interface IProductFamilyListDto {
    id: number;
    productFamilyCode: string;
    productFamilyName: string;
    description: string;
    discount: boolean;
    collectionId: number;
    collectionName: string;
    warranty: number;
}

export class GetProductFamily implements IGetProductFamily {
    productFamily: CreateProductFamilyInput;
    collectiondatas: Collectiondata;

    constructor(data?: IGetProductFamily) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productFamily = data["productFamily"] ? CreateProductFamilyInput.fromJS(data["productFamily"]) : <any>undefined;
            this.collectiondatas = data["collectiondatas"] ? Collectiondata.fromJS(data["collectiondatas"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetProductFamily {
        let result = new GetProductFamily();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productFamily"] = this.productFamily ? this.productFamily.toJSON() : <any>undefined;
        data["collectiondatas"] = this.collectiondatas ? this.collectiondatas.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetProductFamily {
    productFamily: CreateProductFamilyInput;
    collectiondatas: Collectiondata;
}

export class CreateProductFamilyInput implements ICreateProductFamilyInput {
    id: number;
    productFamilyCode: string;
    productFamilyName: string;
    description: string;
    discount: boolean;
    collectionId: number;
    warranty: number;

    constructor(data?: ICreateProductFamilyInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productFamilyCode = data["productFamilyCode"];
            this.productFamilyName = data["productFamilyName"];
            this.description = data["description"];
            this.discount = data["discount"];
            this.collectionId = data["collectionId"];
            this.warranty = data["warranty"];
        }
    }

    static fromJS(data: any): CreateProductFamilyInput {
        let result = new CreateProductFamilyInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productFamilyCode"] = this.productFamilyCode;
        data["productFamilyName"] = this.productFamilyName;
        data["description"] = this.description;
        data["discount"] = this.discount;
        data["collectionId"] = this.collectionId;
        data["warranty"] = this.warranty;
        return data; 
    }
}

export interface ICreateProductFamilyInput {
    id: number;
    productFamilyCode: string;
    productFamilyName: string;
    description: string;
    discount: boolean;
    collectionId: number;
    warranty: number;
}

export class Collectiondata implements ICollectiondata {
    id: number;
    name: string;

    constructor(data?: ICollectiondata) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): Collectiondata {
        let result = new Collectiondata();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ICollectiondata {
    id: number;
    name: string;
}

export class ListResultDtoOfProductGroupListDto implements IListResultDtoOfProductGroupListDto {
    items: ProductGroupListDto[];

    constructor(data?: IListResultDtoOfProductGroupListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ProductGroupListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfProductGroupListDto {
        let result = new ListResultDtoOfProductGroupListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfProductGroupListDto {
    items: ProductGroupListDto[];
}

export class ProductGroupListDto implements IProductGroupListDto {
    id: number;
    productGroupName: string;
    familyId: number;
    attributeData: string;
    isEditable: boolean;
    productCategoryId: number;
    productCategoryName: string;

    constructor(data?: IProductGroupListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productGroupName = data["productGroupName"];
            this.familyId = data["familyId"];
            this.attributeData = data["attributeData"];
            this.isEditable = data["isEditable"];
            this.productCategoryId = data["productCategoryId"];
            this.productCategoryName = data["productCategoryName"];
        }
    }

    static fromJS(data: any): ProductGroupListDto {
        let result = new ProductGroupListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productGroupName"] = this.productGroupName;
        data["familyId"] = this.familyId;
        data["attributeData"] = this.attributeData;
        data["isEditable"] = this.isEditable;
        data["productCategoryId"] = this.productCategoryId;
        data["productCategoryName"] = this.productCategoryName;
        return data; 
    }
}

export interface IProductGroupListDto {
    id: number;
    productGroupName: string;
    familyId: number;
    attributeData: string;
    isEditable: boolean;
    productCategoryId: number;
    productCategoryName: string;
}

export class GetProductGroup implements IGetProductGroup {
    productGroup: ProductGroupListDto;
    familyDatas: FamilyData;
    categoryDatas: CategoryData;
    productGroupDetails: any[];

    constructor(data?: IGetProductGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productGroup = data["productGroup"] ? ProductGroupListDto.fromJS(data["productGroup"]) : <any>undefined;
            this.familyDatas = data["familyDatas"] ? FamilyData.fromJS(data["familyDatas"]) : <any>undefined;
            this.categoryDatas = data["categoryDatas"] ? CategoryData.fromJS(data["categoryDatas"]) : <any>undefined;
            if (data["productGroupDetails"] && data["productGroupDetails"].constructor === Array) {
                this.productGroupDetails = [];
                for (let item of data["productGroupDetails"])
                    this.productGroupDetails.push(item);
            }
        }
    }

    static fromJS(data: any): GetProductGroup {
        let result = new GetProductGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productGroup"] = this.productGroup ? this.productGroup.toJSON() : <any>undefined;
        data["familyDatas"] = this.familyDatas ? this.familyDatas.toJSON() : <any>undefined;
        data["categoryDatas"] = this.categoryDatas ? this.categoryDatas.toJSON() : <any>undefined;
        if (this.productGroupDetails && this.productGroupDetails.constructor === Array) {
            data["productGroupDetails"] = [];
            for (let item of this.productGroupDetails)
                data["productGroupDetails"].push(item);
        }
        return data; 
    }
}

export interface IGetProductGroup {
    productGroup: ProductGroupListDto;
    familyDatas: FamilyData;
    categoryDatas: CategoryData;
    productGroupDetails: any[];
}

export class FamilyData implements IFamilyData {
    id: number;
    name: string;

    constructor(data?: IFamilyData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): FamilyData {
        let result = new FamilyData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IFamilyData {
    id: number;
    name: string;
}

export class CategoryData implements ICategoryData {
    id: number;
    name: string;

    constructor(data?: ICategoryData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CategoryData {
        let result = new CategoryData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ICategoryData {
    id: number;
    name: string;
}

export class ProductGroupInputDto implements IProductGroupInputDto {
    id: number;
    productGroupName: string;
    familyId: number;
    attributeData: string;
    productCategoryId: number;

    constructor(data?: IProductGroupInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productGroupName = data["productGroupName"];
            this.familyId = data["familyId"];
            this.attributeData = data["attributeData"];
            this.productCategoryId = data["productCategoryId"];
        }
    }

    static fromJS(data: any): ProductGroupInputDto {
        let result = new ProductGroupInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productGroupName"] = this.productGroupName;
        data["familyId"] = this.familyId;
        data["attributeData"] = this.attributeData;
        data["productCategoryId"] = this.productCategoryId;
        return data; 
    }
}

export interface IProductGroupInputDto {
    id: number;
    productGroupName: string;
    familyId: number;
    attributeData: string;
    productCategoryId: number;
}

export class CreateProductGroupDetailInput implements ICreateProductGroupDetailInput {
    attributeGroupId: number;
    productGroupId: number;
    metedata: string;
    id: number;

    constructor(data?: ICreateProductGroupDetailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.attributeGroupId = data["attributeGroupId"];
            this.productGroupId = data["productGroupId"];
            this.metedata = data["metedata"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CreateProductGroupDetailInput {
        let result = new CreateProductGroupDetailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attributeGroupId"] = this.attributeGroupId;
        data["productGroupId"] = this.productGroupId;
        data["metedata"] = this.metedata;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreateProductGroupDetailInput {
    attributeGroupId: number;
    productGroupId: number;
    metedata: string;
    id: number;
}

export class ListResultDtoOfProductSpecificationList implements IListResultDtoOfProductSpecificationList {
    items: ProductSpecificationList[];

    constructor(data?: IListResultDtoOfProductSpecificationList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ProductSpecificationList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfProductSpecificationList {
        let result = new ListResultDtoOfProductSpecificationList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfProductSpecificationList {
    items: ProductSpecificationList[];
}

export class ProductSpecificationList implements IProductSpecificationList {
    id: number;
    name: string;
    imageUrl: string;
    productGroupId: number;
    productGroupName: string;
    description: string;
    reset: boolean;
    bafcoMade: boolean;

    constructor(data?: IProductSpecificationList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.imageUrl = data["imageUrl"];
            this.productGroupId = data["productGroupId"];
            this.productGroupName = data["productGroupName"];
            this.description = data["description"];
            this.reset = data["reset"];
            this.bafcoMade = data["bafcoMade"];
        }
    }

    static fromJS(data: any): ProductSpecificationList {
        let result = new ProductSpecificationList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["imageUrl"] = this.imageUrl;
        data["productGroupId"] = this.productGroupId;
        data["productGroupName"] = this.productGroupName;
        data["description"] = this.description;
        data["reset"] = this.reset;
        data["bafcoMade"] = this.bafcoMade;
        return data; 
    }
}

export interface IProductSpecificationList {
    id: number;
    name: string;
    imageUrl: string;
    productGroupId: number;
    productGroupName: string;
    description: string;
    reset: boolean;
    bafcoMade: boolean;
}

export class GetProductSpecification implements IGetProductSpecification {
    available: number;
    created: number;
    dataMapped: boolean;
    productSpecification: ProductSpecificationList;
    productSpecificationDetails: any[];

    constructor(data?: IGetProductSpecification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.available = data["available"];
            this.created = data["created"];
            this.dataMapped = data["dataMapped"];
            this.productSpecification = data["productSpecification"] ? ProductSpecificationList.fromJS(data["productSpecification"]) : <any>undefined;
            if (data["productSpecificationDetails"] && data["productSpecificationDetails"].constructor === Array) {
                this.productSpecificationDetails = [];
                for (let item of data["productSpecificationDetails"])
                    this.productSpecificationDetails.push(item);
            }
        }
    }

    static fromJS(data: any): GetProductSpecification {
        let result = new GetProductSpecification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["available"] = this.available;
        data["created"] = this.created;
        data["dataMapped"] = this.dataMapped;
        data["productSpecification"] = this.productSpecification ? this.productSpecification.toJSON() : <any>undefined;
        if (this.productSpecificationDetails && this.productSpecificationDetails.constructor === Array) {
            data["productSpecificationDetails"] = [];
            for (let item of this.productSpecificationDetails)
                data["productSpecificationDetails"].push(item);
        }
        return data; 
    }
}

export interface IGetProductSpecification {
    available: number;
    created: number;
    dataMapped: boolean;
    productSpecification: ProductSpecificationList;
    productSpecificationDetails: any[];
}

export class CreateProductSpecification implements ICreateProductSpecification {
    id: number;
    name: string;
    imageUrl: string;
    productGroupId: number;
    description: string;
    reset: boolean;
    bafcoMade: boolean;

    constructor(data?: ICreateProductSpecification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.imageUrl = data["imageUrl"];
            this.productGroupId = data["productGroupId"];
            this.description = data["description"];
            this.reset = data["reset"];
            this.bafcoMade = data["bafcoMade"];
        }
    }

    static fromJS(data: any): CreateProductSpecification {
        let result = new CreateProductSpecification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["imageUrl"] = this.imageUrl;
        data["productGroupId"] = this.productGroupId;
        data["description"] = this.description;
        data["reset"] = this.reset;
        data["bafcoMade"] = this.bafcoMade;
        return data; 
    }
}

export interface ICreateProductSpecification {
    id: number;
    name: string;
    imageUrl: string;
    productGroupId: number;
    description: string;
    reset: boolean;
    bafcoMade: boolean;
}

export class CreateProductSpecificationInput implements ICreateProductSpecificationInput {
    id: number;
    productGroupId: number;
    productSpecificationId: number;
    attributeGroupId: number;
    attributeId: number;

    constructor(data?: ICreateProductSpecificationInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productGroupId = data["productGroupId"];
            this.productSpecificationId = data["productSpecificationId"];
            this.attributeGroupId = data["attributeGroupId"];
            this.attributeId = data["attributeId"];
        }
    }

    static fromJS(data: any): CreateProductSpecificationInput {
        let result = new CreateProductSpecificationInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productGroupId"] = this.productGroupId;
        data["productSpecificationId"] = this.productSpecificationId;
        data["attributeGroupId"] = this.attributeGroupId;
        data["attributeId"] = this.attributeId;
        return data; 
    }
}

export interface ICreateProductSpecificationInput {
    id: number;
    productGroupId: number;
    productSpecificationId: number;
    attributeGroupId: number;
    attributeId: number;
}

export class ProductGroupDetailChangeInput implements IProductGroupDetailChangeInput {
    source: number;
    destination: number;
    productGroupId: number;
    rowId: number;

    constructor(data?: IProductGroupDetailChangeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.source = data["source"];
            this.destination = data["destination"];
            this.productGroupId = data["productGroupId"];
            this.rowId = data["rowId"];
        }
    }

    static fromJS(data: any): ProductGroupDetailChangeInput {
        let result = new ProductGroupDetailChangeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["source"] = this.source;
        data["destination"] = this.destination;
        data["productGroupId"] = this.productGroupId;
        data["rowId"] = this.rowId;
        return data; 
    }
}

export interface IProductGroupDetailChangeInput {
    source: number;
    destination: number;
    productGroupId: number;
    rowId: number;
}

export class ProductSpecArray implements IProductSpecArray {
    productSpecId: number;
    productGroupId: number;
    arributeGroupSelect: AttributeArray[];

    constructor(data?: IProductSpecArray) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productSpecId = data["productSpecId"];
            this.productGroupId = data["productGroupId"];
            if (data["arributeGroupSelect"] && data["arributeGroupSelect"].constructor === Array) {
                this.arributeGroupSelect = [];
                for (let item of data["arributeGroupSelect"])
                    this.arributeGroupSelect.push(AttributeArray.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductSpecArray {
        let result = new ProductSpecArray();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productSpecId"] = this.productSpecId;
        data["productGroupId"] = this.productGroupId;
        if (this.arributeGroupSelect && this.arributeGroupSelect.constructor === Array) {
            data["arributeGroupSelect"] = [];
            for (let item of this.arributeGroupSelect)
                data["arributeGroupSelect"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProductSpecArray {
    productSpecId: number;
    productGroupId: number;
    arributeGroupSelect: AttributeArray[];
}

export class AttributeArray implements IAttributeArray {
    attributeGroupId: number;
    attributeId: number[];

    constructor(data?: IAttributeArray) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.attributeGroupId = data["attributeGroupId"];
            if (data["attributeId"] && data["attributeId"].constructor === Array) {
                this.attributeId = [];
                for (let item of data["attributeId"])
                    this.attributeId.push(item);
            }
        }
    }

    static fromJS(data: any): AttributeArray {
        let result = new AttributeArray();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attributeGroupId"] = this.attributeGroupId;
        if (this.attributeId && this.attributeId.constructor === Array) {
            data["attributeId"] = [];
            for (let item of this.attributeId)
                data["attributeId"].push(item);
        }
        return data; 
    }
}

export interface IAttributeArray {
    attributeGroupId: number;
    attributeId: number[];
}

export class PagedResultDtoOfProductSubGroupListDto implements IPagedResultDtoOfProductSubGroupListDto {
    totalCount: number;
    items: ProductSubGroupListDto[];

    constructor(data?: IPagedResultDtoOfProductSubGroupListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ProductSubGroupListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfProductSubGroupListDto {
        let result = new PagedResultDtoOfProductSubGroupListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfProductSubGroupListDto {
    totalCount: number;
    items: ProductSubGroupListDto[];
}

export class ProductSubGroupListDto implements IProductSubGroupListDto {
    id: number;
    productSubGroupName: string;
    productSubGroupCode: string;
    groupId: number;
    productGroupName: string;

    constructor(data?: IProductSubGroupListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productSubGroupName = data["productSubGroupName"];
            this.productSubGroupCode = data["productSubGroupCode"];
            this.groupId = data["groupId"];
            this.productGroupName = data["productGroupName"];
        }
    }

    static fromJS(data: any): ProductSubGroupListDto {
        let result = new ProductSubGroupListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productSubGroupName"] = this.productSubGroupName;
        data["productSubGroupCode"] = this.productSubGroupCode;
        data["groupId"] = this.groupId;
        data["productGroupName"] = this.productGroupName;
        return data; 
    }
}

export interface IProductSubGroupListDto {
    id: number;
    productSubGroupName: string;
    productSubGroupCode: string;
    groupId: number;
    productGroupName: string;
}

export class GetProductSubGroup implements IGetProductSubGroup {
    productSubGroup: ProductSubGroupListDto;

    constructor(data?: IGetProductSubGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productSubGroup = data["productSubGroup"] ? ProductSubGroupListDto.fromJS(data["productSubGroup"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetProductSubGroup {
        let result = new GetProductSubGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productSubGroup"] = this.productSubGroup ? this.productSubGroup.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetProductSubGroup {
    productSubGroup: ProductSubGroupListDto;
}

export class ProductSubGroupInputDto implements IProductSubGroupInputDto {
    id: number;
    productSubGroupName: string;
    productSubGroupCode: string;
    groupId: number;

    constructor(data?: IProductSubGroupInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productSubGroupName = data["productSubGroupName"];
            this.productSubGroupCode = data["productSubGroupCode"];
            this.groupId = data["groupId"];
        }
    }

    static fromJS(data: any): ProductSubGroupInputDto {
        let result = new ProductSubGroupInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productSubGroupName"] = this.productSubGroupName;
        data["productSubGroupCode"] = this.productSubGroupCode;
        data["groupId"] = this.groupId;
        return data; 
    }
}

export interface IProductSubGroupInputDto {
    id: number;
    productSubGroupName: string;
    productSubGroupCode: string;
    groupId: number;
}

export class ListResultDtoOfProductTypeListDto implements IListResultDtoOfProductTypeListDto {
    items: ProductTypeListDto[];

    constructor(data?: IListResultDtoOfProductTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ProductTypeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfProductTypeListDto {
        let result = new ListResultDtoOfProductTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfProductTypeListDto {
    items: ProductTypeListDto[];
}

export class ProductTypeListDto implements IProductTypeListDto {
    id: number;
    productTypeName: string;
    productTypeCode: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: IProductTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productTypeName = data["productTypeName"];
            this.productTypeCode = data["productTypeCode"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): ProductTypeListDto {
        let result = new ProductTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productTypeName"] = this.productTypeName;
        data["productTypeCode"] = this.productTypeCode;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IProductTypeListDto {
    id: number;
    productTypeName: string;
    productTypeCode: string;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class GetProductType implements IGetProductType {
    producttype: ProductTypeListDto;

    constructor(data?: IGetProductType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.producttype = data["producttype"] ? ProductTypeListDto.fromJS(data["producttype"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetProductType {
        let result = new GetProductType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["producttype"] = this.producttype ? this.producttype.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetProductType {
    producttype: ProductTypeListDto;
}

export class ProductTypeInputDto implements IProductTypeInputDto {
    id: number;
    productTypeName: string;
    productTypeCode: string;

    constructor(data?: IProductTypeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productTypeName = data["productTypeName"];
            this.productTypeCode = data["productTypeCode"];
        }
    }

    static fromJS(data: any): ProductTypeInputDto {
        let result = new ProductTypeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productTypeName"] = this.productTypeName;
        data["productTypeCode"] = this.productTypeCode;
        return data; 
    }
}

export interface IProductTypeInputDto {
    id: number;
    productTypeName: string;
    productTypeCode: string;
}

export class CurrentUserProfileEditDto implements ICurrentUserProfileEditDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    emailPassword: string;
    phoneNumber: string;
    isPhoneNumberConfirmed: boolean;
    timezone: string;
    qrCodeSetupImageUrl: string;
    isGoogleAuthenticatorEnabled: boolean;

    constructor(data?: ICurrentUserProfileEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.emailPassword = data["emailPassword"];
            this.phoneNumber = data["phoneNumber"];
            this.isPhoneNumberConfirmed = data["isPhoneNumberConfirmed"];
            this.timezone = data["timezone"];
            this.qrCodeSetupImageUrl = data["qrCodeSetupImageUrl"];
            this.isGoogleAuthenticatorEnabled = data["isGoogleAuthenticatorEnabled"];
        }
    }

    static fromJS(data: any): CurrentUserProfileEditDto {
        let result = new CurrentUserProfileEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["emailPassword"] = this.emailPassword;
        data["phoneNumber"] = this.phoneNumber;
        data["isPhoneNumberConfirmed"] = this.isPhoneNumberConfirmed;
        data["timezone"] = this.timezone;
        data["qrCodeSetupImageUrl"] = this.qrCodeSetupImageUrl;
        data["isGoogleAuthenticatorEnabled"] = this.isGoogleAuthenticatorEnabled;
        return data; 
    }
}

export interface ICurrentUserProfileEditDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    emailPassword: string;
    phoneNumber: string;
    isPhoneNumberConfirmed: boolean;
    timezone: string;
    qrCodeSetupImageUrl: string;
    isGoogleAuthenticatorEnabled: boolean;
}

export class UpdateGoogleAuthenticatorKeyOutput implements IUpdateGoogleAuthenticatorKeyOutput {
    qrCodeSetupImageUrl: string;

    constructor(data?: IUpdateGoogleAuthenticatorKeyOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.qrCodeSetupImageUrl = data["qrCodeSetupImageUrl"];
        }
    }

    static fromJS(data: any): UpdateGoogleAuthenticatorKeyOutput {
        let result = new UpdateGoogleAuthenticatorKeyOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["qrCodeSetupImageUrl"] = this.qrCodeSetupImageUrl;
        return data; 
    }
}

export interface IUpdateGoogleAuthenticatorKeyOutput {
    qrCodeSetupImageUrl: string;
}

export class VerifySmsCodeInputDto implements IVerifySmsCodeInputDto {
    code: string;

    constructor(data?: IVerifySmsCodeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
        }
    }

    static fromJS(data: any): VerifySmsCodeInputDto {
        let result = new VerifySmsCodeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        return data; 
    }
}

export interface IVerifySmsCodeInputDto {
    code: string;
}

export class ChangePasswordInput implements IChangePasswordInput {
    currentPassword: string;
    newPassword: string;

    constructor(data?: IChangePasswordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.currentPassword = data["currentPassword"];
            this.newPassword = data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordInput {
        let result = new ChangePasswordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPassword"] = this.currentPassword;
        data["newPassword"] = this.newPassword;
        return data; 
    }
}

export interface IChangePasswordInput {
    currentPassword: string;
    newPassword: string;
}

export class UpdateProfilePictureInput implements IUpdateProfilePictureInput {
    fileName: string;
    x: number;
    y: number;
    width: number;
    height: number;

    constructor(data?: IUpdateProfilePictureInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileName = data["fileName"];
            this.x = data["x"];
            this.y = data["y"];
            this.width = data["width"];
            this.height = data["height"];
        }
    }

    static fromJS(data: any): UpdateProfilePictureInput {
        let result = new UpdateProfilePictureInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["x"] = this.x;
        data["y"] = this.y;
        data["width"] = this.width;
        data["height"] = this.height;
        return data; 
    }
}

export interface IUpdateProfilePictureInput {
    fileName: string;
    x: number;
    y: number;
    width: number;
    height: number;
}

export class GetPasswordComplexitySettingOutput implements IGetPasswordComplexitySettingOutput {
    setting: PasswordComplexitySetting;

    constructor(data?: IGetPasswordComplexitySettingOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.setting = data["setting"] ? PasswordComplexitySetting.fromJS(data["setting"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPasswordComplexitySettingOutput {
        let result = new GetPasswordComplexitySettingOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["setting"] = this.setting ? this.setting.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetPasswordComplexitySettingOutput {
    setting: PasswordComplexitySetting;
}

export class GetProfilePictureOutput implements IGetProfilePictureOutput {
    profilePicture: string;

    constructor(data?: IGetProfilePictureOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profilePicture = data["profilePicture"];
        }
    }

    static fromJS(data: any): GetProfilePictureOutput {
        let result = new GetProfilePictureOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profilePicture"] = this.profilePicture;
        return data; 
    }
}

export interface IGetProfilePictureOutput {
    profilePicture: string;
}

export class ChangeUserLanguageDto implements IChangeUserLanguageDto {
    languageName: string;

    constructor(data?: IChangeUserLanguageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.languageName = data["languageName"];
        }
    }

    static fromJS(data: any): ChangeUserLanguageDto {
        let result = new ChangeUserLanguageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName;
        return data; 
    }
}

export interface IChangeUserLanguageDto {
    languageName: string;
}

export class GetQuotation implements IGetQuotation {
    quotation: QuotationListDto;

    constructor(data?: IGetQuotation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.quotation = data["quotation"] ? QuotationListDto.fromJS(data["quotation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetQuotation {
        let result = new GetQuotation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quotation"] = this.quotation ? this.quotation.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetQuotation {
    quotation: QuotationListDto;
}

export class CreateQuotationInput implements ICreateQuotationInput {
    id: number;
    termsandCondition: string;
    refNo: string;
    customerId: string;
    newCompanyId: number;
    quotationStatusId: number;
    salesPersonId: number;
    attentionContactId: number;
    total: number;
    name: string;
    email: string;
    mobileNumber: string;
    submitted: boolean;
    submittedDate: moment.Moment;
    won: boolean;
    wonDate: moment.Moment;
    lost: boolean;
    lostDate: moment.Moment;
    inquiryId: number;
    mileStoneId: number;
    optional: boolean;
    void: boolean;
    stageId: number;
    poNumber: string;
    reasonRemark: string;
    compatitorId: number;
    reasonId: number;
    vat: number;
    vatAmount: number;
    isVat: boolean;
    orgDate: moment.Moment;
    revised: boolean;
    revisionId: number;
    archieved: boolean;
    isClosed: boolean;
    rfqNo: string;
    refQNo: string;
    isApproved: boolean;
    negotiation: boolean;
    negotiationDate: moment.Moment;
    overAllDiscountAmount: number;
    overAllDiscountPercentage: number;
    paymentDate: moment.Moment;
    discountEmail: boolean;

    constructor(data?: ICreateQuotationInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.termsandCondition = data["termsandCondition"];
            this.refNo = data["refNo"];
            this.customerId = data["customerId"];
            this.newCompanyId = data["newCompanyId"];
            this.quotationStatusId = data["quotationStatusId"];
            this.salesPersonId = data["salesPersonId"];
            this.attentionContactId = data["attentionContactId"];
            this.total = data["total"];
            this.name = data["name"];
            this.email = data["email"];
            this.mobileNumber = data["mobileNumber"];
            this.submitted = data["submitted"];
            this.submittedDate = data["submittedDate"] ? moment(data["submittedDate"].toString()) : <any>undefined;
            this.won = data["won"];
            this.wonDate = data["wonDate"] ? moment(data["wonDate"].toString()) : <any>undefined;
            this.lost = data["lost"];
            this.lostDate = data["lostDate"] ? moment(data["lostDate"].toString()) : <any>undefined;
            this.inquiryId = data["inquiryId"];
            this.mileStoneId = data["mileStoneId"];
            this.optional = data["optional"];
            this.void = data["void"];
            this.stageId = data["stageId"];
            this.poNumber = data["poNumber"];
            this.reasonRemark = data["reasonRemark"];
            this.compatitorId = data["compatitorId"];
            this.reasonId = data["reasonId"];
            this.vat = data["vat"];
            this.vatAmount = data["vatAmount"];
            this.isVat = data["isVat"];
            this.orgDate = data["orgDate"] ? moment(data["orgDate"].toString()) : <any>undefined;
            this.revised = data["revised"];
            this.revisionId = data["revisionId"];
            this.archieved = data["archieved"];
            this.isClosed = data["isClosed"];
            this.rfqNo = data["rfqNo"];
            this.refQNo = data["refQNo"];
            this.isApproved = data["isApproved"];
            this.negotiation = data["negotiation"];
            this.negotiationDate = data["negotiationDate"] ? moment(data["negotiationDate"].toString()) : <any>undefined;
            this.overAllDiscountAmount = data["overAllDiscountAmount"];
            this.overAllDiscountPercentage = data["overAllDiscountPercentage"];
            this.paymentDate = data["paymentDate"] ? moment(data["paymentDate"].toString()) : <any>undefined;
            this.discountEmail = data["discountEmail"];
        }
    }

    static fromJS(data: any): CreateQuotationInput {
        let result = new CreateQuotationInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["termsandCondition"] = this.termsandCondition;
        data["refNo"] = this.refNo;
        data["customerId"] = this.customerId;
        data["newCompanyId"] = this.newCompanyId;
        data["quotationStatusId"] = this.quotationStatusId;
        data["salesPersonId"] = this.salesPersonId;
        data["attentionContactId"] = this.attentionContactId;
        data["total"] = this.total;
        data["name"] = this.name;
        data["email"] = this.email;
        data["mobileNumber"] = this.mobileNumber;
        data["submitted"] = this.submitted;
        data["submittedDate"] = this.submittedDate ? this.submittedDate.toISOString() : <any>undefined;
        data["won"] = this.won;
        data["wonDate"] = this.wonDate ? this.wonDate.toISOString() : <any>undefined;
        data["lost"] = this.lost;
        data["lostDate"] = this.lostDate ? this.lostDate.toISOString() : <any>undefined;
        data["inquiryId"] = this.inquiryId;
        data["mileStoneId"] = this.mileStoneId;
        data["optional"] = this.optional;
        data["void"] = this.void;
        data["stageId"] = this.stageId;
        data["poNumber"] = this.poNumber;
        data["reasonRemark"] = this.reasonRemark;
        data["compatitorId"] = this.compatitorId;
        data["reasonId"] = this.reasonId;
        data["vat"] = this.vat;
        data["vatAmount"] = this.vatAmount;
        data["isVat"] = this.isVat;
        data["orgDate"] = this.orgDate ? this.orgDate.toISOString() : <any>undefined;
        data["revised"] = this.revised;
        data["revisionId"] = this.revisionId;
        data["archieved"] = this.archieved;
        data["isClosed"] = this.isClosed;
        data["rfqNo"] = this.rfqNo;
        data["refQNo"] = this.refQNo;
        data["isApproved"] = this.isApproved;
        data["negotiation"] = this.negotiation;
        data["negotiationDate"] = this.negotiationDate ? this.negotiationDate.toISOString() : <any>undefined;
        data["overAllDiscountAmount"] = this.overAllDiscountAmount;
        data["overAllDiscountPercentage"] = this.overAllDiscountPercentage;
        data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>undefined;
        data["discountEmail"] = this.discountEmail;
        return data; 
    }
}

export interface ICreateQuotationInput {
    id: number;
    termsandCondition: string;
    refNo: string;
    customerId: string;
    newCompanyId: number;
    quotationStatusId: number;
    salesPersonId: number;
    attentionContactId: number;
    total: number;
    name: string;
    email: string;
    mobileNumber: string;
    submitted: boolean;
    submittedDate: moment.Moment;
    won: boolean;
    wonDate: moment.Moment;
    lost: boolean;
    lostDate: moment.Moment;
    inquiryId: number;
    mileStoneId: number;
    optional: boolean;
    void: boolean;
    stageId: number;
    poNumber: string;
    reasonRemark: string;
    compatitorId: number;
    reasonId: number;
    vat: number;
    vatAmount: number;
    isVat: boolean;
    orgDate: moment.Moment;
    revised: boolean;
    revisionId: number;
    archieved: boolean;
    isClosed: boolean;
    rfqNo: string;
    refQNo: string;
    isApproved: boolean;
    negotiation: boolean;
    negotiationDate: moment.Moment;
    overAllDiscountAmount: number;
    overAllDiscountPercentage: number;
    paymentDate: moment.Moment;
    discountEmail: boolean;
}

export class UpdateQuotationInput implements IUpdateQuotationInput {
    id: number;
    mileStoneId: number;
    stageId: number;
    poNumber: string;
    reasonRemark: string;
    compatitorId: number;
    reasonId: number;
    won: boolean;
    lost: boolean;
    paymentDate: moment.Moment;

    constructor(data?: IUpdateQuotationInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.mileStoneId = data["mileStoneId"];
            this.stageId = data["stageId"];
            this.poNumber = data["poNumber"];
            this.reasonRemark = data["reasonRemark"];
            this.compatitorId = data["compatitorId"];
            this.reasonId = data["reasonId"];
            this.won = data["won"];
            this.lost = data["lost"];
            this.paymentDate = data["paymentDate"] ? moment(data["paymentDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateQuotationInput {
        let result = new UpdateQuotationInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["mileStoneId"] = this.mileStoneId;
        data["stageId"] = this.stageId;
        data["poNumber"] = this.poNumber;
        data["reasonRemark"] = this.reasonRemark;
        data["compatitorId"] = this.compatitorId;
        data["reasonId"] = this.reasonId;
        data["won"] = this.won;
        data["lost"] = this.lost;
        data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IUpdateQuotationInput {
    id: number;
    mileStoneId: number;
    stageId: number;
    poNumber: string;
    reasonRemark: string;
    compatitorId: number;
    reasonId: number;
    won: boolean;
    lost: boolean;
    paymentDate: moment.Moment;
}

export class GetSection implements IGetSection {
    section: SectionListDto;

    constructor(data?: IGetSection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.section = data["section"] ? SectionListDto.fromJS(data["section"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSection {
        let result = new GetSection();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["section"] = this.section ? this.section.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetSection {
    section: SectionListDto;
}

export class SectionListDto implements ISectionListDto {
    id: number;
    name: string;
    quotationId: number;
    refNo: string;

    constructor(data?: ISectionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.quotationId = data["quotationId"];
            this.refNo = data["refNo"];
        }
    }

    static fromJS(data: any): SectionListDto {
        let result = new SectionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["quotationId"] = this.quotationId;
        data["refNo"] = this.refNo;
        return data; 
    }
}

export interface ISectionListDto {
    id: number;
    name: string;
    quotationId: number;
    refNo: string;
}

export class CreateSectionInput implements ICreateSectionInput {
    id: number;
    name: string;
    quotationId: number;

    constructor(data?: ICreateSectionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.quotationId = data["quotationId"];
        }
    }

    static fromJS(data: any): CreateSectionInput {
        let result = new CreateSectionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["quotationId"] = this.quotationId;
        return data; 
    }
}

export interface ICreateSectionInput {
    id: number;
    name: string;
    quotationId: number;
}

export class GetQuotationProduct implements IGetQuotationProduct {
    product: QuotationProductListDto;

    constructor(data?: IGetQuotationProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.product = data["product"] ? QuotationProductListDto.fromJS(data["product"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetQuotationProduct {
        let result = new GetQuotationProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetQuotationProduct {
    product: QuotationProductListDto;
}

export class QuotationProductListDto implements IQuotationProductListDto {
    id: number;
    productCode: string;
    quantity: number;
    discount: number;
    unitOfMeasurement: number;
    unitOfPrice: number;
    totalAmount: number;
    sUnitOfPrice: string;
    sTotalAmount: string;
    quotationId: number;
    productId: number;
    temporaryProductId: number;
    approval: boolean;
    sectionId: number;
    sectionName: string;
    refNo: string;
    discountable: boolean;
    productName: string;
    locked: boolean;
    overAllPrice: number;
    overAllDiscount: number;
    temporaryCode: string;
    imageUrl: string;
    creationTime: moment.Moment;

    constructor(data?: IQuotationProductListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productCode = data["productCode"];
            this.quantity = data["quantity"];
            this.discount = data["discount"];
            this.unitOfMeasurement = data["unitOfMeasurement"];
            this.unitOfPrice = data["unitOfPrice"];
            this.totalAmount = data["totalAmount"];
            this.sUnitOfPrice = data["sUnitOfPrice"];
            this.sTotalAmount = data["sTotalAmount"];
            this.quotationId = data["quotationId"];
            this.productId = data["productId"];
            this.temporaryProductId = data["temporaryProductId"];
            this.approval = data["approval"];
            this.sectionId = data["sectionId"];
            this.sectionName = data["sectionName"];
            this.refNo = data["refNo"];
            this.discountable = data["discountable"];
            this.productName = data["productName"];
            this.locked = data["locked"];
            this.overAllPrice = data["overAllPrice"];
            this.overAllDiscount = data["overAllDiscount"];
            this.temporaryCode = data["temporaryCode"];
            this.imageUrl = data["imageUrl"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): QuotationProductListDto {
        let result = new QuotationProductListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productCode"] = this.productCode;
        data["quantity"] = this.quantity;
        data["discount"] = this.discount;
        data["unitOfMeasurement"] = this.unitOfMeasurement;
        data["unitOfPrice"] = this.unitOfPrice;
        data["totalAmount"] = this.totalAmount;
        data["sUnitOfPrice"] = this.sUnitOfPrice;
        data["sTotalAmount"] = this.sTotalAmount;
        data["quotationId"] = this.quotationId;
        data["productId"] = this.productId;
        data["temporaryProductId"] = this.temporaryProductId;
        data["approval"] = this.approval;
        data["sectionId"] = this.sectionId;
        data["sectionName"] = this.sectionName;
        data["refNo"] = this.refNo;
        data["discountable"] = this.discountable;
        data["productName"] = this.productName;
        data["locked"] = this.locked;
        data["overAllPrice"] = this.overAllPrice;
        data["overAllDiscount"] = this.overAllDiscount;
        data["temporaryCode"] = this.temporaryCode;
        data["imageUrl"] = this.imageUrl;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IQuotationProductListDto {
    id: number;
    productCode: string;
    quantity: number;
    discount: number;
    unitOfMeasurement: number;
    unitOfPrice: number;
    totalAmount: number;
    sUnitOfPrice: string;
    sTotalAmount: string;
    quotationId: number;
    productId: number;
    temporaryProductId: number;
    approval: boolean;
    sectionId: number;
    sectionName: string;
    refNo: string;
    discountable: boolean;
    productName: string;
    locked: boolean;
    overAllPrice: number;
    overAllDiscount: number;
    temporaryCode: string;
    imageUrl: string;
    creationTime: moment.Moment;
}

export class QuotationProductInput implements IQuotationProductInput {
    id: number;
    productCode: string;
    quantity: number;
    discount: number;
    unitOfMeasurement: number;
    unitOfPrice: number;
    totalAmount: number;
    quotationId: number;
    productId: number;
    approval: boolean;
    sectionId: number;
    discountable: boolean;
    locked: boolean;
    overAllPrice: number;
    overAllDiscount: number;
    temporaryCode: string;
    temporaryProductId: number;

    constructor(data?: IQuotationProductInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productCode = data["productCode"];
            this.quantity = data["quantity"];
            this.discount = data["discount"];
            this.unitOfMeasurement = data["unitOfMeasurement"];
            this.unitOfPrice = data["unitOfPrice"];
            this.totalAmount = data["totalAmount"];
            this.quotationId = data["quotationId"];
            this.productId = data["productId"];
            this.approval = data["approval"];
            this.sectionId = data["sectionId"];
            this.discountable = data["discountable"];
            this.locked = data["locked"];
            this.overAllPrice = data["overAllPrice"];
            this.overAllDiscount = data["overAllDiscount"];
            this.temporaryCode = data["temporaryCode"];
            this.temporaryProductId = data["temporaryProductId"];
        }
    }

    static fromJS(data: any): QuotationProductInput {
        let result = new QuotationProductInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productCode"] = this.productCode;
        data["quantity"] = this.quantity;
        data["discount"] = this.discount;
        data["unitOfMeasurement"] = this.unitOfMeasurement;
        data["unitOfPrice"] = this.unitOfPrice;
        data["totalAmount"] = this.totalAmount;
        data["quotationId"] = this.quotationId;
        data["productId"] = this.productId;
        data["approval"] = this.approval;
        data["sectionId"] = this.sectionId;
        data["discountable"] = this.discountable;
        data["locked"] = this.locked;
        data["overAllPrice"] = this.overAllPrice;
        data["overAllDiscount"] = this.overAllDiscount;
        data["temporaryCode"] = this.temporaryCode;
        data["temporaryProductId"] = this.temporaryProductId;
        return data; 
    }
}

export interface IQuotationProductInput {
    id: number;
    productCode: string;
    quantity: number;
    discount: number;
    unitOfMeasurement: number;
    unitOfPrice: number;
    totalAmount: number;
    quotationId: number;
    productId: number;
    approval: boolean;
    sectionId: number;
    discountable: boolean;
    locked: boolean;
    overAllPrice: number;
    overAllDiscount: number;
    temporaryCode: string;
    temporaryProductId: number;
}

export class PagedResultDtoOfImportHistoryList implements IPagedResultDtoOfImportHistoryList {
    totalCount: number;
    items: ImportHistoryList[];

    constructor(data?: IPagedResultDtoOfImportHistoryList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ImportHistoryList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfImportHistoryList {
        let result = new PagedResultDtoOfImportHistoryList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfImportHistoryList {
    totalCount: number;
    items: ImportHistoryList[];
}

export class ImportHistoryList implements IImportHistoryList {
    id: number;
    fileName: string;
    quotationId: number;
    productCode: string;
    quantity: string;
    sectionName: string;
    status: string;
    creationTime: string;

    constructor(data?: IImportHistoryList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.fileName = data["fileName"];
            this.quotationId = data["quotationId"];
            this.productCode = data["productCode"];
            this.quantity = data["quantity"];
            this.sectionName = data["sectionName"];
            this.status = data["status"];
            this.creationTime = data["creationTime"];
        }
    }

    static fromJS(data: any): ImportHistoryList {
        let result = new ImportHistoryList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fileName"] = this.fileName;
        data["quotationId"] = this.quotationId;
        data["productCode"] = this.productCode;
        data["quantity"] = this.quantity;
        data["sectionName"] = this.sectionName;
        data["status"] = this.status;
        data["creationTime"] = this.creationTime;
        return data; 
    }
}

export interface IImportHistoryList {
    id: number;
    fileName: string;
    quotationId: number;
    productCode: string;
    quantity: string;
    sectionName: string;
    status: string;
    creationTime: string;
}

export class ListResultDtoOfQuotationListDto implements IListResultDtoOfQuotationListDto {
    items: QuotationListDto[];

    constructor(data?: IListResultDtoOfQuotationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(QuotationListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfQuotationListDto {
        let result = new ListResultDtoOfQuotationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfQuotationListDto {
    items: QuotationListDto[];
}

export class PagedResultDtoOfQuotationInquiryFilter implements IPagedResultDtoOfQuotationInquiryFilter {
    totalCount: number;
    items: QuotationInquiryFilter[];

    constructor(data?: IPagedResultDtoOfQuotationInquiryFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(QuotationInquiryFilter.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfQuotationInquiryFilter {
        let result = new PagedResultDtoOfQuotationInquiryFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfQuotationInquiryFilter {
    totalCount: number;
    items: QuotationInquiryFilter[];
}

export class QuotationInquiryFilter implements IQuotationInquiryFilter {
    quotationRefNo: string;
    quotationCreation: string;
    quotationCreateBy: string;
    quotationStatus: string;
    salesman: string;
    quotationValue: string;
    productCode: string;
    productAmount: string;
    titleOfInquiry: string;
    inquiryRefNo: string;
    inquiryCreation: string;
    inquiryCreateBy: string;
    potentialCustomer: string;
    statusName: string;
    email: string;
    mobileNumber: string;
    mileStoneName: string;
    total: string;
    enquiryStatus: string;
    teamName: string;
    coordinator: string;
    designer: string;
    designationName: string;
    emirates: string;
    depatmentName: string;
    closureDate: string;
    lastActivity: string;
    probability: string;
    areaName: string;
    buildingName: string;
    categories: string;
    status: string;
    whyBafco: string;
    quotationId: number;

    constructor(data?: IQuotationInquiryFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.quotationRefNo = data["quotationRefNo"];
            this.quotationCreation = data["quotationCreation"];
            this.quotationCreateBy = data["quotationCreateBy"];
            this.quotationStatus = data["quotationStatus"];
            this.salesman = data["salesman"];
            this.quotationValue = data["quotationValue"];
            this.productCode = data["productCode"];
            this.productAmount = data["productAmount"];
            this.titleOfInquiry = data["titleOfInquiry"];
            this.inquiryRefNo = data["inquiryRefNo"];
            this.inquiryCreation = data["inquiryCreation"];
            this.inquiryCreateBy = data["inquiryCreateBy"];
            this.potentialCustomer = data["potentialCustomer"];
            this.statusName = data["statusName"];
            this.email = data["email"];
            this.mobileNumber = data["mobileNumber"];
            this.mileStoneName = data["mileStoneName"];
            this.total = data["total"];
            this.enquiryStatus = data["enquiryStatus"];
            this.teamName = data["teamName"];
            this.coordinator = data["coordinator"];
            this.designer = data["designer"];
            this.designationName = data["designationName"];
            this.emirates = data["emirates"];
            this.depatmentName = data["depatmentName"];
            this.closureDate = data["closureDate"];
            this.lastActivity = data["lastActivity"];
            this.probability = data["probability"];
            this.areaName = data["areaName"];
            this.buildingName = data["buildingName"];
            this.categories = data["categories"];
            this.status = data["status"];
            this.whyBafco = data["whyBafco"];
            this.quotationId = data["quotationId"];
        }
    }

    static fromJS(data: any): QuotationInquiryFilter {
        let result = new QuotationInquiryFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quotationRefNo"] = this.quotationRefNo;
        data["quotationCreation"] = this.quotationCreation;
        data["quotationCreateBy"] = this.quotationCreateBy;
        data["quotationStatus"] = this.quotationStatus;
        data["salesman"] = this.salesman;
        data["quotationValue"] = this.quotationValue;
        data["productCode"] = this.productCode;
        data["productAmount"] = this.productAmount;
        data["titleOfInquiry"] = this.titleOfInquiry;
        data["inquiryRefNo"] = this.inquiryRefNo;
        data["inquiryCreation"] = this.inquiryCreation;
        data["inquiryCreateBy"] = this.inquiryCreateBy;
        data["potentialCustomer"] = this.potentialCustomer;
        data["statusName"] = this.statusName;
        data["email"] = this.email;
        data["mobileNumber"] = this.mobileNumber;
        data["mileStoneName"] = this.mileStoneName;
        data["total"] = this.total;
        data["enquiryStatus"] = this.enquiryStatus;
        data["teamName"] = this.teamName;
        data["coordinator"] = this.coordinator;
        data["designer"] = this.designer;
        data["designationName"] = this.designationName;
        data["emirates"] = this.emirates;
        data["depatmentName"] = this.depatmentName;
        data["closureDate"] = this.closureDate;
        data["lastActivity"] = this.lastActivity;
        data["probability"] = this.probability;
        data["areaName"] = this.areaName;
        data["buildingName"] = this.buildingName;
        data["categories"] = this.categories;
        data["status"] = this.status;
        data["whyBafco"] = this.whyBafco;
        data["quotationId"] = this.quotationId;
        return data; 
    }
}

export interface IQuotationInquiryFilter {
    quotationRefNo: string;
    quotationCreation: string;
    quotationCreateBy: string;
    quotationStatus: string;
    salesman: string;
    quotationValue: string;
    productCode: string;
    productAmount: string;
    titleOfInquiry: string;
    inquiryRefNo: string;
    inquiryCreation: string;
    inquiryCreateBy: string;
    potentialCustomer: string;
    statusName: string;
    email: string;
    mobileNumber: string;
    mileStoneName: string;
    total: string;
    enquiryStatus: string;
    teamName: string;
    coordinator: string;
    designer: string;
    designationName: string;
    emirates: string;
    depatmentName: string;
    closureDate: string;
    lastActivity: string;
    probability: string;
    areaName: string;
    buildingName: string;
    categories: string;
    status: string;
    whyBafco: string;
    quotationId: number;
}

export class PagedResultDtoOfQuotationReportListDto implements IPagedResultDtoOfQuotationReportListDto {
    totalCount: number;
    items: QuotationReportListDto[];

    constructor(data?: IPagedResultDtoOfQuotationReportListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(QuotationReportListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfQuotationReportListDto {
        let result = new PagedResultDtoOfQuotationReportListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfQuotationReportListDto {
    totalCount: number;
    items: QuotationReportListDto[];
}

export class QuotationReportListDto implements IQuotationReportListDto {
    date: string;
    qRefNo: string;
    inquiryName: string;
    status: string;
    accountManager: string;
    newOrExisting: string;
    location: string;
    aedValue: number;
    stage: string;
    percentage: number;
    weightedAED: number;
    total1Value: number;
    total2Value: number;
    total3Value: number;
    total4Value: number;
    total5Value: number;
    total6Value: number;
    total7Value: number;
    total8Value: number;
    total9Value: number;
    total10Value: number;
    total11Value: number;
    total12Value: number;
    actionDate: string;
    notes: string;
    inquiryId: number;
    companyName: string;
    monthOrder: string;
    quotationId: number;
    aedValueFormat: string;
    weightedAEDFormat: string;
    total1ValueFormat: string;
    total2ValueFormat: string;
    total3ValueFormat: string;
    total4ValueFormat: string;
    total5ValueFormat: string;
    total6ValueFormat: string;
    total7ValueFormat: string;
    total8ValueFormat: string;
    total9ValueFormat: string;
    total10ValueFormat: string;
    total11ValueFormat: string;
    total12ValueFormat: string;
    closureDate: moment.Moment;

    constructor(data?: IQuotationReportListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.date = data["date"];
            this.qRefNo = data["qRefNo"];
            this.inquiryName = data["inquiryName"];
            this.status = data["status"];
            this.accountManager = data["accountManager"];
            this.newOrExisting = data["newOrExisting"];
            this.location = data["location"];
            this.aedValue = data["aedValue"];
            this.stage = data["stage"];
            this.percentage = data["percentage"];
            this.weightedAED = data["weightedAED"];
            this.total1Value = data["total1Value"];
            this.total2Value = data["total2Value"];
            this.total3Value = data["total3Value"];
            this.total4Value = data["total4Value"];
            this.total5Value = data["total5Value"];
            this.total6Value = data["total6Value"];
            this.total7Value = data["total7Value"];
            this.total8Value = data["total8Value"];
            this.total9Value = data["total9Value"];
            this.total10Value = data["total10Value"];
            this.total11Value = data["total11Value"];
            this.total12Value = data["total12Value"];
            this.actionDate = data["actionDate"];
            this.notes = data["notes"];
            this.inquiryId = data["inquiryId"];
            this.companyName = data["companyName"];
            this.monthOrder = data["monthOrder"];
            this.quotationId = data["quotationId"];
            this.aedValueFormat = data["aedValueFormat"];
            this.weightedAEDFormat = data["weightedAEDFormat"];
            this.total1ValueFormat = data["total1ValueFormat"];
            this.total2ValueFormat = data["total2ValueFormat"];
            this.total3ValueFormat = data["total3ValueFormat"];
            this.total4ValueFormat = data["total4ValueFormat"];
            this.total5ValueFormat = data["total5ValueFormat"];
            this.total6ValueFormat = data["total6ValueFormat"];
            this.total7ValueFormat = data["total7ValueFormat"];
            this.total8ValueFormat = data["total8ValueFormat"];
            this.total9ValueFormat = data["total9ValueFormat"];
            this.total10ValueFormat = data["total10ValueFormat"];
            this.total11ValueFormat = data["total11ValueFormat"];
            this.total12ValueFormat = data["total12ValueFormat"];
            this.closureDate = data["closureDate"] ? moment(data["closureDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): QuotationReportListDto {
        let result = new QuotationReportListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["qRefNo"] = this.qRefNo;
        data["inquiryName"] = this.inquiryName;
        data["status"] = this.status;
        data["accountManager"] = this.accountManager;
        data["newOrExisting"] = this.newOrExisting;
        data["location"] = this.location;
        data["aedValue"] = this.aedValue;
        data["stage"] = this.stage;
        data["percentage"] = this.percentage;
        data["weightedAED"] = this.weightedAED;
        data["total1Value"] = this.total1Value;
        data["total2Value"] = this.total2Value;
        data["total3Value"] = this.total3Value;
        data["total4Value"] = this.total4Value;
        data["total5Value"] = this.total5Value;
        data["total6Value"] = this.total6Value;
        data["total7Value"] = this.total7Value;
        data["total8Value"] = this.total8Value;
        data["total9Value"] = this.total9Value;
        data["total10Value"] = this.total10Value;
        data["total11Value"] = this.total11Value;
        data["total12Value"] = this.total12Value;
        data["actionDate"] = this.actionDate;
        data["notes"] = this.notes;
        data["inquiryId"] = this.inquiryId;
        data["companyName"] = this.companyName;
        data["monthOrder"] = this.monthOrder;
        data["quotationId"] = this.quotationId;
        data["aedValueFormat"] = this.aedValueFormat;
        data["weightedAEDFormat"] = this.weightedAEDFormat;
        data["total1ValueFormat"] = this.total1ValueFormat;
        data["total2ValueFormat"] = this.total2ValueFormat;
        data["total3ValueFormat"] = this.total3ValueFormat;
        data["total4ValueFormat"] = this.total4ValueFormat;
        data["total5ValueFormat"] = this.total5ValueFormat;
        data["total6ValueFormat"] = this.total6ValueFormat;
        data["total7ValueFormat"] = this.total7ValueFormat;
        data["total8ValueFormat"] = this.total8ValueFormat;
        data["total9ValueFormat"] = this.total9ValueFormat;
        data["total10ValueFormat"] = this.total10ValueFormat;
        data["total11ValueFormat"] = this.total11ValueFormat;
        data["total12ValueFormat"] = this.total12ValueFormat;
        data["closureDate"] = this.closureDate ? this.closureDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IQuotationReportListDto {
    date: string;
    qRefNo: string;
    inquiryName: string;
    status: string;
    accountManager: string;
    newOrExisting: string;
    location: string;
    aedValue: number;
    stage: string;
    percentage: number;
    weightedAED: number;
    total1Value: number;
    total2Value: number;
    total3Value: number;
    total4Value: number;
    total5Value: number;
    total6Value: number;
    total7Value: number;
    total8Value: number;
    total9Value: number;
    total10Value: number;
    total11Value: number;
    total12Value: number;
    actionDate: string;
    notes: string;
    inquiryId: number;
    companyName: string;
    monthOrder: string;
    quotationId: number;
    aedValueFormat: string;
    weightedAEDFormat: string;
    total1ValueFormat: string;
    total2ValueFormat: string;
    total3ValueFormat: string;
    total4ValueFormat: string;
    total5ValueFormat: string;
    total6ValueFormat: string;
    total7ValueFormat: string;
    total8ValueFormat: string;
    total9ValueFormat: string;
    total10ValueFormat: string;
    total11ValueFormat: string;
    total12ValueFormat: string;
    closureDate: moment.Moment;
}

export class PagedResultDtoOfTeamReportListDto implements IPagedResultDtoOfTeamReportListDto {
    totalCount: number;
    items: TeamReportListDto[];

    constructor(data?: IPagedResultDtoOfTeamReportListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TeamReportListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTeamReportListDto {
        let result = new PagedResultDtoOfTeamReportListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfTeamReportListDto {
    totalCount: number;
    items: TeamReportListDto[];
}

export class TeamReportListDto implements ITeamReportListDto {
    teamName: string;
    accountManager: string;
    totalAEDValue: number;
    totalWeightedAED: number;
    total1Value: number;
    total2Value: number;
    total3Value: number;
    total4Value: number;
    total5Value: number;
    total6Value: number;
    total7Value: number;
    total8Value: number;
    total9Value: number;
    total10Value: number;
    total11Value: number;
    total12Value: number;
    teamId: number;
    accountManagerId: number;
    totalAEDValueFormat: string;
    totalWeightedAEDFormat: string;
    total1ValueFormat: string;
    total2ValueFormat: string;
    total3ValueFormat: string;
    total4ValueFormat: string;
    total5ValueFormat: string;
    total6ValueFormat: string;
    total7ValueFormat: string;
    total8ValueFormat: string;
    total9ValueFormat: string;
    total10ValueFormat: string;
    total11ValueFormat: string;
    total12ValueFormat: string;

    constructor(data?: ITeamReportListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.teamName = data["teamName"];
            this.accountManager = data["accountManager"];
            this.totalAEDValue = data["totalAEDValue"];
            this.totalWeightedAED = data["totalWeightedAED"];
            this.total1Value = data["total1Value"];
            this.total2Value = data["total2Value"];
            this.total3Value = data["total3Value"];
            this.total4Value = data["total4Value"];
            this.total5Value = data["total5Value"];
            this.total6Value = data["total6Value"];
            this.total7Value = data["total7Value"];
            this.total8Value = data["total8Value"];
            this.total9Value = data["total9Value"];
            this.total10Value = data["total10Value"];
            this.total11Value = data["total11Value"];
            this.total12Value = data["total12Value"];
            this.teamId = data["teamId"];
            this.accountManagerId = data["accountManagerId"];
            this.totalAEDValueFormat = data["totalAEDValueFormat"];
            this.totalWeightedAEDFormat = data["totalWeightedAEDFormat"];
            this.total1ValueFormat = data["total1ValueFormat"];
            this.total2ValueFormat = data["total2ValueFormat"];
            this.total3ValueFormat = data["total3ValueFormat"];
            this.total4ValueFormat = data["total4ValueFormat"];
            this.total5ValueFormat = data["total5ValueFormat"];
            this.total6ValueFormat = data["total6ValueFormat"];
            this.total7ValueFormat = data["total7ValueFormat"];
            this.total8ValueFormat = data["total8ValueFormat"];
            this.total9ValueFormat = data["total9ValueFormat"];
            this.total10ValueFormat = data["total10ValueFormat"];
            this.total11ValueFormat = data["total11ValueFormat"];
            this.total12ValueFormat = data["total12ValueFormat"];
        }
    }

    static fromJS(data: any): TeamReportListDto {
        let result = new TeamReportListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["teamName"] = this.teamName;
        data["accountManager"] = this.accountManager;
        data["totalAEDValue"] = this.totalAEDValue;
        data["totalWeightedAED"] = this.totalWeightedAED;
        data["total1Value"] = this.total1Value;
        data["total2Value"] = this.total2Value;
        data["total3Value"] = this.total3Value;
        data["total4Value"] = this.total4Value;
        data["total5Value"] = this.total5Value;
        data["total6Value"] = this.total6Value;
        data["total7Value"] = this.total7Value;
        data["total8Value"] = this.total8Value;
        data["total9Value"] = this.total9Value;
        data["total10Value"] = this.total10Value;
        data["total11Value"] = this.total11Value;
        data["total12Value"] = this.total12Value;
        data["teamId"] = this.teamId;
        data["accountManagerId"] = this.accountManagerId;
        data["totalAEDValueFormat"] = this.totalAEDValueFormat;
        data["totalWeightedAEDFormat"] = this.totalWeightedAEDFormat;
        data["total1ValueFormat"] = this.total1ValueFormat;
        data["total2ValueFormat"] = this.total2ValueFormat;
        data["total3ValueFormat"] = this.total3ValueFormat;
        data["total4ValueFormat"] = this.total4ValueFormat;
        data["total5ValueFormat"] = this.total5ValueFormat;
        data["total6ValueFormat"] = this.total6ValueFormat;
        data["total7ValueFormat"] = this.total7ValueFormat;
        data["total8ValueFormat"] = this.total8ValueFormat;
        data["total9ValueFormat"] = this.total9ValueFormat;
        data["total10ValueFormat"] = this.total10ValueFormat;
        data["total11ValueFormat"] = this.total11ValueFormat;
        data["total12ValueFormat"] = this.total12ValueFormat;
        return data; 
    }
}

export interface ITeamReportListDto {
    teamName: string;
    accountManager: string;
    totalAEDValue: number;
    totalWeightedAED: number;
    total1Value: number;
    total2Value: number;
    total3Value: number;
    total4Value: number;
    total5Value: number;
    total6Value: number;
    total7Value: number;
    total8Value: number;
    total9Value: number;
    total10Value: number;
    total11Value: number;
    total12Value: number;
    teamId: number;
    accountManagerId: number;
    totalAEDValueFormat: string;
    totalWeightedAEDFormat: string;
    total1ValueFormat: string;
    total2ValueFormat: string;
    total3ValueFormat: string;
    total4ValueFormat: string;
    total5ValueFormat: string;
    total6ValueFormat: string;
    total7ValueFormat: string;
    total8ValueFormat: string;
    total9ValueFormat: string;
    total10ValueFormat: string;
    total11ValueFormat: string;
    total12ValueFormat: string;
}

export class ListResultDtoOfQuotationStatusList implements IListResultDtoOfQuotationStatusList {
    items: QuotationStatusList[];

    constructor(data?: IListResultDtoOfQuotationStatusList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(QuotationStatusList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfQuotationStatusList {
        let result = new ListResultDtoOfQuotationStatusList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfQuotationStatusList {
    items: QuotationStatusList[];
}

export class QuotationStatusList implements IQuotationStatusList {
    id: number;
    code: string;
    name: string;

    constructor(data?: IQuotationStatusList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): QuotationStatusList {
        let result = new QuotationStatusList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data; 
    }
}

export interface IQuotationStatusList {
    id: number;
    code: string;
    name: string;
}

export class GetQuotationStatus implements IGetQuotationStatus {
    status: QuotationStatusInput;

    constructor(data?: IGetQuotationStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.status = data["status"] ? QuotationStatusInput.fromJS(data["status"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetQuotationStatus {
        let result = new GetQuotationStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status ? this.status.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetQuotationStatus {
    status: QuotationStatusInput;
}

export class QuotationStatusInput implements IQuotationStatusInput {
    id: number;
    code: string;
    name: string;

    constructor(data?: IQuotationStatusInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): QuotationStatusInput {
        let result = new QuotationStatusInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data; 
    }
}

export interface IQuotationStatusInput {
    id: number;
    code: string;
    name: string;
}

export class ListResultDtoOfRegionList implements IListResultDtoOfRegionList {
    items: RegionList[];

    constructor(data?: IListResultDtoOfRegionList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(RegionList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfRegionList {
        let result = new ListResultDtoOfRegionList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfRegionList {
    items: RegionList[];
}

export class RegionList implements IRegionList {
    id: number;
    regionCode: string;
    regionName: string;

    constructor(data?: IRegionList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.regionCode = data["regionCode"];
            this.regionName = data["regionName"];
        }
    }

    static fromJS(data: any): RegionList {
        let result = new RegionList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["regionCode"] = this.regionCode;
        data["regionName"] = this.regionName;
        return data; 
    }
}

export interface IRegionList {
    id: number;
    regionCode: string;
    regionName: string;
}

export class GetRegion implements IGetRegion {
    regions: RegionList;

    constructor(data?: IGetRegion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.regions = data["regions"] ? RegionList.fromJS(data["regions"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRegion {
        let result = new GetRegion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regions"] = this.regions ? this.regions.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRegion {
    regions: RegionList;
}

export class RegionInput implements IRegionInput {
    id: number;
    regionCode: string;
    regionName: string;

    constructor(data?: IRegionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.regionCode = data["regionCode"];
            this.regionName = data["regionName"];
        }
    }

    static fromJS(data: any): RegionInput {
        let result = new RegionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["regionCode"] = this.regionCode;
        data["regionName"] = this.regionName;
        return data; 
    }
}

export interface IRegionInput {
    id: number;
    regionCode: string;
    regionName: string;
}

export class ListResultDtoOfRegionCityList implements IListResultDtoOfRegionCityList {
    items: RegionCityList[];

    constructor(data?: IListResultDtoOfRegionCityList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(RegionCityList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfRegionCityList {
        let result = new ListResultDtoOfRegionCityList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfRegionCityList {
    items: RegionCityList[];
}

export class RegionCityList implements IRegionCityList {
    id: number;
    cityId: number;
    regionId: number;
    cityName: string;

    constructor(data?: IRegionCityList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.cityId = data["cityId"];
            this.regionId = data["regionId"];
            this.cityName = data["cityName"];
        }
    }

    static fromJS(data: any): RegionCityList {
        let result = new RegionCityList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cityId"] = this.cityId;
        data["regionId"] = this.regionId;
        data["cityName"] = this.cityName;
        return data; 
    }
}

export interface IRegionCityList {
    id: number;
    cityId: number;
    regionId: number;
    cityName: string;
}

export class RegionCityInput implements IRegionCityInput {
    id: number;
    regionId: number;
    cityId: number;

    constructor(data?: IRegionCityInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.regionId = data["regionId"];
            this.cityId = data["cityId"];
        }
    }

    static fromJS(data: any): RegionCityInput {
        let result = new RegionCityInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["regionId"] = this.regionId;
        data["cityId"] = this.cityId;
        return data; 
    }
}

export interface IRegionCityInput {
    id: number;
    regionId: number;
    cityId: number;
}

export class ListResultDtoOfRoleListDto implements IListResultDtoOfRoleListDto {
    items: RoleListDto[];

    constructor(data?: IListResultDtoOfRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(RoleListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfRoleListDto {
        let result = new ListResultDtoOfRoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfRoleListDto {
    items: RoleListDto[];
}

export class RoleListDto implements IRoleListDto {
    name: string;
    displayName: string;
    isStatic: boolean;
    isDefault: boolean;
    creationTime: moment.Moment;
    id: number;

    constructor(data?: IRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.isStatic = data["isStatic"];
            this.isDefault = data["isDefault"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): RoleListDto {
        let result = new RoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isStatic"] = this.isStatic;
        data["isDefault"] = this.isDefault;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IRoleListDto {
    name: string;
    displayName: string;
    isStatic: boolean;
    isDefault: boolean;
    creationTime: moment.Moment;
    id: number;
}

export class GetRoleForEditOutput implements IGetRoleForEditOutput {
    role: RoleEditDto;
    permissions: FlatPermissionDto[];
    grantedPermissionNames: string[];

    constructor(data?: IGetRoleForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : <any>undefined;
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(FlatPermissionDto.fromJS(item));
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): GetRoleForEditOutput {
        let result = new GetRoleForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface IGetRoleForEditOutput {
    role: RoleEditDto;
    permissions: FlatPermissionDto[];
    grantedPermissionNames: string[];
}

export class RoleEditDto implements IRoleEditDto {
    id: number;
    displayName: string;
    isDefault: boolean;

    constructor(data?: IRoleEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.isDefault = data["isDefault"];
        }
    }

    static fromJS(data: any): RoleEditDto {
        let result = new RoleEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        return data; 
    }
}

export interface IRoleEditDto {
    id: number;
    displayName: string;
    isDefault: boolean;
}

export class FlatPermissionDto implements IFlatPermissionDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    isGrantedByDefault: boolean;

    constructor(data?: IFlatPermissionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.isGrantedByDefault = data["isGrantedByDefault"];
        }
    }

    static fromJS(data: any): FlatPermissionDto {
        let result = new FlatPermissionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["isGrantedByDefault"] = this.isGrantedByDefault;
        return data; 
    }
}

export interface IFlatPermissionDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    isGrantedByDefault: boolean;
}

export class CreateOrUpdateRoleInput implements ICreateOrUpdateRoleInput {
    role: RoleEditDto = new RoleEditDto();
    grantedPermissionNames: string[] = [];

    constructor(data?: ICreateOrUpdateRoleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : new RoleEditDto();
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateRoleInput {
        let result = new CreateOrUpdateRoleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface ICreateOrUpdateRoleInput {
    role: RoleEditDto;
    grantedPermissionNames: string[];
}

export class Select3UserResult implements ISelect3UserResult {
    select3data: Userprofiledto[];

    constructor(data?: ISelect3UserResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select3data"] && data["select3data"].constructor === Array) {
                this.select3data = [];
                for (let item of data["select3data"])
                    this.select3data.push(Userprofiledto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select3UserResult {
        let result = new Select3UserResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select3data && this.select3data.constructor === Array) {
            data["select3data"] = [];
            for (let item of this.select3data)
                data["select3data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect3UserResult {
    select3data: Userprofiledto[];
}

export class Userprofiledto implements IUserprofiledto {
    id: number;
    name: string;
    profilePictureId: string;

    constructor(data?: IUserprofiledto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.profilePictureId = data["profilePictureId"];
        }
    }

    static fromJS(data: any): Userprofiledto {
        let result = new Userprofiledto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["profilePictureId"] = this.profilePictureId;
        return data; 
    }
}

export interface IUserprofiledto {
    id: number;
    name: string;
    profilePictureId: string;
}

export class SliderDataList implements ISliderDataList {
    id: number;
    name: string;
    profilePicture: string;
    email: string;
    phone: string;
    teamId: number;

    constructor(data?: ISliderDataList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.profilePicture = data["profilePicture"];
            this.email = data["email"];
            this.phone = data["phone"];
            this.teamId = data["teamId"];
        }
    }

    static fromJS(data: any): SliderDataList {
        let result = new SliderDataList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["profilePicture"] = this.profilePicture;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["teamId"] = this.teamId;
        return data; 
    }
}

export interface ISliderDataList {
    id: number;
    name: string;
    profilePicture: string;
    email: string;
    phone: string;
    teamId: number;
}

export class SelectDResult implements ISelectDResult {
    selectDdata: Datadtoes[];

    constructor(data?: ISelectDResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["selectDdata"] && data["selectDdata"].constructor === Array) {
                this.selectDdata = [];
                for (let item of data["selectDdata"])
                    this.selectDdata.push(Datadtoes.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SelectDResult {
        let result = new SelectDResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.selectDdata && this.selectDdata.constructor === Array) {
            data["selectDdata"] = [];
            for (let item of this.selectDdata)
                data["selectDdata"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelectDResult {
    selectDdata: Datadtoes[];
}

export class Datadtoes implements IDatadtoes {
    id: number;
    name: string;
    photo: string;

    constructor(data?: IDatadtoes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.photo = data["photo"];
        }
    }

    static fromJS(data: any): Datadtoes {
        let result = new Datadtoes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["photo"] = this.photo;
        return data; 
    }
}

export interface IDatadtoes {
    id: number;
    name: string;
    photo: string;
}

export class Select2City implements ISelect2City {
    select2data: Citydto[];

    constructor(data?: ISelect2City) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select2data"] && data["select2data"].constructor === Array) {
                this.select2data = [];
                for (let item of data["select2data"])
                    this.select2data.push(Citydto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select2City {
        let result = new Select2City();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select2data && this.select2data.constructor === Array) {
            data["select2data"] = [];
            for (let item of this.select2data)
                data["select2data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect2City {
    select2data: Citydto[];
}

export class Citydto implements ICitydto {
    id: number;
    name: string;
    country: string;

    constructor(data?: ICitydto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.country = data["country"];
        }
    }

    static fromJS(data: any): Citydto {
        let result = new Citydto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["country"] = this.country;
        return data; 
    }
}

export interface ICitydto {
    id: number;
    name: string;
    country: string;
}

export class Select2product implements ISelect2product {
    select2data: Productdto[];

    constructor(data?: ISelect2product) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select2data"] && data["select2data"].constructor === Array) {
                this.select2data = [];
                for (let item of data["select2data"])
                    this.select2data.push(Productdto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select2product {
        let result = new Select2product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select2data && this.select2data.constructor === Array) {
            data["select2data"] = [];
            for (let item of this.select2data)
                data["select2data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect2product {
    select2data: Productdto[];
}

export class Productdto implements IProductdto {
    id: number;
    name: string;
    prize: number;
    specId: number;
    discount: boolean;

    constructor(data?: IProductdto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.prize = data["prize"];
            this.specId = data["specId"];
            this.discount = data["discount"];
        }
    }

    static fromJS(data: any): Productdto {
        let result = new Productdto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["prize"] = this.prize;
        data["specId"] = this.specId;
        data["discount"] = this.discount;
        return data; 
    }
}

export interface IProductdto {
    id: number;
    name: string;
    prize: number;
    specId: number;
    discount: boolean;
}

export class Select2Result implements ISelect2Result {
    select2data: Datadto[];

    constructor(data?: ISelect2Result) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select2data"] && data["select2data"].constructor === Array) {
                this.select2data = [];
                for (let item of data["select2data"])
                    this.select2data.push(Datadto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select2Result {
        let result = new Select2Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select2data && this.select2data.constructor === Array) {
            data["select2data"] = [];
            for (let item of this.select2data)
                data["select2data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect2Result {
    select2data: Datadto[];
}

export class Datadto implements IDatadto {
    id: number;
    name: string;

    constructor(data?: IDatadto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): Datadto {
        let result = new Datadto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IDatadto {
    id: number;
    name: string;
}

export class Select3Result implements ISelect3Result {
    select3data: Datadtos[];

    constructor(data?: ISelect3Result) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select3data"] && data["select3data"].constructor === Array) {
                this.select3data = [];
                for (let item of data["select3data"])
                    this.select3data.push(Datadtos.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select3Result {
        let result = new Select3Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select3data && this.select3data.constructor === Array) {
            data["select3data"] = [];
            for (let item of this.select3data)
                data["select3data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect3Result {
    select3data: Datadtos[];
}

export class Datadtos implements IDatadtos {
    id: number;
    name: string;

    constructor(data?: IDatadtos) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): Datadtos {
        let result = new Datadtos();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IDatadtos {
    id: number;
    name: string;
}

export class Select2sales implements ISelect2sales {
    selectCompdata: Select2salesDto[];

    constructor(data?: ISelect2sales) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["selectCompdata"] && data["selectCompdata"].constructor === Array) {
                this.selectCompdata = [];
                for (let item of data["selectCompdata"])
                    this.selectCompdata.push(Select2salesDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select2sales {
        let result = new Select2sales();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.selectCompdata && this.selectCompdata.constructor === Array) {
            data["selectCompdata"] = [];
            for (let item of this.selectCompdata)
                data["selectCompdata"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect2sales {
    selectCompdata: Select2salesDto[];
}

export class Select2salesDto implements ISelect2salesDto {
    id: number;
    name: string;
    salesManId: number;
    salesMan: string;

    constructor(data?: ISelect2salesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.salesManId = data["salesManId"];
            this.salesMan = data["salesMan"];
        }
    }

    static fromJS(data: any): Select2salesDto {
        let result = new Select2salesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["salesManId"] = this.salesManId;
        data["salesMan"] = this.salesMan;
        return data; 
    }
}

export interface ISelect2salesDto {
    id: number;
    name: string;
    salesManId: number;
    salesMan: string;
}

export class Select2Contact implements ISelect2Contact {
    select2data: Contactdto[];

    constructor(data?: ISelect2Contact) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select2data"] && data["select2data"].constructor === Array) {
                this.select2data = [];
                for (let item of data["select2data"])
                    this.select2data.push(Contactdto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select2Contact {
        let result = new Select2Contact();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select2data && this.select2data.constructor === Array) {
            data["select2data"] = [];
            for (let item of this.select2data)
                data["select2data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect2Contact {
    select2data: Contactdto[];
}

export class Contactdto implements IContactdto {
    id: number;
    name: string;
    fullName: string;

    constructor(data?: IContactdto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.fullName = data["fullName"];
        }
    }

    static fromJS(data: any): Contactdto {
        let result = new Contactdto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        return data; 
    }
}

export interface IContactdto {
    id: number;
    name: string;
    fullName: string;
}

export class Stage2Result implements IStage2Result {
    select2data: Stagedto[];

    constructor(data?: IStage2Result) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select2data"] && data["select2data"].constructor === Array) {
                this.select2data = [];
                for (let item of data["select2data"])
                    this.select2data.push(Stagedto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Stage2Result {
        let result = new Stage2Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select2data && this.select2data.constructor === Array) {
            data["select2data"] = [];
            for (let item of this.select2data)
                data["select2data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IStage2Result {
    select2data: Stagedto[];
}

export class Stagedto implements IStagedto {
    id: number;
    name: string;
    value: number;
    colorCode: string;
    status: string;

    constructor(data?: IStagedto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.value = data["value"];
            this.colorCode = data["colorCode"];
            this.status = data["status"];
        }
    }

    static fromJS(data: any): Stagedto {
        let result = new Stagedto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["value"] = this.value;
        data["colorCode"] = this.colorCode;
        data["status"] = this.status;
        return data; 
    }
}

export interface IStagedto {
    id: number;
    name: string;
    value: number;
    colorCode: string;
    status: string;
}

export class Select2Attribute implements ISelect2Attribute {
    select3data: AttributeDto[];

    constructor(data?: ISelect2Attribute) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select3data"] && data["select3data"].constructor === Array) {
                this.select3data = [];
                for (let item of data["select3data"])
                    this.select3data.push(AttributeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select2Attribute {
        let result = new Select2Attribute();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select3data && this.select3data.constructor === Array) {
            data["select3data"] = [];
            for (let item of this.select3data)
                data["select3data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect2Attribute {
    select3data: AttributeDto[];
}

export class AttributeDto implements IAttributeDto {
    id: number;
    name: string;
    path: string;

    constructor(data?: IAttributeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.path = data["path"];
        }
    }

    static fromJS(data: any): AttributeDto {
        let result = new AttributeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["path"] = this.path;
        return data; 
    }
}

export interface IAttributeDto {
    id: number;
    name: string;
    path: string;
}

export class Select2Product implements ISelect2Product {
    select2data: Proddto[];

    constructor(data?: ISelect2Product) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select2data"] && data["select2data"].constructor === Array) {
                this.select2data = [];
                for (let item of data["select2data"])
                    this.select2data.push(Proddto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select2Product {
        let result = new Select2Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select2data && this.select2data.constructor === Array) {
            data["select2data"] = [];
            for (let item of this.select2data)
                data["select2data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect2Product {
    select2data: Proddto[];
}

export class Proddto implements IProddto {
    id: number;
    name: string;
    productFamily: string;

    constructor(data?: IProddto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.productFamily = data["productFamily"];
        }
    }

    static fromJS(data: any): Proddto {
        let result = new Proddto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["productFamily"] = this.productFamily;
        return data; 
    }
}

export interface IProddto {
    id: number;
    name: string;
    productFamily: string;
}

export class Select2productdetailsdto implements ISelect2productdetailsdto {
    select2data: Productdetailsdto[];

    constructor(data?: ISelect2productdetailsdto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select2data"] && data["select2data"].constructor === Array) {
                this.select2data = [];
                for (let item of data["select2data"])
                    this.select2data.push(Productdetailsdto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select2productdetailsdto {
        let result = new Select2productdetailsdto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select2data && this.select2data.constructor === Array) {
            data["select2data"] = [];
            for (let item of this.select2data)
                data["select2data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect2productdetailsdto {
    select2data: Productdetailsdto[];
}

export class Productdetailsdto implements IProductdetailsdto {
    id: number;
    productCode: string;
    productName: string;
    specificationId: number;
    specificationName: string;
    description: string;
    imageUrl: string;
    price: number;
    discount: boolean;

    constructor(data?: IProductdetailsdto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productCode = data["productCode"];
            this.productName = data["productName"];
            this.specificationId = data["specificationId"];
            this.specificationName = data["specificationName"];
            this.description = data["description"];
            this.imageUrl = data["imageUrl"];
            this.price = data["price"];
            this.discount = data["discount"];
        }
    }

    static fromJS(data: any): Productdetailsdto {
        let result = new Productdetailsdto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["specificationId"] = this.specificationId;
        data["specificationName"] = this.specificationName;
        data["description"] = this.description;
        data["imageUrl"] = this.imageUrl;
        data["price"] = this.price;
        data["discount"] = this.discount;
        return data; 
    }
}

export interface IProductdetailsdto {
    id: number;
    productCode: string;
    productName: string;
    specificationId: number;
    specificationName: string;
    description: string;
    imageUrl: string;
    price: number;
    discount: boolean;
}

export class Select2Inquiry implements ISelect2Inquiry {
    select2inq: Select2InquiryDto[];

    constructor(data?: ISelect2Inquiry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select2inq"] && data["select2inq"].constructor === Array) {
                this.select2inq = [];
                for (let item of data["select2inq"])
                    this.select2inq.push(Select2InquiryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select2Inquiry {
        let result = new Select2Inquiry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select2inq && this.select2inq.constructor === Array) {
            data["select2inq"] = [];
            for (let item of this.select2inq)
                data["select2inq"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect2Inquiry {
    select2inq: Select2InquiryDto[];
}

export class Select2InquiryDto implements ISelect2InquiryDto {
    id: number;
    salesManId: number;
    salesMan: string;
    companyId: number;
    companyName: string;
    contactId: number;
    contactName: string;

    constructor(data?: ISelect2InquiryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.salesManId = data["salesManId"];
            this.salesMan = data["salesMan"];
            this.companyId = data["companyId"];
            this.companyName = data["companyName"];
            this.contactId = data["contactId"];
            this.contactName = data["contactName"];
        }
    }

    static fromJS(data: any): Select2InquiryDto {
        let result = new Select2InquiryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["salesManId"] = this.salesManId;
        data["salesMan"] = this.salesMan;
        data["companyId"] = this.companyId;
        data["companyName"] = this.companyName;
        data["contactId"] = this.contactId;
        data["contactName"] = this.contactName;
        return data; 
    }
}

export interface ISelect2InquiryDto {
    id: number;
    salesManId: number;
    salesMan: string;
    companyId: number;
    companyName: string;
    contactId: number;
    contactName: string;
}

export class Select2Team implements ISelect2Team {
    selectData: Select2TeamDto[];

    constructor(data?: ISelect2Team) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["selectData"] && data["selectData"].constructor === Array) {
                this.selectData = [];
                for (let item of data["selectData"])
                    this.selectData.push(Select2TeamDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select2Team {
        let result = new Select2Team();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.selectData && this.selectData.constructor === Array) {
            data["selectData"] = [];
            for (let item of this.selectData)
                data["selectData"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect2Team {
    selectData: Select2TeamDto[];
}

export class Select2TeamDto implements ISelect2TeamDto {
    id: number;
    name: string;
    departmentId: number;
    departmentName: string;

    constructor(data?: ISelect2TeamDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.departmentId = data["departmentId"];
            this.departmentName = data["departmentName"];
        }
    }

    static fromJS(data: any): Select2TeamDto {
        let result = new Select2TeamDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["departmentId"] = this.departmentId;
        data["departmentName"] = this.departmentName;
        return data; 
    }
}

export interface ISelect2TeamDto {
    id: number;
    name: string;
    departmentId: number;
    departmentName: string;
}

export class Select2Company implements ISelect2Company {
    select2Company: Select2CompanyDto;

    constructor(data?: ISelect2Company) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.select2Company = data["select2Company"] ? Select2CompanyDto.fromJS(data["select2Company"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Select2Company {
        let result = new Select2Company();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["select2Company"] = this.select2Company ? this.select2Company.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISelect2Company {
    select2Company: Select2CompanyDto;
}

export class Select2CompanyDto implements ISelect2CompanyDto {
    companyId: number;
    companyName: string;
    salesManId: number;
    salesMan: string;
    teamId: number;
    teamName: string;
    divisionId: number;
    divisionName: string;
    email: string;
    phonenumber: string;
    website: string;

    constructor(data?: ISelect2CompanyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.companyId = data["companyId"];
            this.companyName = data["companyName"];
            this.salesManId = data["salesManId"];
            this.salesMan = data["salesMan"];
            this.teamId = data["teamId"];
            this.teamName = data["teamName"];
            this.divisionId = data["divisionId"];
            this.divisionName = data["divisionName"];
            this.email = data["email"];
            this.phonenumber = data["phonenumber"];
            this.website = data["website"];
        }
    }

    static fromJS(data: any): Select2CompanyDto {
        let result = new Select2CompanyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        data["companyName"] = this.companyName;
        data["salesManId"] = this.salesManId;
        data["salesMan"] = this.salesMan;
        data["teamId"] = this.teamId;
        data["teamName"] = this.teamName;
        data["divisionId"] = this.divisionId;
        data["divisionName"] = this.divisionName;
        data["email"] = this.email;
        data["phonenumber"] = this.phonenumber;
        data["website"] = this.website;
        return data; 
    }
}

export interface ISelect2CompanyDto {
    companyId: number;
    companyName: string;
    salesManId: number;
    salesMan: string;
    teamId: number;
    teamName: string;
    divisionId: number;
    divisionName: string;
    email: string;
    phonenumber: string;
    website: string;
}

export class Select4Result implements ISelect4Result {
    select4data: Datadto3[];

    constructor(data?: ISelect4Result) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select4data"] && data["select4data"].constructor === Array) {
                this.select4data = [];
                for (let item of data["select4data"])
                    this.select4data.push(Datadto3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select4Result {
        let result = new Select4Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select4data && this.select4data.constructor === Array) {
            data["select4data"] = [];
            for (let item of this.select4data)
                data["select4data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect4Result {
    select4data: Datadto3[];
}

export class Datadto3 implements IDatadto3 {
    id: number;
    name: string;
    industryId: number;

    constructor(data?: IDatadto3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.industryId = data["industryId"];
        }
    }

    static fromJS(data: any): Datadto3 {
        let result = new Datadto3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["industryId"] = this.industryId;
        return data; 
    }
}

export interface IDatadto3 {
    id: number;
    name: string;
    industryId: number;
}

export class Select2Discount implements ISelect2Discount {
    select2data: Discountdatadto[];

    constructor(data?: ISelect2Discount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select2data"] && data["select2data"].constructor === Array) {
                this.select2data = [];
                for (let item of data["select2data"])
                    this.select2data.push(Discountdatadto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select2Discount {
        let result = new Select2Discount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select2data && this.select2data.constructor === Array) {
            data["select2data"] = [];
            for (let item of this.select2data)
                data["select2data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect2Discount {
    select2data: Discountdatadto[];
}

export class Discountdatadto implements IDiscountdatadto {
    discountable: number;
    unDiscountable: number;

    constructor(data?: IDiscountdatadto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.discountable = data["discountable"];
            this.unDiscountable = data["unDiscountable"];
        }
    }

    static fromJS(data: any): Discountdatadto {
        let result = new Discountdatadto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discountable"] = this.discountable;
        data["unDiscountable"] = this.unDiscountable;
        return data; 
    }
}

export interface IDiscountdatadto {
    discountable: number;
    unDiscountable: number;
}

export class Select2CategoryResult implements ISelect2CategoryResult {
    select2data: Categorydto[];

    constructor(data?: ISelect2CategoryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select2data"] && data["select2data"].constructor === Array) {
                this.select2data = [];
                for (let item of data["select2data"])
                    this.select2data.push(Categorydto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select2CategoryResult {
        let result = new Select2CategoryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select2data && this.select2data.constructor === Array) {
            data["select2data"] = [];
            for (let item of this.select2data)
                data["select2data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect2CategoryResult {
    select2data: Categorydto[];
}

export class Categorydto implements ICategorydto {
    id: number;
    name: string;
    backgroundcolor: string;

    constructor(data?: ICategorydto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.backgroundcolor = data["backgroundcolor"];
        }
    }

    static fromJS(data: any): Categorydto {
        let result = new Categorydto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["backgroundcolor"] = this.backgroundcolor;
        return data; 
    }
}

export interface ICategorydto {
    id: number;
    name: string;
    backgroundcolor: string;
}

export class Select2View implements ISelect2View {
    select5data: ViewDto[];

    constructor(data?: ISelect2View) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select5data"] && data["select5data"].constructor === Array) {
                this.select5data = [];
                for (let item of data["select5data"])
                    this.select5data.push(ViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select2View {
        let result = new Select2View();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select5data && this.select5data.constructor === Array) {
            data["select5data"] = [];
            for (let item of this.select5data)
                data["select5data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect2View {
    select5data: ViewDto[];
}

export class ViewDto implements IViewDto {
    id: number;
    isEditable: boolean;
    name: string;

    constructor(data?: IViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.isEditable = data["isEditable"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): ViewDto {
        let result = new ViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isEditable"] = this.isEditable;
        data["name"] = this.name;
        return data; 
    }
}

export interface IViewDto {
    id: number;
    isEditable: boolean;
    name: string;
}

export class Select2Column implements ISelect2Column {
    select5data: ColumnDto[];

    constructor(data?: ISelect2Column) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select5data"] && data["select5data"].constructor === Array) {
                this.select5data = [];
                for (let item of data["select5data"])
                    this.select5data.push(ColumnDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select2Column {
        let result = new Select2Column();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select5data && this.select5data.constructor === Array) {
            data["select5data"] = [];
            for (let item of this.select5data)
                data["select5data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect2Column {
    select5data: ColumnDto[];
}

export class ColumnDto implements IColumnDto {
    id: number;
    code: string;
    name: string;

    constructor(data?: IColumnDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): ColumnDto {
        let result = new ColumnDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data; 
    }
}

export interface IColumnDto {
    id: number;
    code: string;
    name: string;
}

export class GetCurrentLoginInformationsOutput implements IGetCurrentLoginInformationsOutput {
    user: UserLoginInfoDto;
    tenant: TenantLoginInfoDto;
    application: ApplicationInfoDto;

    constructor(data?: IGetCurrentLoginInformationsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.user = data["user"] ? UserLoginInfoDto.fromJS(data["user"]) : <any>undefined;
            this.tenant = data["tenant"] ? TenantLoginInfoDto.fromJS(data["tenant"]) : <any>undefined;
            this.application = data["application"] ? ApplicationInfoDto.fromJS(data["application"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCurrentLoginInformationsOutput {
        let result = new GetCurrentLoginInformationsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : <any>undefined;
        data["application"] = this.application ? this.application.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetCurrentLoginInformationsOutput {
    user: UserLoginInfoDto;
    tenant: TenantLoginInfoDto;
    application: ApplicationInfoDto;
}

export class UserLoginInfoDto implements IUserLoginInfoDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    emailPassword: string;
    profilePictureId: string;
    id: number;

    constructor(data?: IUserLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.emailPassword = data["emailPassword"];
            this.profilePictureId = data["profilePictureId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserLoginInfoDto {
        let result = new UserLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["emailPassword"] = this.emailPassword;
        data["profilePictureId"] = this.profilePictureId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserLoginInfoDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    emailPassword: string;
    profilePictureId: string;
    id: number;
}

export class TenantLoginInfoDto implements ITenantLoginInfoDto {
    tenancyName: string;
    name: string;
    logoId: string;
    logoFileType: string;
    customCssId: string;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;
    edition: EditionInfoDto;
    creationTime: moment.Moment;
    paymentPeriodType: TenantLoginInfoDtoPaymentPeriodType;
    subscriptionDateString: string;
    creationTimeString: string;
    id: number;

    constructor(data?: ITenantLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.logoId = data["logoId"];
            this.logoFileType = data["logoFileType"];
            this.customCssId = data["customCssId"];
            this.subscriptionEndDateUtc = data["subscriptionEndDateUtc"] ? moment(data["subscriptionEndDateUtc"].toString()) : <any>undefined;
            this.isInTrialPeriod = data["isInTrialPeriod"];
            this.edition = data["edition"] ? EditionInfoDto.fromJS(data["edition"]) : <any>undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.paymentPeriodType = data["paymentPeriodType"];
            this.subscriptionDateString = data["subscriptionDateString"];
            this.creationTimeString = data["creationTimeString"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantLoginInfoDto {
        let result = new TenantLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["logoId"] = this.logoId;
        data["logoFileType"] = this.logoFileType;
        data["customCssId"] = this.customCssId;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any>undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["paymentPeriodType"] = this.paymentPeriodType;
        data["subscriptionDateString"] = this.subscriptionDateString;
        data["creationTimeString"] = this.creationTimeString;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantLoginInfoDto {
    tenancyName: string;
    name: string;
    logoId: string;
    logoFileType: string;
    customCssId: string;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;
    edition: EditionInfoDto;
    creationTime: moment.Moment;
    paymentPeriodType: TenantLoginInfoDtoPaymentPeriodType;
    subscriptionDateString: string;
    creationTimeString: string;
    id: number;
}

export class ApplicationInfoDto implements IApplicationInfoDto {
    version: string;
    releaseDate: moment.Moment;
    features: { [key: string] : boolean; };

    constructor(data?: IApplicationInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.version = data["version"];
            this.releaseDate = data["releaseDate"] ? moment(data["releaseDate"].toString()) : <any>undefined;
            if (data["features"]) {
                this.features = {};
                for (let key in data["features"]) {
                    if (data["features"].hasOwnProperty(key))
                        this.features[key] = data["features"][key];
                }
            }
        }
    }

    static fromJS(data: any): ApplicationInfoDto {
        let result = new ApplicationInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : <any>undefined;
        if (this.features) {
            data["features"] = {};
            for (let key in this.features) {
                if (this.features.hasOwnProperty(key))
                    data["features"][key] = this.features[key];
            }
        }
        return data; 
    }
}

export interface IApplicationInfoDto {
    version: string;
    releaseDate: moment.Moment;
    features: { [key: string] : boolean; };
}

export class EditionInfoDto implements IEditionInfoDto {
    displayName: string;
    trialDayCount: number;
    monthlyPrice: number;
    annualPrice: number;
    isHighestEdition: boolean;
    isFree: boolean;
    id: number;

    constructor(data?: IEditionInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
            this.trialDayCount = data["trialDayCount"];
            this.monthlyPrice = data["monthlyPrice"];
            this.annualPrice = data["annualPrice"];
            this.isHighestEdition = data["isHighestEdition"];
            this.isFree = data["isFree"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EditionInfoDto {
        let result = new EditionInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["trialDayCount"] = this.trialDayCount;
        data["monthlyPrice"] = this.monthlyPrice;
        data["annualPrice"] = this.annualPrice;
        data["isHighestEdition"] = this.isHighestEdition;
        data["isFree"] = this.isFree;
        data["id"] = this.id;
        return data; 
    }
}

export interface IEditionInfoDto {
    displayName: string;
    trialDayCount: number;
    monthlyPrice: number;
    annualPrice: number;
    isHighestEdition: boolean;
    isFree: boolean;
    id: number;
}

export class UpdateUserSignInTokenOutput implements IUpdateUserSignInTokenOutput {
    signInToken: string;
    encodedUserId: string;
    encodedTenantId: string;

    constructor(data?: IUpdateUserSignInTokenOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.signInToken = data["signInToken"];
            this.encodedUserId = data["encodedUserId"];
            this.encodedTenantId = data["encodedTenantId"];
        }
    }

    static fromJS(data: any): UpdateUserSignInTokenOutput {
        let result = new UpdateUserSignInTokenOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["signInToken"] = this.signInToken;
        data["encodedUserId"] = this.encodedUserId;
        data["encodedTenantId"] = this.encodedTenantId;
        return data; 
    }
}

export interface IUpdateUserSignInTokenOutput {
    signInToken: string;
    encodedUserId: string;
    encodedTenantId: string;
}

export class ListResultDtoOfSourceListDto implements IListResultDtoOfSourceListDto {
    items: SourceListDto[];

    constructor(data?: IListResultDtoOfSourceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(SourceListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfSourceListDto {
        let result = new ListResultDtoOfSourceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfSourceListDto {
    items: SourceListDto[];
}

export class SourceListDto implements ISourceListDto {
    id: number;
    sourceName: string;
    sourceCode: string;
    colorCode: string;
    typeId: number;
    typeName: string;

    constructor(data?: ISourceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.sourceName = data["sourceName"];
            this.sourceCode = data["sourceCode"];
            this.colorCode = data["colorCode"];
            this.typeId = data["typeId"];
            this.typeName = data["typeName"];
        }
    }

    static fromJS(data: any): SourceListDto {
        let result = new SourceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sourceName"] = this.sourceName;
        data["sourceCode"] = this.sourceCode;
        data["colorCode"] = this.colorCode;
        data["typeId"] = this.typeId;
        data["typeName"] = this.typeName;
        return data; 
    }
}

export interface ISourceListDto {
    id: number;
    sourceName: string;
    sourceCode: string;
    colorCode: string;
    typeId: number;
    typeName: string;
}

export class GetSources implements IGetSources {
    sources: SourceListDto;

    constructor(data?: IGetSources) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sources = data["sources"] ? SourceListDto.fromJS(data["sources"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSources {
        let result = new GetSources();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sources"] = this.sources ? this.sources.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetSources {
    sources: SourceListDto;
}

export class SourceInputDto implements ISourceInputDto {
    id: number;
    sourceName: string;
    sourceCode: string;
    typeId: number;
    colorCode: string;

    constructor(data?: ISourceInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.sourceName = data["sourceName"];
            this.sourceCode = data["sourceCode"];
            this.typeId = data["typeId"];
            this.colorCode = data["colorCode"];
        }
    }

    static fromJS(data: any): SourceInputDto {
        let result = new SourceInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sourceName"] = this.sourceName;
        data["sourceCode"] = this.sourceCode;
        data["typeId"] = this.typeId;
        data["colorCode"] = this.colorCode;
        return data; 
    }
}

export interface ISourceInputDto {
    id: number;
    sourceName: string;
    sourceCode: string;
    typeId: number;
    colorCode: string;
}

export class ListResultDtoOfTeamListDto implements IListResultDtoOfTeamListDto {
    items: TeamListDto[];

    constructor(data?: IListResultDtoOfTeamListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TeamListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfTeamListDto {
        let result = new ListResultDtoOfTeamListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfTeamListDto {
    items: TeamListDto[];
}

export class TeamListDto implements ITeamListDto {
    id: number;
    name: string;
    salesManagerId: number;
    salesManager: string;
    departmentId: number;
    departmentName: string;

    constructor(data?: ITeamListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.salesManagerId = data["salesManagerId"];
            this.salesManager = data["salesManager"];
            this.departmentId = data["departmentId"];
            this.departmentName = data["departmentName"];
        }
    }

    static fromJS(data: any): TeamListDto {
        let result = new TeamListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["salesManagerId"] = this.salesManagerId;
        data["salesManager"] = this.salesManager;
        data["departmentId"] = this.departmentId;
        data["departmentName"] = this.departmentName;
        return data; 
    }
}

export interface ITeamListDto {
    id: number;
    name: string;
    salesManagerId: number;
    salesManager: string;
    departmentId: number;
    departmentName: string;
}

export class GetTeam implements IGetTeam {
    teams: TeamListDto;

    constructor(data?: IGetTeam) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.teams = data["teams"] ? TeamListDto.fromJS(data["teams"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTeam {
        let result = new GetTeam();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["teams"] = this.teams ? this.teams.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetTeam {
    teams: TeamListDto;
}

export class CreateTeamInput implements ICreateTeamInput {
    id: number;
    name: string;
    salesManagerId: number;
    departmentId: number;

    constructor(data?: ICreateTeamInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.salesManagerId = data["salesManagerId"];
            this.departmentId = data["departmentId"];
        }
    }

    static fromJS(data: any): CreateTeamInput {
        let result = new CreateTeamInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["salesManagerId"] = this.salesManagerId;
        data["departmentId"] = this.departmentId;
        return data; 
    }
}

export interface ICreateTeamInput {
    id: number;
    name: string;
    salesManagerId: number;
    departmentId: number;
}

export class ListResultDtoOfTeamDetailList implements IListResultDtoOfTeamDetailList {
    items: TeamDetailList[];

    constructor(data?: IListResultDtoOfTeamDetailList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TeamDetailList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfTeamDetailList {
        let result = new ListResultDtoOfTeamDetailList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfTeamDetailList {
    items: TeamDetailList[];
}

export class TeamDetailList implements ITeamDetailList {
    id: number;
    salesmanId: number;
    salesman: string;
    teamId: number;
    teamName: string;

    constructor(data?: ITeamDetailList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.salesmanId = data["salesmanId"];
            this.salesman = data["salesman"];
            this.teamId = data["teamId"];
            this.teamName = data["teamName"];
        }
    }

    static fromJS(data: any): TeamDetailList {
        let result = new TeamDetailList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["salesmanId"] = this.salesmanId;
        data["salesman"] = this.salesman;
        data["teamId"] = this.teamId;
        data["teamName"] = this.teamName;
        return data; 
    }
}

export interface ITeamDetailList {
    id: number;
    salesmanId: number;
    salesman: string;
    teamId: number;
    teamName: string;
}

export class CreateTeamDetailInput implements ICreateTeamDetailInput {
    id: number;
    salesmanId: number;
    teamId: number;

    constructor(data?: ICreateTeamDetailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.salesmanId = data["salesmanId"];
            this.teamId = data["teamId"];
        }
    }

    static fromJS(data: any): CreateTeamDetailInput {
        let result = new CreateTeamDetailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["salesmanId"] = this.salesmanId;
        data["teamId"] = this.teamId;
        return data; 
    }
}

export interface ICreateTeamDetailInput {
    id: number;
    salesmanId: number;
    teamId: number;
}

export class PagedResultDtoOfTemporaryProductList implements IPagedResultDtoOfTemporaryProductList {
    totalCount: number;
    items: TemporaryProductList[];

    constructor(data?: IPagedResultDtoOfTemporaryProductList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TemporaryProductList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTemporaryProductList {
        let result = new PagedResultDtoOfTemporaryProductList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfTemporaryProductList {
    totalCount: number;
    items: TemporaryProductList[];
}

export class TemporaryProductList implements ITemporaryProductList {
    id: number;
    productCode: string;
    productName: string;
    suspectCode: string;
    gpcode: string;
    description: string;
    price: number;
    updated: boolean;
    width: number;
    depth: number;
    height: number;
    productSpecificationName: string;
    screationTime: string;
    dimention: string;
    isQuotation: boolean;
    createdBy: string;
    lastModifiedBy: string;
    dcreationTime: moment.Moment;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: ITemporaryProductList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productCode = data["productCode"];
            this.productName = data["productName"];
            this.suspectCode = data["suspectCode"];
            this.gpcode = data["gpcode"];
            this.description = data["description"];
            this.price = data["price"];
            this.updated = data["updated"];
            this.width = data["width"];
            this.depth = data["depth"];
            this.height = data["height"];
            this.productSpecificationName = data["productSpecificationName"];
            this.screationTime = data["screationTime"];
            this.dimention = data["dimention"];
            this.isQuotation = data["isQuotation"];
            this.createdBy = data["createdBy"];
            this.lastModifiedBy = data["lastModifiedBy"];
            this.dcreationTime = data["dcreationTime"] ? moment(data["dcreationTime"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): TemporaryProductList {
        let result = new TemporaryProductList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["suspectCode"] = this.suspectCode;
        data["gpcode"] = this.gpcode;
        data["description"] = this.description;
        data["price"] = this.price;
        data["updated"] = this.updated;
        data["width"] = this.width;
        data["depth"] = this.depth;
        data["height"] = this.height;
        data["productSpecificationName"] = this.productSpecificationName;
        data["screationTime"] = this.screationTime;
        data["dimention"] = this.dimention;
        data["isQuotation"] = this.isQuotation;
        data["createdBy"] = this.createdBy;
        data["lastModifiedBy"] = this.lastModifiedBy;
        data["dcreationTime"] = this.dcreationTime ? this.dcreationTime.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface ITemporaryProductList {
    id: number;
    productCode: string;
    productName: string;
    suspectCode: string;
    gpcode: string;
    description: string;
    price: number;
    updated: boolean;
    width: number;
    depth: number;
    height: number;
    productSpecificationName: string;
    screationTime: string;
    dimention: string;
    isQuotation: boolean;
    createdBy: string;
    lastModifiedBy: string;
    dcreationTime: moment.Moment;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class GetTemporaryProduct implements IGetTemporaryProduct {
    temporaryProductLists: TemporaryProductList;
    tempProductImages: TemporaryProdImages[];

    constructor(data?: IGetTemporaryProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.temporaryProductLists = data["temporaryProductLists"] ? TemporaryProductList.fromJS(data["temporaryProductLists"]) : <any>undefined;
            if (data["tempProductImages"] && data["tempProductImages"].constructor === Array) {
                this.tempProductImages = [];
                for (let item of data["tempProductImages"])
                    this.tempProductImages.push(TemporaryProdImages.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetTemporaryProduct {
        let result = new GetTemporaryProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["temporaryProductLists"] = this.temporaryProductLists ? this.temporaryProductLists.toJSON() : <any>undefined;
        if (this.tempProductImages && this.tempProductImages.constructor === Array) {
            data["tempProductImages"] = [];
            for (let item of this.tempProductImages)
                data["tempProductImages"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetTemporaryProduct {
    temporaryProductLists: TemporaryProductList;
    tempProductImages: TemporaryProdImages[];
}

export class TemporaryProdImages implements ITemporaryProdImages {
    id: number;
    imageUrl: string;

    constructor(data?: ITemporaryProdImages) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.imageUrl = data["imageUrl"];
        }
    }

    static fromJS(data: any): TemporaryProdImages {
        let result = new TemporaryProdImages();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["imageUrl"] = this.imageUrl;
        return data; 
    }
}

export interface ITemporaryProdImages {
    id: number;
    imageUrl: string;
}

export class TemporaryProductInput implements ITemporaryProductInput {
    id: number;
    productCode: string;
    productName: string;
    suspectCode: string;
    gpcode: string;
    description: string;
    price: number;
    updated: boolean;
    width: number;
    depth: number;
    height: number;

    constructor(data?: ITemporaryProductInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productCode = data["productCode"];
            this.productName = data["productName"];
            this.suspectCode = data["suspectCode"];
            this.gpcode = data["gpcode"];
            this.description = data["description"];
            this.price = data["price"];
            this.updated = data["updated"];
            this.width = data["width"];
            this.depth = data["depth"];
            this.height = data["height"];
        }
    }

    static fromJS(data: any): TemporaryProductInput {
        let result = new TemporaryProductInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["suspectCode"] = this.suspectCode;
        data["gpcode"] = this.gpcode;
        data["description"] = this.description;
        data["price"] = this.price;
        data["updated"] = this.updated;
        data["width"] = this.width;
        data["depth"] = this.depth;
        data["height"] = this.height;
        return data; 
    }
}

export interface ITemporaryProductInput {
    id: number;
    productCode: string;
    productName: string;
    suspectCode: string;
    gpcode: string;
    description: string;
    price: number;
    updated: boolean;
    width: number;
    depth: number;
    height: number;
}

export class TemporaryProductImageInput implements ITemporaryProductImageInput {
    id: number;
    temporaryProductId: number;
    imageUrl: string;

    constructor(data?: ITemporaryProductImageInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.temporaryProductId = data["temporaryProductId"];
            this.imageUrl = data["imageUrl"];
        }
    }

    static fromJS(data: any): TemporaryProductImageInput {
        let result = new TemporaryProductImageInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["temporaryProductId"] = this.temporaryProductId;
        data["imageUrl"] = this.imageUrl;
        return data; 
    }
}

export interface ITemporaryProductImageInput {
    id: number;
    temporaryProductId: number;
    imageUrl: string;
}

export class PagedResultDtoOfTenantListDto implements IPagedResultDtoOfTenantListDto {
    totalCount: number;
    items: TenantListDto[];

    constructor(data?: IPagedResultDtoOfTenantListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TenantListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTenantListDto {
        let result = new PagedResultDtoOfTenantListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfTenantListDto {
    totalCount: number;
    items: TenantListDto[];
}

export class TenantListDto implements ITenantListDto {
    tenancyName: string;
    name: string;
    editionDisplayName: string;
    connectionString: string;
    isActive: boolean;
    creationTime: moment.Moment;
    subscriptionEndDateUtc: moment.Moment;
    id: number;

    constructor(data?: ITenantListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.editionDisplayName = data["editionDisplayName"];
            this.connectionString = data["connectionString"];
            this.isActive = data["isActive"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.subscriptionEndDateUtc = data["subscriptionEndDateUtc"] ? moment(data["subscriptionEndDateUtc"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantListDto {
        let result = new TenantListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["editionDisplayName"] = this.editionDisplayName;
        data["connectionString"] = this.connectionString;
        data["isActive"] = this.isActive;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantListDto {
    tenancyName: string;
    name: string;
    editionDisplayName: string;
    connectionString: string;
    isActive: boolean;
    creationTime: moment.Moment;
    subscriptionEndDateUtc: moment.Moment;
    id: number;
}

export class CreateTenantInput implements ICreateTenantInput {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    adminPassword: string;
    connectionString: string;
    shouldChangePasswordOnNextLogin: boolean;
    sendActivationEmail: boolean;
    editionId: number;
    isActive: boolean;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;

    constructor(data?: ICreateTenantInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.adminEmailAddress = data["adminEmailAddress"];
            this.adminPassword = data["adminPassword"];
            this.connectionString = data["connectionString"];
            this.shouldChangePasswordOnNextLogin = data["shouldChangePasswordOnNextLogin"];
            this.sendActivationEmail = data["sendActivationEmail"];
            this.editionId = data["editionId"];
            this.isActive = data["isActive"];
            this.subscriptionEndDateUtc = data["subscriptionEndDateUtc"] ? moment(data["subscriptionEndDateUtc"].toString()) : <any>undefined;
            this.isInTrialPeriod = data["isInTrialPeriod"];
        }
    }

    static fromJS(data: any): CreateTenantInput {
        let result = new CreateTenantInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["adminEmailAddress"] = this.adminEmailAddress;
        data["adminPassword"] = this.adminPassword;
        data["connectionString"] = this.connectionString;
        data["shouldChangePasswordOnNextLogin"] = this.shouldChangePasswordOnNextLogin;
        data["sendActivationEmail"] = this.sendActivationEmail;
        data["editionId"] = this.editionId;
        data["isActive"] = this.isActive;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any>undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        return data; 
    }
}

export interface ICreateTenantInput {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    adminPassword: string;
    connectionString: string;
    shouldChangePasswordOnNextLogin: boolean;
    sendActivationEmail: boolean;
    editionId: number;
    isActive: boolean;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;
}

export class TenantEditDto implements ITenantEditDto {
    tenancyName: string;
    name: string;
    connectionString: string;
    editionId: number;
    isActive: boolean;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;
    id: number;

    constructor(data?: ITenantEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.connectionString = data["connectionString"];
            this.editionId = data["editionId"];
            this.isActive = data["isActive"];
            this.subscriptionEndDateUtc = data["subscriptionEndDateUtc"] ? moment(data["subscriptionEndDateUtc"].toString()) : <any>undefined;
            this.isInTrialPeriod = data["isInTrialPeriod"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantEditDto {
        let result = new TenantEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["connectionString"] = this.connectionString;
        data["editionId"] = this.editionId;
        data["isActive"] = this.isActive;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any>undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantEditDto {
    tenancyName: string;
    name: string;
    connectionString: string;
    editionId: number;
    isActive: boolean;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;
    id: number;
}

export class GetTenantFeaturesEditOutput implements IGetTenantFeaturesEditOutput {
    featureValues: NameValueDto[];
    features: FlatFeatureDto[];

    constructor(data?: IGetTenantFeaturesEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (let item of data["features"])
                    this.features.push(FlatFeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetTenantFeaturesEditOutput {
        let result = new GetTenantFeaturesEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetTenantFeaturesEditOutput {
    featureValues: NameValueDto[];
    features: FlatFeatureDto[];
}

export class UpdateTenantFeaturesInput implements IUpdateTenantFeaturesInput {
    id: number;
    featureValues: NameValueDto[] = [];

    constructor(data?: IUpdateTenantFeaturesInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateTenantFeaturesInput {
        let result = new UpdateTenantFeaturesInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateTenantFeaturesInput {
    id: number;
    featureValues: NameValueDto[];
}

export class GetMemberActivityOutput implements IGetMemberActivityOutput {
    memberActivities: MemberActivity[];

    constructor(data?: IGetMemberActivityOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["memberActivities"] && data["memberActivities"].constructor === Array) {
                this.memberActivities = [];
                for (let item of data["memberActivities"])
                    this.memberActivities.push(MemberActivity.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetMemberActivityOutput {
        let result = new GetMemberActivityOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.memberActivities && this.memberActivities.constructor === Array) {
            data["memberActivities"] = [];
            for (let item of this.memberActivities)
                data["memberActivities"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetMemberActivityOutput {
    memberActivities: MemberActivity[];
}

export class MemberActivity implements IMemberActivity {
    name: string;
    earnings: string;
    cases: number;
    closed: number;
    rate: string;

    constructor(data?: IMemberActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.earnings = data["earnings"];
            this.cases = data["cases"];
            this.closed = data["closed"];
            this.rate = data["rate"];
        }
    }

    static fromJS(data: any): MemberActivity {
        let result = new MemberActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["earnings"] = this.earnings;
        data["cases"] = this.cases;
        data["closed"] = this.closed;
        data["rate"] = this.rate;
        return data; 
    }
}

export interface IMemberActivity {
    name: string;
    earnings: string;
    cases: number;
    closed: number;
    rate: string;
}

export class GetDashboardDataOutput implements IGetDashboardDataOutput {
    totalProfit: number;
    newFeedbacks: number;
    newOrders: number;
    newUsers: number;
    salesSummary: SalesSummaryData[];
    totalSales: number;
    revenue: number;
    expenses: number;
    growth: number;
    transactionPercent: number;
    newVisitPercent: number;
    bouncePercent: number;
    networkLoad: number[];
    cpuLoad: number[];
    loadRate: number[];
    timeLineItems: TimeLineItem[];

    constructor(data?: IGetDashboardDataOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalProfit = data["totalProfit"];
            this.newFeedbacks = data["newFeedbacks"];
            this.newOrders = data["newOrders"];
            this.newUsers = data["newUsers"];
            if (data["salesSummary"] && data["salesSummary"].constructor === Array) {
                this.salesSummary = [];
                for (let item of data["salesSummary"])
                    this.salesSummary.push(SalesSummaryData.fromJS(item));
            }
            this.totalSales = data["totalSales"];
            this.revenue = data["revenue"];
            this.expenses = data["expenses"];
            this.growth = data["growth"];
            this.transactionPercent = data["transactionPercent"];
            this.newVisitPercent = data["newVisitPercent"];
            this.bouncePercent = data["bouncePercent"];
            if (data["networkLoad"] && data["networkLoad"].constructor === Array) {
                this.networkLoad = [];
                for (let item of data["networkLoad"])
                    this.networkLoad.push(item);
            }
            if (data["cpuLoad"] && data["cpuLoad"].constructor === Array) {
                this.cpuLoad = [];
                for (let item of data["cpuLoad"])
                    this.cpuLoad.push(item);
            }
            if (data["loadRate"] && data["loadRate"].constructor === Array) {
                this.loadRate = [];
                for (let item of data["loadRate"])
                    this.loadRate.push(item);
            }
            if (data["timeLineItems"] && data["timeLineItems"].constructor === Array) {
                this.timeLineItems = [];
                for (let item of data["timeLineItems"])
                    this.timeLineItems.push(TimeLineItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDashboardDataOutput {
        let result = new GetDashboardDataOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalProfit"] = this.totalProfit;
        data["newFeedbacks"] = this.newFeedbacks;
        data["newOrders"] = this.newOrders;
        data["newUsers"] = this.newUsers;
        if (this.salesSummary && this.salesSummary.constructor === Array) {
            data["salesSummary"] = [];
            for (let item of this.salesSummary)
                data["salesSummary"].push(item.toJSON());
        }
        data["totalSales"] = this.totalSales;
        data["revenue"] = this.revenue;
        data["expenses"] = this.expenses;
        data["growth"] = this.growth;
        data["transactionPercent"] = this.transactionPercent;
        data["newVisitPercent"] = this.newVisitPercent;
        data["bouncePercent"] = this.bouncePercent;
        if (this.networkLoad && this.networkLoad.constructor === Array) {
            data["networkLoad"] = [];
            for (let item of this.networkLoad)
                data["networkLoad"].push(item);
        }
        if (this.cpuLoad && this.cpuLoad.constructor === Array) {
            data["cpuLoad"] = [];
            for (let item of this.cpuLoad)
                data["cpuLoad"].push(item);
        }
        if (this.loadRate && this.loadRate.constructor === Array) {
            data["loadRate"] = [];
            for (let item of this.loadRate)
                data["loadRate"].push(item);
        }
        if (this.timeLineItems && this.timeLineItems.constructor === Array) {
            data["timeLineItems"] = [];
            for (let item of this.timeLineItems)
                data["timeLineItems"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetDashboardDataOutput {
    totalProfit: number;
    newFeedbacks: number;
    newOrders: number;
    newUsers: number;
    salesSummary: SalesSummaryData[];
    totalSales: number;
    revenue: number;
    expenses: number;
    growth: number;
    transactionPercent: number;
    newVisitPercent: number;
    bouncePercent: number;
    networkLoad: number[];
    cpuLoad: number[];
    loadRate: number[];
    timeLineItems: TimeLineItem[];
}

export class SalesSummaryData implements ISalesSummaryData {
    period: string;
    sales: number;
    profit: number;

    constructor(data?: ISalesSummaryData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.period = data["period"];
            this.sales = data["sales"];
            this.profit = data["profit"];
        }
    }

    static fromJS(data: any): SalesSummaryData {
        let result = new SalesSummaryData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["period"] = this.period;
        data["sales"] = this.sales;
        data["profit"] = this.profit;
        return data; 
    }
}

export interface ISalesSummaryData {
    period: string;
    sales: number;
    profit: number;
}

export class TimeLineItem implements ITimeLineItem {
    title: string;
    image: string;
    autherName: string;
    longDate: string;
    shortDate: string;
    titleDate: string;
    text: string;

    constructor(data?: ITimeLineItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.title = data["title"];
            this.image = data["image"];
            this.autherName = data["autherName"];
            this.longDate = data["longDate"];
            this.shortDate = data["shortDate"];
            this.titleDate = data["titleDate"];
            this.text = data["text"];
        }
    }

    static fromJS(data: any): TimeLineItem {
        let result = new TimeLineItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["image"] = this.image;
        data["autherName"] = this.autherName;
        data["longDate"] = this.longDate;
        data["shortDate"] = this.shortDate;
        data["titleDate"] = this.titleDate;
        data["text"] = this.text;
        return data; 
    }
}

export interface ITimeLineItem {
    title: string;
    image: string;
    autherName: string;
    longDate: string;
    shortDate: string;
    titleDate: string;
    text: string;
}

export class GetSalesSummaryOutput implements IGetSalesSummaryOutput {
    salesSummary: SalesSummaryData[];

    constructor(data?: IGetSalesSummaryOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["salesSummary"] && data["salesSummary"].constructor === Array) {
                this.salesSummary = [];
                for (let item of data["salesSummary"])
                    this.salesSummary.push(SalesSummaryData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetSalesSummaryOutput {
        let result = new GetSalesSummaryOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.salesSummary && this.salesSummary.constructor === Array) {
            data["salesSummary"] = [];
            for (let item of this.salesSummary)
                data["salesSummary"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetSalesSummaryOutput {
    salesSummary: SalesSummaryData[];
}

export class GetWorldMapOutput implements IGetWorldMapOutput {
    countries: WorldMapCountry[];

    constructor(data?: IGetWorldMapOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["countries"] && data["countries"].constructor === Array) {
                this.countries = [];
                for (let item of data["countries"])
                    this.countries.push(WorldMapCountry.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetWorldMapOutput {
        let result = new GetWorldMapOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.countries && this.countries.constructor === Array) {
            data["countries"] = [];
            for (let item of this.countries)
                data["countries"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetWorldMapOutput {
    countries: WorldMapCountry[];
}

export class WorldMapCountry implements IWorldMapCountry {
    countryName: string;
    color: number;

    constructor(data?: IWorldMapCountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.countryName = data["countryName"];
            this.color = data["color"];
        }
    }

    static fromJS(data: any): WorldMapCountry {
        let result = new WorldMapCountry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["countryName"] = this.countryName;
        data["color"] = this.color;
        return data; 
    }
}

export interface IWorldMapCountry {
    countryName: string;
    color: number;
}

export class GetServerStatsOutput implements IGetServerStatsOutput {
    networkLoad: number[];
    cpuLoad: number[];
    loadRate: number[];

    constructor(data?: IGetServerStatsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["networkLoad"] && data["networkLoad"].constructor === Array) {
                this.networkLoad = [];
                for (let item of data["networkLoad"])
                    this.networkLoad.push(item);
            }
            if (data["cpuLoad"] && data["cpuLoad"].constructor === Array) {
                this.cpuLoad = [];
                for (let item of data["cpuLoad"])
                    this.cpuLoad.push(item);
            }
            if (data["loadRate"] && data["loadRate"].constructor === Array) {
                this.loadRate = [];
                for (let item of data["loadRate"])
                    this.loadRate.push(item);
            }
        }
    }

    static fromJS(data: any): GetServerStatsOutput {
        let result = new GetServerStatsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.networkLoad && this.networkLoad.constructor === Array) {
            data["networkLoad"] = [];
            for (let item of this.networkLoad)
                data["networkLoad"].push(item);
        }
        if (this.cpuLoad && this.cpuLoad.constructor === Array) {
            data["cpuLoad"] = [];
            for (let item of this.cpuLoad)
                data["cpuLoad"].push(item);
        }
        if (this.loadRate && this.loadRate.constructor === Array) {
            data["loadRate"] = [];
            for (let item of this.loadRate)
                data["loadRate"].push(item);
        }
        return data; 
    }
}

export interface IGetServerStatsOutput {
    networkLoad: number[];
    cpuLoad: number[];
    loadRate: number[];
}

export class GetGeneralStatsOutput implements IGetGeneralStatsOutput {
    transactionPercent: number;
    newVisitPercent: number;
    bouncePercent: number;

    constructor(data?: IGetGeneralStatsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transactionPercent = data["transactionPercent"];
            this.newVisitPercent = data["newVisitPercent"];
            this.bouncePercent = data["bouncePercent"];
        }
    }

    static fromJS(data: any): GetGeneralStatsOutput {
        let result = new GetGeneralStatsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionPercent"] = this.transactionPercent;
        data["newVisitPercent"] = this.newVisitPercent;
        data["bouncePercent"] = this.bouncePercent;
        return data; 
    }
}

export interface IGetGeneralStatsOutput {
    transactionPercent: number;
    newVisitPercent: number;
    bouncePercent: number;
}

export class GetDiscount implements IGetDiscount {
    discount: CreateDiscountInput;

    constructor(data?: IGetDiscount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.discount = data["discount"] ? CreateDiscountInput.fromJS(data["discount"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetDiscount {
        let result = new GetDiscount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discount"] = this.discount ? this.discount.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetDiscount {
    discount: CreateDiscountInput;
}

export class CreateDiscountInput implements ICreateDiscountInput {
    id: number;
    discountable: number;
    unDiscountable: number;
    quotationDescription: string;
    vat: number;

    constructor(data?: ICreateDiscountInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.discountable = data["discountable"];
            this.unDiscountable = data["unDiscountable"];
            this.quotationDescription = data["quotationDescription"];
            this.vat = data["vat"];
        }
    }

    static fromJS(data: any): CreateDiscountInput {
        let result = new CreateDiscountInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["discountable"] = this.discountable;
        data["unDiscountable"] = this.unDiscountable;
        data["quotationDescription"] = this.quotationDescription;
        data["vat"] = this.vat;
        return data; 
    }
}

export interface ICreateDiscountInput {
    id: number;
    discountable: number;
    unDiscountable: number;
    quotationDescription: string;
    vat: number;
}

export class RegisterTenantInput implements IRegisterTenantInput {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    adminPassword: string;
    captchaResponse: string;
    subscriptionStartType: RegisterTenantInputSubscriptionStartType;
    gateway: RegisterTenantInputGateway;
    editionId: number;
    paymentId: string;

    constructor(data?: IRegisterTenantInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.adminEmailAddress = data["adminEmailAddress"];
            this.adminPassword = data["adminPassword"];
            this.captchaResponse = data["captchaResponse"];
            this.subscriptionStartType = data["subscriptionStartType"];
            this.gateway = data["gateway"];
            this.editionId = data["editionId"];
            this.paymentId = data["paymentId"];
        }
    }

    static fromJS(data: any): RegisterTenantInput {
        let result = new RegisterTenantInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["adminEmailAddress"] = this.adminEmailAddress;
        data["adminPassword"] = this.adminPassword;
        data["captchaResponse"] = this.captchaResponse;
        data["subscriptionStartType"] = this.subscriptionStartType;
        data["gateway"] = this.gateway;
        data["editionId"] = this.editionId;
        data["paymentId"] = this.paymentId;
        return data; 
    }
}

export interface IRegisterTenantInput {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    adminPassword: string;
    captchaResponse: string;
    subscriptionStartType: RegisterTenantInputSubscriptionStartType;
    gateway: RegisterTenantInputGateway;
    editionId: number;
    paymentId: string;
}

export class RegisterTenantOutput implements IRegisterTenantOutput {
    tenantId: number;
    tenancyName: string;
    name: string;
    userName: string;
    emailAddress: string;
    isTenantActive: boolean;
    isActive: boolean;
    isEmailConfirmationRequired: boolean;

    constructor(data?: IRegisterTenantOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.isTenantActive = data["isTenantActive"];
            this.isActive = data["isActive"];
            this.isEmailConfirmationRequired = data["isEmailConfirmationRequired"];
        }
    }

    static fromJS(data: any): RegisterTenantOutput {
        let result = new RegisterTenantOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["isTenantActive"] = this.isTenantActive;
        data["isActive"] = this.isActive;
        data["isEmailConfirmationRequired"] = this.isEmailConfirmationRequired;
        return data; 
    }
}

export interface IRegisterTenantOutput {
    tenantId: number;
    tenancyName: string;
    name: string;
    userName: string;
    emailAddress: string;
    isTenantActive: boolean;
    isActive: boolean;
    isEmailConfirmationRequired: boolean;
}

export class EditionsSelectOutput implements IEditionsSelectOutput {
    allFeatures: FlatFeatureSelectDto[];
    editionsWithFeatures: EditionWithFeaturesDto[];
    tenantEditionId: number;

    constructor(data?: IEditionsSelectOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["allFeatures"] && data["allFeatures"].constructor === Array) {
                this.allFeatures = [];
                for (let item of data["allFeatures"])
                    this.allFeatures.push(FlatFeatureSelectDto.fromJS(item));
            }
            if (data["editionsWithFeatures"] && data["editionsWithFeatures"].constructor === Array) {
                this.editionsWithFeatures = [];
                for (let item of data["editionsWithFeatures"])
                    this.editionsWithFeatures.push(EditionWithFeaturesDto.fromJS(item));
            }
            this.tenantEditionId = data["tenantEditionId"];
        }
    }

    static fromJS(data: any): EditionsSelectOutput {
        let result = new EditionsSelectOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.allFeatures && this.allFeatures.constructor === Array) {
            data["allFeatures"] = [];
            for (let item of this.allFeatures)
                data["allFeatures"].push(item.toJSON());
        }
        if (this.editionsWithFeatures && this.editionsWithFeatures.constructor === Array) {
            data["editionsWithFeatures"] = [];
            for (let item of this.editionsWithFeatures)
                data["editionsWithFeatures"].push(item.toJSON());
        }
        data["tenantEditionId"] = this.tenantEditionId;
        return data; 
    }
}

export interface IEditionsSelectOutput {
    allFeatures: FlatFeatureSelectDto[];
    editionsWithFeatures: EditionWithFeaturesDto[];
    tenantEditionId: number;
}

export class FlatFeatureSelectDto implements IFlatFeatureSelectDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    defaultValue: string;
    inputType: IInputType;
    textHtmlColor: string;

    constructor(data?: IFlatFeatureSelectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.defaultValue = data["defaultValue"];
            this.inputType = data["inputType"] ? IInputType.fromJS(data["inputType"]) : <any>undefined;
            this.textHtmlColor = data["textHtmlColor"];
        }
    }

    static fromJS(data: any): FlatFeatureSelectDto {
        let result = new FlatFeatureSelectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["defaultValue"] = this.defaultValue;
        data["inputType"] = this.inputType ? this.inputType.toJSON() : <any>undefined;
        data["textHtmlColor"] = this.textHtmlColor;
        return data; 
    }
}

export interface IFlatFeatureSelectDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    defaultValue: string;
    inputType: IInputType;
    textHtmlColor: string;
}

export class EditionWithFeaturesDto implements IEditionWithFeaturesDto {
    edition: EditionSelectDto;
    featureValues: NameValueDto[];

    constructor(data?: IEditionWithFeaturesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionSelectDto.fromJS(data["edition"]) : <any>undefined;
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EditionWithFeaturesDto {
        let result = new EditionWithFeaturesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEditionWithFeaturesDto {
    edition: EditionSelectDto;
    featureValues: NameValueDto[];
}

export class IInputType implements IIInputType {
    name: string;
    attributes: { [key: string] : any; };
    validator: IValueValidator;

    constructor(data?: IIInputType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key];
                }
            }
            this.validator = data["validator"] ? IValueValidator.fromJS(data["validator"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IInputType {
        let result = new IInputType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key];
            }
        }
        data["validator"] = this.validator ? this.validator.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIInputType {
    name: string;
    attributes: { [key: string] : any; };
    validator: IValueValidator;
}

export class TenantSettingsEditDto implements ITenantSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: TenantUserManagementSettingsEditDto = new TenantUserManagementSettingsEditDto();
    email: EmailSettingsEditDto;
    ldap: LdapSettingsEditDto;
    security: SecuritySettingsEditDto = new SecuritySettingsEditDto();

    constructor(data?: ITenantSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.general = data["general"] ? GeneralSettingsEditDto.fromJS(data["general"]) : <any>undefined;
            this.userManagement = data["userManagement"] ? TenantUserManagementSettingsEditDto.fromJS(data["userManagement"]) : new TenantUserManagementSettingsEditDto();
            this.email = data["email"] ? EmailSettingsEditDto.fromJS(data["email"]) : <any>undefined;
            this.ldap = data["ldap"] ? LdapSettingsEditDto.fromJS(data["ldap"]) : <any>undefined;
            this.security = data["security"] ? SecuritySettingsEditDto.fromJS(data["security"]) : new SecuritySettingsEditDto();
        }
    }

    static fromJS(data: any): TenantSettingsEditDto {
        let result = new TenantSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["general"] = this.general ? this.general.toJSON() : <any>undefined;
        data["userManagement"] = this.userManagement ? this.userManagement.toJSON() : <any>undefined;
        data["email"] = this.email ? this.email.toJSON() : <any>undefined;
        data["ldap"] = this.ldap ? this.ldap.toJSON() : <any>undefined;
        data["security"] = this.security ? this.security.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ITenantSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: TenantUserManagementSettingsEditDto;
    email: EmailSettingsEditDto;
    ldap: LdapSettingsEditDto;
    security: SecuritySettingsEditDto;
}

export class TenantUserManagementSettingsEditDto implements ITenantUserManagementSettingsEditDto {
    allowSelfRegistration: boolean;
    isNewRegisteredUserActiveByDefault: boolean;
    isEmailConfirmationRequiredForLogin: boolean;
    useCaptchaOnRegistration: boolean;

    constructor(data?: ITenantUserManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.allowSelfRegistration = data["allowSelfRegistration"];
            this.isNewRegisteredUserActiveByDefault = data["isNewRegisteredUserActiveByDefault"];
            this.isEmailConfirmationRequiredForLogin = data["isEmailConfirmationRequiredForLogin"];
            this.useCaptchaOnRegistration = data["useCaptchaOnRegistration"];
        }
    }

    static fromJS(data: any): TenantUserManagementSettingsEditDto {
        let result = new TenantUserManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowSelfRegistration"] = this.allowSelfRegistration;
        data["isNewRegisteredUserActiveByDefault"] = this.isNewRegisteredUserActiveByDefault;
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin;
        data["useCaptchaOnRegistration"] = this.useCaptchaOnRegistration;
        return data; 
    }
}

export interface ITenantUserManagementSettingsEditDto {
    allowSelfRegistration: boolean;
    isNewRegisteredUserActiveByDefault: boolean;
    isEmailConfirmationRequiredForLogin: boolean;
    useCaptchaOnRegistration: boolean;
}

export class LdapSettingsEditDto implements ILdapSettingsEditDto {
    isModuleEnabled: boolean;
    isEnabled: boolean;
    domain: string;
    userName: string;
    password: string;

    constructor(data?: ILdapSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isModuleEnabled = data["isModuleEnabled"];
            this.isEnabled = data["isEnabled"];
            this.domain = data["domain"];
            this.userName = data["userName"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): LdapSettingsEditDto {
        let result = new LdapSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isModuleEnabled"] = this.isModuleEnabled;
        data["isEnabled"] = this.isEnabled;
        data["domain"] = this.domain;
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILdapSettingsEditDto {
    isModuleEnabled: boolean;
    isEnabled: boolean;
    domain: string;
    userName: string;
    password: string;
}

export class ListResultDtoOfNameValueDto implements IListResultDtoOfNameValueDto {
    items: NameValueDto[];

    constructor(data?: IListResultDtoOfNameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfNameValueDto {
        let result = new ListResultDtoOfNameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfNameValueDto {
    items: NameValueDto[];
}

export class AuthenticateModel implements IAuthenticateModel {
    userNameOrEmailAddress: string;
    password: string;
    twoFactorVerificationCode: string;
    rememberClient: boolean;
    twoFactorRememberClientToken: string;
    singleSignIn: boolean;
    returnUrl: string;

    constructor(data?: IAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userNameOrEmailAddress = data["userNameOrEmailAddress"];
            this.password = data["password"];
            this.twoFactorVerificationCode = data["twoFactorVerificationCode"];
            this.rememberClient = data["rememberClient"];
            this.twoFactorRememberClientToken = data["twoFactorRememberClientToken"];
            this.singleSignIn = data["singleSignIn"];
            this.returnUrl = data["returnUrl"];
        }
    }

    static fromJS(data: any): AuthenticateModel {
        let result = new AuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress;
        data["password"] = this.password;
        data["twoFactorVerificationCode"] = this.twoFactorVerificationCode;
        data["rememberClient"] = this.rememberClient;
        data["twoFactorRememberClientToken"] = this.twoFactorRememberClientToken;
        data["singleSignIn"] = this.singleSignIn;
        data["returnUrl"] = this.returnUrl;
        return data; 
    }
}

export interface IAuthenticateModel {
    userNameOrEmailAddress: string;
    password: string;
    twoFactorVerificationCode: string;
    rememberClient: boolean;
    twoFactorRememberClientToken: string;
    singleSignIn: boolean;
    returnUrl: string;
}

export class AuthenticateResultModel implements IAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
    shouldResetPassword: boolean;
    passwordResetCode: string;
    userId: number;
    requiresTwoFactorVerification: boolean;
    twoFactorAuthProviders: string[];
    twoFactorRememberClientToken: string;
    returnUrl: string;
    url: string;
    email: string;
    userName: string;

    constructor(data?: IAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.shouldResetPassword = data["shouldResetPassword"];
            this.passwordResetCode = data["passwordResetCode"];
            this.userId = data["userId"];
            this.requiresTwoFactorVerification = data["requiresTwoFactorVerification"];
            if (data["twoFactorAuthProviders"] && data["twoFactorAuthProviders"].constructor === Array) {
                this.twoFactorAuthProviders = [];
                for (let item of data["twoFactorAuthProviders"])
                    this.twoFactorAuthProviders.push(item);
            }
            this.twoFactorRememberClientToken = data["twoFactorRememberClientToken"];
            this.returnUrl = data["returnUrl"];
            this.url = data["url"];
            this.email = data["email"];
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        let result = new AuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["shouldResetPassword"] = this.shouldResetPassword;
        data["passwordResetCode"] = this.passwordResetCode;
        data["userId"] = this.userId;
        data["requiresTwoFactorVerification"] = this.requiresTwoFactorVerification;
        if (this.twoFactorAuthProviders && this.twoFactorAuthProviders.constructor === Array) {
            data["twoFactorAuthProviders"] = [];
            for (let item of this.twoFactorAuthProviders)
                data["twoFactorAuthProviders"].push(item);
        }
        data["twoFactorRememberClientToken"] = this.twoFactorRememberClientToken;
        data["returnUrl"] = this.returnUrl;
        data["url"] = this.url;
        data["email"] = this.email;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface IAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
    shouldResetPassword: boolean;
    passwordResetCode: string;
    userId: number;
    requiresTwoFactorVerification: boolean;
    twoFactorAuthProviders: string[];
    twoFactorRememberClientToken: string;
    returnUrl: string;
    url: string;
    email: string;
    userName: string;
}

export class SendTwoFactorAuthCodeModel implements ISendTwoFactorAuthCodeModel {
    userId: number;
    provider: string;

    constructor(data?: ISendTwoFactorAuthCodeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.provider = data["provider"];
        }
    }

    static fromJS(data: any): SendTwoFactorAuthCodeModel {
        let result = new SendTwoFactorAuthCodeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["provider"] = this.provider;
        return data; 
    }
}

export interface ISendTwoFactorAuthCodeModel {
    userId: number;
    provider: string;
}

export class ImpersonatedAuthenticateResultModel implements IImpersonatedAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;

    constructor(data?: IImpersonatedAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
        }
    }

    static fromJS(data: any): ImpersonatedAuthenticateResultModel {
        let result = new ImpersonatedAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data; 
    }
}

export interface IImpersonatedAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
}

export class SwitchedAccountAuthenticateResultModel implements ISwitchedAccountAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;

    constructor(data?: ISwitchedAccountAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
        }
    }

    static fromJS(data: any): SwitchedAccountAuthenticateResultModel {
        let result = new SwitchedAccountAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data; 
    }
}

export interface ISwitchedAccountAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
}

export class ExternalLoginProviderInfoModel implements IExternalLoginProviderInfoModel {
    name: string;
    clientId: string;

    constructor(data?: IExternalLoginProviderInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.clientId = data["clientId"];
        }
    }

    static fromJS(data: any): ExternalLoginProviderInfoModel {
        let result = new ExternalLoginProviderInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["clientId"] = this.clientId;
        return data; 
    }
}

export interface IExternalLoginProviderInfoModel {
    name: string;
    clientId: string;
}

export class ExternalAuthenticateModel implements IExternalAuthenticateModel {
    authProvider: string;
    providerKey: string;
    providerAccessCode: string;
    returnUrl: string;
    singleSignIn: boolean;

    constructor(data?: IExternalAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.authProvider = data["authProvider"];
            this.providerKey = data["providerKey"];
            this.providerAccessCode = data["providerAccessCode"];
            this.returnUrl = data["returnUrl"];
            this.singleSignIn = data["singleSignIn"];
        }
    }

    static fromJS(data: any): ExternalAuthenticateModel {
        let result = new ExternalAuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authProvider"] = this.authProvider;
        data["providerKey"] = this.providerKey;
        data["providerAccessCode"] = this.providerAccessCode;
        data["returnUrl"] = this.returnUrl;
        data["singleSignIn"] = this.singleSignIn;
        return data; 
    }
}

export interface IExternalAuthenticateModel {
    authProvider: string;
    providerKey: string;
    providerAccessCode: string;
    returnUrl: string;
    singleSignIn: boolean;
}

export class ExternalAuthenticateResultModel implements IExternalAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
    waitingForActivation: boolean;
    returnUrl: string;

    constructor(data?: IExternalAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.waitingForActivation = data["waitingForActivation"];
            this.returnUrl = data["returnUrl"];
        }
    }

    static fromJS(data: any): ExternalAuthenticateResultModel {
        let result = new ExternalAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["waitingForActivation"] = this.waitingForActivation;
        data["returnUrl"] = this.returnUrl;
        return data; 
    }
}

export interface IExternalAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
    waitingForActivation: boolean;
    returnUrl: string;
}

export class PagedResultDtoOfUserListDto implements IPagedResultDtoOfUserListDto {
    totalCount: number;
    items: UserListDto[];

    constructor(data?: IPagedResultDtoOfUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfUserListDto {
        let result = new PagedResultDtoOfUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfUserListDto {
    totalCount: number;
    items: UserListDto[];
}

export class UserListDto implements IUserListDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string;
    emailPassword: string;
    profilePictureId: string;
    profilePictureUrl: string;
    isEmailConfirmed: boolean;
    roles: UserListRoleDto[];
    lastLoginTime: moment.Moment;
    isActive: boolean;
    creationTime: moment.Moment;
    id: number;

    constructor(data?: IUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.emailPassword = data["emailPassword"];
            this.profilePictureId = data["profilePictureId"];
            this.profilePictureUrl = data["profilePictureUrl"];
            this.isEmailConfirmed = data["isEmailConfirmed"];
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(UserListRoleDto.fromJS(item));
            }
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : <any>undefined;
            this.isActive = data["isActive"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserListDto {
        let result = new UserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["emailPassword"] = this.emailPassword;
        data["profilePictureId"] = this.profilePictureId;
        data["profilePictureUrl"] = this.profilePictureUrl;
        data["isEmailConfirmed"] = this.isEmailConfirmed;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserListDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string;
    emailPassword: string;
    profilePictureId: string;
    profilePictureUrl: string;
    isEmailConfirmed: boolean;
    roles: UserListRoleDto[];
    lastLoginTime: moment.Moment;
    isActive: boolean;
    creationTime: moment.Moment;
    id: number;
}

export class UserListRoleDto implements IUserListRoleDto {
    roleId: number;
    roleName: string;

    constructor(data?: IUserListRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            this.roleName = data["roleName"];
        }
    }

    static fromJS(data: any): UserListRoleDto {
        let result = new UserListRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        return data; 
    }
}

export interface IUserListRoleDto {
    roleId: number;
    roleName: string;
}

export class GetUserForEditOutput implements IGetUserForEditOutput {
    profilePictureId: string;
    user: UserEditDto;
    roles: UserRoleDto[];
    organizationUnits: OrganizationUnitDto[];

    constructor(data?: IGetUserForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profilePictureId = data["profilePictureId"];
            this.user = data["user"] ? UserEditDto.fromJS(data["user"]) : <any>undefined;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(UserRoleDto.fromJS(item));
            }
            if (data["organizationUnits"] && data["organizationUnits"].constructor === Array) {
                this.organizationUnits = [];
                for (let item of data["organizationUnits"])
                    this.organizationUnits.push(OrganizationUnitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserForEditOutput {
        let result = new GetUserForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profilePictureId"] = this.profilePictureId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        if (this.organizationUnits && this.organizationUnits.constructor === Array) {
            data["organizationUnits"] = [];
            for (let item of this.organizationUnits)
                data["organizationUnits"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetUserForEditOutput {
    profilePictureId: string;
    user: UserEditDto;
    roles: UserRoleDto[];
    organizationUnits: OrganizationUnitDto[];
}

export class UserEditDto implements IUserEditDto {
    id: number;
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string;
    emailPassword: string;
    password: string;
    isActive: boolean;
    shouldChangePasswordOnNextLogin: boolean;
    isTwoFactorEnabled: boolean;
    isLockoutEnabled: boolean;
    departmentId: number;
    userDesignationId: number;
    url: string;
    profilePictureUrl: string;

    constructor(data?: IUserEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.emailPassword = data["emailPassword"];
            this.password = data["password"];
            this.isActive = data["isActive"];
            this.shouldChangePasswordOnNextLogin = data["shouldChangePasswordOnNextLogin"];
            this.isTwoFactorEnabled = data["isTwoFactorEnabled"];
            this.isLockoutEnabled = data["isLockoutEnabled"];
            this.departmentId = data["departmentId"];
            this.userDesignationId = data["userDesignationId"];
            this.url = data["url"];
            this.profilePictureUrl = data["profilePictureUrl"];
        }
    }

    static fromJS(data: any): UserEditDto {
        let result = new UserEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["emailPassword"] = this.emailPassword;
        data["password"] = this.password;
        data["isActive"] = this.isActive;
        data["shouldChangePasswordOnNextLogin"] = this.shouldChangePasswordOnNextLogin;
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled;
        data["isLockoutEnabled"] = this.isLockoutEnabled;
        data["departmentId"] = this.departmentId;
        data["userDesignationId"] = this.userDesignationId;
        data["url"] = this.url;
        data["profilePictureUrl"] = this.profilePictureUrl;
        return data; 
    }
}

export interface IUserEditDto {
    id: number;
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string;
    emailPassword: string;
    password: string;
    isActive: boolean;
    shouldChangePasswordOnNextLogin: boolean;
    isTwoFactorEnabled: boolean;
    isLockoutEnabled: boolean;
    departmentId: number;
    userDesignationId: number;
    url: string;
    profilePictureUrl: string;
}

export class UserRoleDto implements IUserRoleDto {
    roleId: number;
    roleName: string;
    roleDisplayName: string;
    isAssigned: boolean;

    constructor(data?: IUserRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            this.roleName = data["roleName"];
            this.roleDisplayName = data["roleDisplayName"];
            this.isAssigned = data["isAssigned"];
        }
    }

    static fromJS(data: any): UserRoleDto {
        let result = new UserRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        data["roleDisplayName"] = this.roleDisplayName;
        data["isAssigned"] = this.isAssigned;
        return data; 
    }
}

export interface IUserRoleDto {
    roleId: number;
    roleName: string;
    roleDisplayName: string;
    isAssigned: boolean;
}

export class GetUserPermissionsForEditOutput implements IGetUserPermissionsForEditOutput {
    permissions: FlatPermissionDto[];
    grantedPermissionNames: string[];

    constructor(data?: IGetUserPermissionsForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(FlatPermissionDto.fromJS(item));
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): GetUserPermissionsForEditOutput {
        let result = new GetUserPermissionsForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface IGetUserPermissionsForEditOutput {
    permissions: FlatPermissionDto[];
    grantedPermissionNames: string[];
}

export class EntityDtoOfInt64 implements IEntityDtoOfInt64 {
    id: number;

    constructor(data?: IEntityDtoOfInt64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfInt64 {
        let result = new EntityDtoOfInt64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDtoOfInt64 {
    id: number;
}

export class UpdateUserPermissionsInput implements IUpdateUserPermissionsInput {
    id: number;
    grantedPermissionNames: string[] = [];

    constructor(data?: IUpdateUserPermissionsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateUserPermissionsInput {
        let result = new UpdateUserPermissionsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface IUpdateUserPermissionsInput {
    id: number;
    grantedPermissionNames: string[];
}

export class CreateOrUpdateUserInput implements ICreateOrUpdateUserInput {
    user: UserEditDto = new UserEditDto();
    assignedRoleNames: string[] = [];
    sendActivationEmail: boolean;
    setRandomPassword: boolean;

    constructor(data?: ICreateOrUpdateUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.user = data["user"] ? UserEditDto.fromJS(data["user"]) : new UserEditDto();
            if (data["assignedRoleNames"] && data["assignedRoleNames"].constructor === Array) {
                this.assignedRoleNames = [];
                for (let item of data["assignedRoleNames"])
                    this.assignedRoleNames.push(item);
            }
            this.sendActivationEmail = data["sendActivationEmail"];
            this.setRandomPassword = data["setRandomPassword"];
        }
    }

    static fromJS(data: any): CreateOrUpdateUserInput {
        let result = new CreateOrUpdateUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (this.assignedRoleNames && this.assignedRoleNames.constructor === Array) {
            data["assignedRoleNames"] = [];
            for (let item of this.assignedRoleNames)
                data["assignedRoleNames"].push(item);
        }
        data["sendActivationEmail"] = this.sendActivationEmail;
        data["setRandomPassword"] = this.setRandomPassword;
        return data; 
    }
}

export interface ICreateOrUpdateUserInput {
    user: UserEditDto;
    assignedRoleNames: string[];
    sendActivationEmail: boolean;
    setRandomPassword: boolean;
}

export class GetSalesCoordinator implements IGetSalesCoordinator {
    saless: SalesCoordinatorList;

    constructor(data?: IGetSalesCoordinator) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.saless = data["saless"] ? SalesCoordinatorList.fromJS(data["saless"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSalesCoordinator {
        let result = new GetSalesCoordinator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saless"] = this.saless ? this.saless.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetSalesCoordinator {
    saless: SalesCoordinatorList;
}

export class SalesCoordinatorList implements ISalesCoordinatorList {
    id: number;
    coordinatorId: number;
    coordinatorName: string;
    userId: number;
    name: string;

    constructor(data?: ISalesCoordinatorList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.coordinatorId = data["coordinatorId"];
            this.coordinatorName = data["coordinatorName"];
            this.userId = data["userId"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): SalesCoordinatorList {
        let result = new SalesCoordinatorList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["coordinatorId"] = this.coordinatorId;
        data["coordinatorName"] = this.coordinatorName;
        data["userId"] = this.userId;
        data["name"] = this.name;
        return data; 
    }
}

export interface ISalesCoordinatorList {
    id: number;
    coordinatorId: number;
    coordinatorName: string;
    userId: number;
    name: string;
}

export class SalesCoordinatorInput implements ISalesCoordinatorInput {
    id: number;
    coordinatorId: number;
    userId: number;

    constructor(data?: ISalesCoordinatorInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.coordinatorId = data["coordinatorId"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): SalesCoordinatorInput {
        let result = new SalesCoordinatorInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["coordinatorId"] = this.coordinatorId;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface ISalesCoordinatorInput {
    id: number;
    coordinatorId: number;
    userId: number;
}

export class ListResultDtoOfUserDesignationListDto implements IListResultDtoOfUserDesignationListDto {
    items: UserDesignationListDto[];

    constructor(data?: IListResultDtoOfUserDesignationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserDesignationListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfUserDesignationListDto {
        let result = new ListResultDtoOfUserDesignationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfUserDesignationListDto {
    items: UserDesignationListDto[];
}

export class UserDesignationListDto implements IUserDesignationListDto {
    id: number;
    name: string;

    constructor(data?: IUserDesignationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): UserDesignationListDto {
        let result = new UserDesignationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IUserDesignationListDto {
    id: number;
    name: string;
}

export class GetUserDesignation implements IGetUserDesignation {
    users: UserDesignationListDto;

    constructor(data?: IGetUserDesignation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.users = data["users"] ? UserDesignationListDto.fromJS(data["users"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetUserDesignation {
        let result = new GetUserDesignation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["users"] = this.users ? this.users.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetUserDesignation {
    users: UserDesignationListDto;
}

export class UserDesignationInputDto implements IUserDesignationInputDto {
    id: number;
    name: string;

    constructor(data?: IUserDesignationInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): UserDesignationInputDto {
        let result = new UserDesignationInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IUserDesignationInputDto {
    id: number;
    name: string;
}

export class LinkToUserInput implements ILinkToUserInput {
    tenancyName: string;
    usernameOrEmailAddress: string;
    password: string;

    constructor(data?: ILinkToUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.usernameOrEmailAddress = data["usernameOrEmailAddress"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): LinkToUserInput {
        let result = new LinkToUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["usernameOrEmailAddress"] = this.usernameOrEmailAddress;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILinkToUserInput {
    tenancyName: string;
    usernameOrEmailAddress: string;
    password: string;
}

export class PagedResultDtoOfLinkedUserDto implements IPagedResultDtoOfLinkedUserDto {
    totalCount: number;
    items: LinkedUserDto[];

    constructor(data?: IPagedResultDtoOfLinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LinkedUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLinkedUserDto {
        let result = new PagedResultDtoOfLinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfLinkedUserDto {
    totalCount: number;
    items: LinkedUserDto[];
}

export class LinkedUserDto implements ILinkedUserDto {
    tenantId: number;
    tenancyName: string;
    username: string;
    lastLoginTime: moment.Moment;
    id: number;

    constructor(data?: ILinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.tenancyName = data["tenancyName"];
            this.username = data["username"];
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): LinkedUserDto {
        let result = new LinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["tenancyName"] = this.tenancyName;
        data["username"] = this.username;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface ILinkedUserDto {
    tenantId: number;
    tenancyName: string;
    username: string;
    lastLoginTime: moment.Moment;
    id: number;
}

export class ListResultDtoOfLinkedUserDto implements IListResultDtoOfLinkedUserDto {
    items: LinkedUserDto[];

    constructor(data?: IListResultDtoOfLinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LinkedUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfLinkedUserDto {
        let result = new ListResultDtoOfLinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfLinkedUserDto {
    items: LinkedUserDto[];
}

export class UnlinkUserInput implements IUnlinkUserInput {
    tenantId: number;
    userId: number;

    constructor(data?: IUnlinkUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): UnlinkUserInput {
        let result = new UnlinkUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IUnlinkUserInput {
    tenantId: number;
    userId: number;
}

export class ListResultDtoOfUserLoginAttemptDto implements IListResultDtoOfUserLoginAttemptDto {
    items: UserLoginAttemptDto[];

    constructor(data?: IListResultDtoOfUserLoginAttemptDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserLoginAttemptDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfUserLoginAttemptDto {
        let result = new ListResultDtoOfUserLoginAttemptDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfUserLoginAttemptDto {
    items: UserLoginAttemptDto[];
}

export class UserLoginAttemptDto implements IUserLoginAttemptDto {
    tenancyName: string;
    userNameOrEmail: string;
    clientIpAddress: string;
    clientName: string;
    browserInfo: string;
    result: string;
    creationTime: moment.Moment;

    constructor(data?: IUserLoginAttemptDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.userNameOrEmail = data["userNameOrEmail"];
            this.clientIpAddress = data["clientIpAddress"];
            this.clientName = data["clientName"];
            this.browserInfo = data["browserInfo"];
            this.result = data["result"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UserLoginAttemptDto {
        let result = new UserLoginAttemptDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["userNameOrEmail"] = this.userNameOrEmail;
        data["clientIpAddress"] = this.clientIpAddress;
        data["clientName"] = this.clientName;
        data["browserInfo"] = this.browserInfo;
        data["result"] = this.result;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IUserLoginAttemptDto {
    tenancyName: string;
    userNameOrEmail: string;
    clientIpAddress: string;
    clientName: string;
    browserInfo: string;
    result: string;
    creationTime: moment.Moment;
}

export class ListResultDtoOfViewListDto implements IListResultDtoOfViewListDto {
    items: ViewListDto[];

    constructor(data?: IListResultDtoOfViewListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ViewListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfViewListDto {
        let result = new ListResultDtoOfViewListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfViewListDto {
    items: ViewListDto[];
}

export class ViewListDto implements IViewListDto {
    id: number;
    name: string;
    query: string;
    isEditable: boolean;
    isEnquiry: boolean;
    quotationStatusId: number;
    allPersonId: number;
    graterAmount: number;
    lessAmount: number;
    dateFilterId: number;
    closureDateFilterId: number;
    lastActivityDateFilterId: number;
    creationTime: string;
    createdBy: string;
    statusName: string;
    personName: string;
    filterName: string;
    enqStatusId: number;
    userIds: string;
    quotationCreateBy: string;
    quotationStatus: string;
    salesman: string;
    inquiryCreateBy: string;
    potentialCustomer: string;
    mileStoneName: string;
    enquiryStatus: string;
    teamName: string;
    coordinator: string;
    designer: string;
    designationName: string;
    emirates: string;
    depatmentName: string;
    categories: string;
    status: string;
    whyBafco: string;
    probability: string;
    quotationCreation: string;
    inquiryCreation: string;
    closureDate: string;
    lastActivity: string;
    statusForQuotation: string;

    constructor(data?: IViewListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.query = data["query"];
            this.isEditable = data["isEditable"];
            this.isEnquiry = data["isEnquiry"];
            this.quotationStatusId = data["quotationStatusId"];
            this.allPersonId = data["allPersonId"];
            this.graterAmount = data["graterAmount"];
            this.lessAmount = data["lessAmount"];
            this.dateFilterId = data["dateFilterId"];
            this.closureDateFilterId = data["closureDateFilterId"];
            this.lastActivityDateFilterId = data["lastActivityDateFilterId"];
            this.creationTime = data["creationTime"];
            this.createdBy = data["createdBy"];
            this.statusName = data["statusName"];
            this.personName = data["personName"];
            this.filterName = data["filterName"];
            this.enqStatusId = data["enqStatusId"];
            this.userIds = data["userIds"];
            this.quotationCreateBy = data["quotationCreateBy"];
            this.quotationStatus = data["quotationStatus"];
            this.salesman = data["salesman"];
            this.inquiryCreateBy = data["inquiryCreateBy"];
            this.potentialCustomer = data["potentialCustomer"];
            this.mileStoneName = data["mileStoneName"];
            this.enquiryStatus = data["enquiryStatus"];
            this.teamName = data["teamName"];
            this.coordinator = data["coordinator"];
            this.designer = data["designer"];
            this.designationName = data["designationName"];
            this.emirates = data["emirates"];
            this.depatmentName = data["depatmentName"];
            this.categories = data["categories"];
            this.status = data["status"];
            this.whyBafco = data["whyBafco"];
            this.probability = data["probability"];
            this.quotationCreation = data["quotationCreation"];
            this.inquiryCreation = data["inquiryCreation"];
            this.closureDate = data["closureDate"];
            this.lastActivity = data["lastActivity"];
            this.statusForQuotation = data["statusForQuotation"];
        }
    }

    static fromJS(data: any): ViewListDto {
        let result = new ViewListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["query"] = this.query;
        data["isEditable"] = this.isEditable;
        data["isEnquiry"] = this.isEnquiry;
        data["quotationStatusId"] = this.quotationStatusId;
        data["allPersonId"] = this.allPersonId;
        data["graterAmount"] = this.graterAmount;
        data["lessAmount"] = this.lessAmount;
        data["dateFilterId"] = this.dateFilterId;
        data["closureDateFilterId"] = this.closureDateFilterId;
        data["lastActivityDateFilterId"] = this.lastActivityDateFilterId;
        data["creationTime"] = this.creationTime;
        data["createdBy"] = this.createdBy;
        data["statusName"] = this.statusName;
        data["personName"] = this.personName;
        data["filterName"] = this.filterName;
        data["enqStatusId"] = this.enqStatusId;
        data["userIds"] = this.userIds;
        data["quotationCreateBy"] = this.quotationCreateBy;
        data["quotationStatus"] = this.quotationStatus;
        data["salesman"] = this.salesman;
        data["inquiryCreateBy"] = this.inquiryCreateBy;
        data["potentialCustomer"] = this.potentialCustomer;
        data["mileStoneName"] = this.mileStoneName;
        data["enquiryStatus"] = this.enquiryStatus;
        data["teamName"] = this.teamName;
        data["coordinator"] = this.coordinator;
        data["designer"] = this.designer;
        data["designationName"] = this.designationName;
        data["emirates"] = this.emirates;
        data["depatmentName"] = this.depatmentName;
        data["categories"] = this.categories;
        data["status"] = this.status;
        data["whyBafco"] = this.whyBafco;
        data["probability"] = this.probability;
        data["quotationCreation"] = this.quotationCreation;
        data["inquiryCreation"] = this.inquiryCreation;
        data["closureDate"] = this.closureDate;
        data["lastActivity"] = this.lastActivity;
        data["statusForQuotation"] = this.statusForQuotation;
        return data; 
    }
}

export interface IViewListDto {
    id: number;
    name: string;
    query: string;
    isEditable: boolean;
    isEnquiry: boolean;
    quotationStatusId: number;
    allPersonId: number;
    graterAmount: number;
    lessAmount: number;
    dateFilterId: number;
    closureDateFilterId: number;
    lastActivityDateFilterId: number;
    creationTime: string;
    createdBy: string;
    statusName: string;
    personName: string;
    filterName: string;
    enqStatusId: number;
    userIds: string;
    quotationCreateBy: string;
    quotationStatus: string;
    salesman: string;
    inquiryCreateBy: string;
    potentialCustomer: string;
    mileStoneName: string;
    enquiryStatus: string;
    teamName: string;
    coordinator: string;
    designer: string;
    designationName: string;
    emirates: string;
    depatmentName: string;
    categories: string;
    status: string;
    whyBafco: string;
    probability: string;
    quotationCreation: string;
    inquiryCreation: string;
    closureDate: string;
    lastActivity: string;
    statusForQuotation: string;
}

export class GetViews implements IGetViews {
    viewdatas: ViewListDto;

    constructor(data?: IGetViews) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.viewdatas = data["viewdatas"] ? ViewListDto.fromJS(data["viewdatas"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetViews {
        let result = new GetViews();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["viewdatas"] = this.viewdatas ? this.viewdatas.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetViews {
    viewdatas: ViewListDto;
}

export class ViewInput implements IViewInput {
    id: number;
    name: string;
    query: string;
    isEditable: boolean;
    isEnquiry: boolean;
    quotationStatusId: number;
    allPersonId: number;
    graterAmount: number;
    lessAmount: number;
    dateFilterId: number;
    closureDateFilterId: number;
    lastActivityDateFilterId: number;
    enqStatusId: number;
    userIds: string;
    quotationCreateBy: string;
    quotationStatus: string;
    salesman: string;
    inquiryCreateBy: string;
    potentialCustomer: string;
    mileStoneName: string;
    enquiryStatus: string;
    teamName: string;
    coordinator: string;
    designer: string;
    designationName: string;
    emirates: string;
    depatmentName: string;
    categories: string;
    status: string;
    whyBafco: string;
    probability: string;
    quotationCreation: string;
    inquiryCreation: string;
    closureDate: string;
    lastActivity: string;
    statusForQuotation: string;

    constructor(data?: IViewInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.query = data["query"];
            this.isEditable = data["isEditable"];
            this.isEnquiry = data["isEnquiry"];
            this.quotationStatusId = data["quotationStatusId"];
            this.allPersonId = data["allPersonId"];
            this.graterAmount = data["graterAmount"];
            this.lessAmount = data["lessAmount"];
            this.dateFilterId = data["dateFilterId"];
            this.closureDateFilterId = data["closureDateFilterId"];
            this.lastActivityDateFilterId = data["lastActivityDateFilterId"];
            this.enqStatusId = data["enqStatusId"];
            this.userIds = data["userIds"];
            this.quotationCreateBy = data["quotationCreateBy"];
            this.quotationStatus = data["quotationStatus"];
            this.salesman = data["salesman"];
            this.inquiryCreateBy = data["inquiryCreateBy"];
            this.potentialCustomer = data["potentialCustomer"];
            this.mileStoneName = data["mileStoneName"];
            this.enquiryStatus = data["enquiryStatus"];
            this.teamName = data["teamName"];
            this.coordinator = data["coordinator"];
            this.designer = data["designer"];
            this.designationName = data["designationName"];
            this.emirates = data["emirates"];
            this.depatmentName = data["depatmentName"];
            this.categories = data["categories"];
            this.status = data["status"];
            this.whyBafco = data["whyBafco"];
            this.probability = data["probability"];
            this.quotationCreation = data["quotationCreation"];
            this.inquiryCreation = data["inquiryCreation"];
            this.closureDate = data["closureDate"];
            this.lastActivity = data["lastActivity"];
            this.statusForQuotation = data["statusForQuotation"];
        }
    }

    static fromJS(data: any): ViewInput {
        let result = new ViewInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["query"] = this.query;
        data["isEditable"] = this.isEditable;
        data["isEnquiry"] = this.isEnquiry;
        data["quotationStatusId"] = this.quotationStatusId;
        data["allPersonId"] = this.allPersonId;
        data["graterAmount"] = this.graterAmount;
        data["lessAmount"] = this.lessAmount;
        data["dateFilterId"] = this.dateFilterId;
        data["closureDateFilterId"] = this.closureDateFilterId;
        data["lastActivityDateFilterId"] = this.lastActivityDateFilterId;
        data["enqStatusId"] = this.enqStatusId;
        data["userIds"] = this.userIds;
        data["quotationCreateBy"] = this.quotationCreateBy;
        data["quotationStatus"] = this.quotationStatus;
        data["salesman"] = this.salesman;
        data["inquiryCreateBy"] = this.inquiryCreateBy;
        data["potentialCustomer"] = this.potentialCustomer;
        data["mileStoneName"] = this.mileStoneName;
        data["enquiryStatus"] = this.enquiryStatus;
        data["teamName"] = this.teamName;
        data["coordinator"] = this.coordinator;
        data["designer"] = this.designer;
        data["designationName"] = this.designationName;
        data["emirates"] = this.emirates;
        data["depatmentName"] = this.depatmentName;
        data["categories"] = this.categories;
        data["status"] = this.status;
        data["whyBafco"] = this.whyBafco;
        data["probability"] = this.probability;
        data["quotationCreation"] = this.quotationCreation;
        data["inquiryCreation"] = this.inquiryCreation;
        data["closureDate"] = this.closureDate;
        data["lastActivity"] = this.lastActivity;
        data["statusForQuotation"] = this.statusForQuotation;
        return data; 
    }
}

export interface IViewInput {
    id: number;
    name: string;
    query: string;
    isEditable: boolean;
    isEnquiry: boolean;
    quotationStatusId: number;
    allPersonId: number;
    graterAmount: number;
    lessAmount: number;
    dateFilterId: number;
    closureDateFilterId: number;
    lastActivityDateFilterId: number;
    enqStatusId: number;
    userIds: string;
    quotationCreateBy: string;
    quotationStatus: string;
    salesman: string;
    inquiryCreateBy: string;
    potentialCustomer: string;
    mileStoneName: string;
    enquiryStatus: string;
    teamName: string;
    coordinator: string;
    designer: string;
    designationName: string;
    emirates: string;
    depatmentName: string;
    categories: string;
    status: string;
    whyBafco: string;
    probability: string;
    quotationCreation: string;
    inquiryCreation: string;
    closureDate: string;
    lastActivity: string;
    statusForQuotation: string;
}

export class GetColumnList implements IGetColumnList {
    listDtos: ColumnList[];

    constructor(data?: IGetColumnList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["listDtos"] && data["listDtos"].constructor === Array) {
                this.listDtos = [];
                for (let item of data["listDtos"])
                    this.listDtos.push(ColumnList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetColumnList {
        let result = new GetColumnList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.listDtos && this.listDtos.constructor === Array) {
            data["listDtos"] = [];
            for (let item of this.listDtos)
                data["listDtos"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetColumnList {
    listDtos: ColumnList[];
}

export class ColumnList implements IColumnList {
    id: number;
    name: string;
    columnName: string;

    constructor(data?: IColumnList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.columnName = data["columnName"];
        }
    }

    static fromJS(data: any): ColumnList {
        let result = new ColumnList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["columnName"] = this.columnName;
        return data; 
    }
}

export interface IColumnList {
    id: number;
    name: string;
    columnName: string;
}

export class ListResultDtoOfReportColumnListDto implements IListResultDtoOfReportColumnListDto {
    items: ReportColumnListDto[];

    constructor(data?: IListResultDtoOfReportColumnListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ReportColumnListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfReportColumnListDto {
        let result = new ListResultDtoOfReportColumnListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfReportColumnListDto {
    items: ReportColumnListDto[];
}

export class ReportColumnListDto implements IReportColumnListDto {
    id: number;
    code: string;
    name: string;
    type: number;

    constructor(data?: IReportColumnListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.type = data["type"];
        }
    }

    static fromJS(data: any): ReportColumnListDto {
        let result = new ReportColumnListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["type"] = this.type;
        return data; 
    }
}

export interface IReportColumnListDto {
    id: number;
    code: string;
    name: string;
    type: number;
}

export class GetReportColumn implements IGetReportColumn {
    reportColumn: ReportColumnListDto;

    constructor(data?: IGetReportColumn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.reportColumn = data["reportColumn"] ? ReportColumnListDto.fromJS(data["reportColumn"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetReportColumn {
        let result = new GetReportColumn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reportColumn"] = this.reportColumn ? this.reportColumn.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetReportColumn {
    reportColumn: ReportColumnListDto;
}

export class ReportColumnInputDto implements IReportColumnInputDto {
    id: number;
    code: string;
    name: string;
    type: number;

    constructor(data?: IReportColumnInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.type = data["type"];
        }
    }

    static fromJS(data: any): ReportColumnInputDto {
        let result = new ReportColumnInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["type"] = this.type;
        return data; 
    }
}

export interface IReportColumnInputDto {
    id: number;
    code: string;
    name: string;
    type: number;
}

export class UpdateViewInput implements IUpdateViewInput {
    id: number;
    query: string;

    constructor(data?: IUpdateViewInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.query = data["query"];
        }
    }

    static fromJS(data: any): UpdateViewInput {
        let result = new UpdateViewInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["query"] = this.query;
        return data; 
    }
}

export interface IUpdateViewInput {
    id: number;
    query: string;
}

export class GetLatestWebLogsOutput implements IGetLatestWebLogsOutput {
    latestWebLogLines: string[];

    constructor(data?: IGetLatestWebLogsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["latestWebLogLines"] && data["latestWebLogLines"].constructor === Array) {
                this.latestWebLogLines = [];
                for (let item of data["latestWebLogLines"])
                    this.latestWebLogLines.push(item);
            }
        }
    }

    static fromJS(data: any): GetLatestWebLogsOutput {
        let result = new GetLatestWebLogsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.latestWebLogLines && this.latestWebLogLines.constructor === Array) {
            data["latestWebLogLines"] = [];
            for (let item of this.latestWebLogLines)
                data["latestWebLogLines"].push(item);
        }
        return data; 
    }
}

export interface IGetLatestWebLogsOutput {
    latestWebLogLines: string[];
}

export class ListResultDtoOfYbafcoList implements IListResultDtoOfYbafcoList {
    items: YbafcoList[];

    constructor(data?: IListResultDtoOfYbafcoList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(YbafcoList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfYbafcoList {
        let result = new ListResultDtoOfYbafcoList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfYbafcoList {
    items: YbafcoList[];
}

export class YbafcoList implements IYbafcoList {
    id: number;
    ybafcoCode: string;
    ybafcoName: string;

    constructor(data?: IYbafcoList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.ybafcoCode = data["ybafcoCode"];
            this.ybafcoName = data["ybafcoName"];
        }
    }

    static fromJS(data: any): YbafcoList {
        let result = new YbafcoList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ybafcoCode"] = this.ybafcoCode;
        data["ybafcoName"] = this.ybafcoName;
        return data; 
    }
}

export interface IYbafcoList {
    id: number;
    ybafcoCode: string;
    ybafcoName: string;
}

export class GetYbafco implements IGetYbafco {
    ybafcoList: YbafcoList;

    constructor(data?: IGetYbafco) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ybafcoList = data["ybafcoList"] ? YbafcoList.fromJS(data["ybafcoList"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetYbafco {
        let result = new GetYbafco();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ybafcoList"] = this.ybafcoList ? this.ybafcoList.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetYbafco {
    ybafcoList: YbafcoList;
}

export class CreateYbafcoInput implements ICreateYbafcoInput {
    id: number;
    ybafcoCode: string;
    ybafcoName: string;

    constructor(data?: ICreateYbafcoInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.ybafcoCode = data["ybafcoCode"];
            this.ybafcoName = data["ybafcoName"];
        }
    }

    static fromJS(data: any): CreateYbafcoInput {
        let result = new CreateYbafcoInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ybafcoCode"] = this.ybafcoCode;
        data["ybafcoName"] = this.ybafcoName;
        return data; 
    }
}

export interface ICreateYbafcoInput {
    id: number;
    ybafcoCode: string;
    ybafcoName: string;
}

export enum IncomeStatisticsDateInterval {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum IncomeStatisticsDateInterval2 {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum State {
    _0 = 0, 
    _1 = 1, 
}

export enum SalesSummaryDatePeriod {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum SalesSummaryDatePeriod2 {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum DefaultTimezoneScope {
    _1 = 1, 
    _2 = 2, 
    _4 = 4, 
    _7 = 7, 
}

export enum IsTenantAvailableOutputState {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum FriendDtoState {
    _1 = 1, 
    _2 = 2, 
}

export enum ChatMessageDtoSide {
    _1 = 1, 
    _2 = 2, 
}

export enum ChatMessageDtoReadState {
    _1 = 1, 
    _2 = 2, 
}

export enum UserNotificationState {
    _0 = 0, 
    _1 = 1, 
}

export enum TenantNotificationSeverity {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
}

export class AdditionalData implements IAdditionalData {
    paypal: { [key: string] : string; };

    constructor(data?: IAdditionalData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Paypal"]) {
                this.paypal = {};
                for (let key in data["Paypal"]) {
                    if (data["Paypal"].hasOwnProperty(key))
                        this.paypal[key] = data["Paypal"][key];
                }
            }
        }
    }

    static fromJS(data: any): AdditionalData {
        let result = new AdditionalData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.paypal) {
            data["Paypal"] = {};
            for (let key in this.paypal) {
                if (this.paypal.hasOwnProperty(key))
                    data["Paypal"][key] = this.paypal[key];
            }
        }
        return data; 
    }
}

export interface IAdditionalData {
    paypal: { [key: string] : string; };
}

export enum CreatePaymentDtoEditionPaymentType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum CreatePaymentDtoPaymentPeriodType {
    _30 = 30, 
    _365 = 365, 
}

export enum CreatePaymentDtoSubscriptionPaymentGatewayType {
    _1 = 1, 
}

export enum ExecutePaymentDtoGateway {
    _1 = 1, 
}

export enum ExecutePaymentDtoEditionPaymentType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum ExecutePaymentDtoPaymentPeriodType {
    _30 = 30, 
    _365 = 365, 
}

export enum TenantLoginInfoDtoPaymentPeriodType {
    _30 = 30, 
    _365 = 365, 
}

export enum RegisterTenantInputSubscriptionStartType {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum RegisterTenantInputGateway {
    _1 = 1, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(message: string, status: number, response: string, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, null));
}

function blobToText(blob: Blob): Observable<string> {
    return new Observable<string>((observer: any) => { 
        let reader = new FileReader(); 
        reader.onload = function() { 
            observer.next(this.result);
            observer.complete();
        }
        reader.readAsText(blob); 
    });
}